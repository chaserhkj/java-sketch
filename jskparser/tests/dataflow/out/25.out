node: <class 'ast.compilationunit.CompilationUnit'> name: None 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.classorinterfacedeclaration.ClassOrInterfaceDeclaration'> name: A 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.classorinterfacedeclaration.ClassOrInterfaceDeclaration'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.fielddeclaration.FieldDeclaration'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.primitivetype.PrimitiveType'> name: double 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.primitivetype.PrimitiveType'> name: double 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: y 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: y 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.fielddeclaration.FieldDeclaration'> name: y 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.methoddeclaration.MethodDeclaration'> name: getStart 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.referencetype.ReferenceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.parameter.Parameter'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.primitivetype.PrimitiveType'> name: double 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: x 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.parameter.Parameter'> name: p1 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: p1 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.referencetype.ReferenceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: p1 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.parameter.Parameter'> name: p2 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: p2 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.referencetype.ReferenceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Point 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: p2 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.blockstmt.BlockStmt'> name: None 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.ifstmt.IfStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.binaryexpr.BinaryExpr'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: x 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.fieldaccessexpr.FieldAccessExpr'> name: x 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: p1 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.blockstmt.BlockStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.returnstmt.ReturnStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: p1 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.ifstmt.IfStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.binaryexpr.BinaryExpr'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: x 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.fieldaccessexpr.FieldAccessExpr'> name: x 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: p2 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.blockstmt.BlockStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.returnstmt.ReturnStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nullliteralexpr.NullLiteralExpr'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.blockstmt.BlockStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.expressionstmt.ExpressionStmt'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'ret', 6), (u'x', 39), (u'p1', 36)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.variabledeclarationexpr.VariableDeclarationExpr'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'ret', 6), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.referencetype.ReferenceType'> name: Point 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Point 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclarator.VariableDeclarator'> name: ret 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'x', 39), (u'p2', 32), (u'p1', 36), (u'ret', 6)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.body.variabledeclaratorid.VariableDeclaratorId'> name: ret 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.objectcreationexpr.ObjectCreationExpr'> name: None 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Point 
	in: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	out: set([(u'p2', 32), (u'p1', 36), (u'x', 39)]) 
	inputs: [] 
	outputs: []

node: <class 'ast.stmt.returnstmt.ReturnStmt'> name: None 
	in: set([(u'x', 39), (u'p2', 32), (u'p1', 36), (u'ret', 6)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.expr.nameexpr.NameExpr'> name: ret 
	in: set([(u'x', 39), (u'p2', 32), (u'p1', 36), (u'ret', 6)]) 
	out: set([]) 
	inputs: [] 
	outputs: []

node: <class 'ast.type.classorinterfacetype.ClassOrInterfaceType'> name: Runnable 
	in: set([]) 
	out: set([]) 
	inputs: [] 
	outputs: []

