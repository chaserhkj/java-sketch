package String_Object;

int String()        { return 1; }

adt T {
  Str    { int n; char[n] s; }
  Len    { T t; }
  Concat { T t1; T t2; }
  Plus   {T left; T right; }
  Error  { }
}
struct Object {
  int  __cid;
  Str    str;
  Len    len;
  Concat ccat;
  Plus   plus;
}
// Construct string with concrete values
/* Object string([int n], char[n] s) { return new Object(__cid=String(),str=new Str(n=n,s=s)); } */
Object string()                  { return new Object(__cid=String(),str=new Str()); }
Object length(T t)               { return new Object(__cid=String(),len=new Len(t=t)); }
Object concat(T t1, T t2)        { return new Object(__cid=String(),ccat=new Concat(t1=t1,t2=t2)); }
Object plus(T left, T right)     { return new Object(__cid=String(),plus=new Plus(left=left,right=right)); }

T xform(T t) {
  switch(t) {
  case Str: return t;
  case Len:    return xform_Len(t.t);
  case Plus:   return new Plus(left=xform(t.left), right=xform(t.right));
  case Concat: return new Concat(t1=xform(t.t1), t2=xform(t.t2));
  case Error:  return t;
  }
}
T xform_Len(T t) {
  switch(t) {
  case Str:    return new Len(t=t);
  case Len:    return new Error(); // length(length(...)))
  case Plus:   return new Error(); // length(plus(...))
  case Concat: return new Plus(left=xform_Len(t.t1), right=xform_Len(t.t2));
  case Error:  return t;
  }
}
harness void mn() {
  /* Object s1 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=7+1, A="hello, "), 0, 7); */
  /* Object s2 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=6+1, A="world!"), 0, 6); */
  Object s1 = string();
  Object s2 = string();
  // When adding actual values to the adt constructors the assertions don't hold
  /* Object s1 = string("Hello, "); */
  /* Object s2 = string("world!"); */

  /* int len12 = (s1.__cid == String() ? length@String(s1) : 0) + (s2.__cid == String() ? length@String(s2) : 0); */
  Object plen12 = plus((s1.__cid == String() ? length(s1.str).len : null), (s2.__cid == String() ? length(s2.str).len : null));

  /* Object s3 = (s1.__cid == String() ? concat_String@String(s1, s2) : null); */
  Object s3 = (s1.__cid == String() ? concat(s1.str, s2.str) : null);

  /* int len3 = (s3.__cid == String() ? length@String(s3) : 0); */
  Object len3 = (s3.__cid == String() ? length(s3.ccat) : null);

  /* assert len3 == len12; */
  assert xform(len3.len) == plen12.plus;
}
