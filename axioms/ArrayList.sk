package ArrayList;

adt AList {
  List            { }
  Get             { AList l; int i; }
  Set	  	  { AList l; int i; Object v; }
  Add		  { AList l; Object v; }
  Size		  { AList l; }
  Error           { int code; }
}

// Construct Object from ADT
Object arraylist() {
  return new Object(__cid = ArrayList(), _alist=new List());
}

Object get(Object l, int i) {
  return new Object(__cid = ArrayList(), _alist=new Get(l=l._alist, i=i));
}

Object set(Object l, int i, Object v) {
  return new Object(__cid = ArrayList(), _alist=new Set(l=l._alist, i=i, v=v));
}

Object add(Object l, Object v) {
  return new Object(__cid = ArrayList(), _alist=new Add(l=l._alist, v=v));
}

Object size(Object l) {
  return new Object(__cid = ArrayList(), _alist=new Size(l=l._alist));
}

Object error(int code) {
  return new Object(__cid = ArrayList(), _alist=new Error(code=code));
}

Object xform_get(AList a, int index) {
  AList alist = null;
  switch (a) {
  case List:             { assert false; }
  case Get:              { assert false; }
  case Set: {
    if (a.i == index) { return a.v; }
    else { return xform_get(a.l, index); }
  }
  case Add: { 
    if (intValue@Integer(xform_size(a)) - 1 == index) { return a.v; }
    else { return xform_get(a.l, index); }
  }
  case Size:             { assert false; }
  case Error:            { assert false; }
  }
}

Object xform_size(AList a) {
  AList alist = null;
  switch (a) {
  case List:             { return Integer_Integer_int@Integer(new Object(__cid=Integer()), 0); }
  case Get:              { assert false; }
  case Set:              { return xform_size(a.l); }
  case Add:              {
    return Integer_Integer_int@Integer(new Object(__cid=Integer()),
				       intValue@Integer(xform_size(a.l)) + 1);
  }
  case Size:             { assert false; }
  case Error:            { assert false; }
  }
}

Object xform(AList a) {
  switch (a) {
  case List:            assert false;
  case Get:             return xform_get(a.l, a.i);
  case Set:   	        assert false;
  case Add:   	        assert false;
  case Size:	        return xform_size(a.l);
  case Error:           assert false;
  }
}
