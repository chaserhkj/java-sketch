package FileReaderr;

adt AFileReaderr {
  FileReaderr     { AFile f; int p; }
  Read            { AFileReaderr r; }
  ReadB           { AFileReaderr r; }
  Ready           { AFileReaderr r; }
}

char xform_read(AFileReaderr r) {
  switch (r) {
  case FileReaderr: {
    AFile f = r.f;
    switch (f) {
    case File:  return f.d[r.p];
    }
  }
  case Read:   assert false;
  case ReadB:  return xform_read(xform_readB(r));
  case Ready:  assert false;
  }
}


AFileReaderr xform_readB(AFileReaderr r) {
  switch (r) {
  case FileReaderr: {
    AFile f = r.f;
    switch (f) {
    case File:  return new FileReaderr(f=f, p=r.p + 1);
    }
  }
  case Read:   assert false;
  case ReadB:  {
    AFileReaderr rr = r.r;
    switch (rr) {
    case FileReaderr: return xform_readB(rr);
    case Read:        assert false;
    case ReadB:       return xform_readB(xform_readB(r.r));
    case Ready:       assert false;
    }
  }
  case Ready:  assert false;
  }
}

bit xform_ready(AFileReaderr r) {
  switch (r) {
  case FileReaderr: {
    AFile f = r.f;
    switch (f) {
    case File: {
      if (r.p < f.ld-1) { return true; }
      else { return false; }
    }
    }
  }
  case Read:   assert false;
  case ReadB:  return xform_ready(xform_readB(r));
  case Ready:  assert false;
  }
}
