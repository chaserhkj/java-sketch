package Axiom_String;

Object string(int __cid, int n, char[n] s) { 
   return String_String_char_int_int(new Object(__cid=String()), new Array_char(length=n, A=s), 0, n-1);
}
Object length(Object str) { 
   return Len_Len_Object(new Object(__cid=Len()), str); 
}
Object concat(Object s1, Object s2) { 
   return Concat_Concat_Object_Object(new Object(__cid=Concat()), s1, s2); 
}
Object plus(Object i1, Object i2) { 
   return Plus_Plus_Object_Object(new Object(__cid=Plus()), i1, i2); 
}
Object error() { 
   return Error_Error(new Object(__cid=Error())); 
}

Object xform (Object t, int dice) {
   Object t1; Object t2 = null;

   if (t.__cid == Len()) {
      t1 = t.str_Len;
   } else if (t.__cid == Plus()) {
      t1 = t.i1_Plus;
      t2 = t.i2_Plus;
   } else if (t.__cid == Concat()) {
      t1 = t.s1_Concat;
      t2 = t.s2_Concat;
   } else {
      return t;
   }  

   if (t.__cid == Len()) {
      if (t1.__cid == Concat()) {
         Object tt1; Object tt2;
         if (dice%2 == 0) {
	    dice = dice/2;
            tt1 = xform(length(t1.s1_Concat), dice);
            dice = dice/2;
            tt2 = xform(length(t1.s2_Concat), dice);
	 
	    return plus(tt1, tt2);	
	 } else {
	    dice = dice/2;
            tt1 = xform(t1.s1_Concat, dice);
            dice = dice/2;
            tt2 = xform(t1.s2_Concat, dice);

	    return length(concat(tt1, tt2));
	 }	 
      } else if (t1.__cid == String()) {
         return t;
      } else {
         return error();
      }  
   } else {
      dice = dice/2;
      t1 = xform(t1, dice);
      dice = dice/2;
      t2 = xform(t2, dice);

      if (t.__cid == Plus()) {
         return plus(t1, t2);	
      } else if (t.__cid == Concat()) {
         return concat(t1, t2);	
      } else {
         return error();
      }  
   }
}

harness void mn() {
  Object self = Object_Object(new Object(__cid=Object()));
  test_7_6(self);
}

void test_7_6(Object self) {

  // Solution time seems to increase worse-than-linearly with more holes
  //    - regardless of "difficulty" of solution

  Object s1 = string(String(), 8, "hello, ");
  Object s2 = string(String(), 7, "world!");
  Object s3 = string(String(), 4, "BEN");
  Object s4 = string(String(), 5, "JOSH");
  Object s5 = concat(s1, s2);
  Object s6 = concat(s3, s4);
  Object s7 = concat(s5, s6);
  Object len12 = plus(length(s1), length(s2));
  //Object len12_2 = plus(length(s1), length(s2));
  Object len34 = plus(length(s3), length(s4));
  Object len1234 = plus(len12, len34);
  Object len5 = length(s5);
  Object len6 = length(s6);
  Object len7 = length(s7);
  Object plenc12lenc34 = plus(length(concat(s1, s2)), length(concat(s3, s4)));
  assert equals_Axiom(xform(len5, ??), len12);
  assert equals_Axiom(xform(len6, ??), len34);
  // assert equals_Axiom(xform(len7, ??), len1234);
  // assert equals_Axiom(xform(len7, ??), len7);
  // assert equals_Axiom(xform(len7, ??), plenc12lenc34);

  // Object s8 = string(String(), 6, "SEED1");
  // Object s9 = string(String(), 6, "SEED2");
  // Object s10 = string(String(), 1, "");

  // Object looplen = length(s10);

  // int i = 0;

  // for (i = 0; i < 30; i++) {
  //    Object s11 = concat(s8, s8);
  //    Object s12 = concat(s9, s9);
  //    Object s13 = concat(s11, s12);
  //    s10 = concat(s10, s13);
  //    looplen = plus(looplen, plus(plus(length(s8), length(s8)),plus(length(s9), length(s9))));
  // }

  // Object len10 = length(s10);
  // assert equals_Axiom(xform(len10, ??), looplen);
}
