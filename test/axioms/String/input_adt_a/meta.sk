package meta;

bit error_flag = 0;

void assumePre(bit b) {
    if (!b) error_flag = true;
}

void assertPost(bit b) {
    if  (error_flag) return;
    else assert b;
}


adt StrTerm {
  Str      { int length; char[length] A; }
  Concat   { int length; StrTerm[length] T; }
  Replace  { StrTerm t1; StrTerm t2; StrTerm t3; }
  Error_S  { }
}
adt IntTerm {
  Len      { StrTerm t; }
  Plus     { IntTerm t1; IntTerm t2; }
  Error_I  { }
}

IntTerm xform(IntTerm t) {
  StrTerm st1;
  switch(t) {
  case Len:     { st1 = t.t; }
  case Plus:    { return new Plus(t1=xform(t.t1), t2=xform(t.t2)); }
  case Error_I: { return t; }
  }
  switch(st1) {
  case Str:     { return t; }
  case Replace: { return xform(new Len(t=st1.t1)); }
  case Concat: {
    assert st1.length >= 2;
    IntTerm[st1.length] its;
    for (int i = 0; i < st1.length; i++)
      its[i] = xform(new Len(t=st1.T[i]));
    assert its[0] == new Len(t=st1.T[0]);
    assert its[1] == new Len(t=st1.T[1]);
    Plus p = new Plus(t1=its[0], t2=its[1]);
    for (int i = 2; i < st1.length; i++)
      p = new Plus(t1=p, t2=its[i]);
    return p;
  }
  case Error_S: return new Error_I();
  }
}

int arithmetize(IntTerm t) {
  switch(t) {
  case Len:     return len(t.t);
  case Plus:    return arithmetize(t.t1) + arithmetize(t.t2);
  case Error_I: return -1;
  }
}

/* Object string([int n], char[n] ca)    { return new Object(__cid=String(),sterm=new Str(o=String_String_char(new Object(__cid=String()),ca))); } */
Object string()                       { return new Object(__cid=String(),sterm=new Str()); }
Object string2([int n], char[n] ca) {
  Object r = new Object(__cid=String(),sterm=new Str(length=n,A=ca)); 
  assumePre(len(r.sterm) == n-1);
  return r;
}
Object length(StrTerm t)              { return new Object(__cid=String(),iterm=new Len(t=t)); }
Object concat([int n], StrTerm t1, StrTerm t2) {
  int i = 0;
  StrTerm[n] ta;
  switch (t1) {
  case Str: { ta[i++] = t1; assert ta[0] == t1; }
  case Replace: { ta[i++] = t1.t1; }
  case Concat:  {
       for (; i < t1.length; i++) ta[i] = t1.T[i];
  }
  case Error_S: { ; }
  }
  assert i == 1;
  switch (t2) {
  case Str:     { ta[i] = t2; }
  case Replace: { ta[i] = t2.t1; }
  case Concat:  {
    int j = 0;
    for (; i < n; i++)
      ta[i] = t2.T[j++];
  }
  case Error_S: { ; }
  }
  assert ta[0] == t1;
  assert ta[1] == t2;
  Concat c = new Concat(length=n, T=ta);
  assert c.length == 2;
  assert c.T[0] == t1;
  assert c.T[1] == t2;
  return new Object(__cid=String(),sterm=c);
}
Object replace(StrTerm t1, StrTerm t2, StrTerm t3)
{ return new Object(__cid=String(),sterm=new Replace(t1=t1,t2=t2,t3=t3)); }
Object plus(IntTerm t1, IntTerm t2)   { return new Object(__cid=String(),iterm=new Plus(t1=t1,t2=t2)); }


// distinct class IDs
int Object()               { return 1; }
int String()               { return 2; }
/* int Ccat()                 { return 3; } */
/* int Length()               { return 4; } */
/* int Pluss()                 { return 5; } */

// Uninterpreted functions
int len(StrTerm t);
