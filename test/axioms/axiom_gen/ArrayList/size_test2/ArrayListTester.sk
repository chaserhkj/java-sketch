package ArrayListTester;

Object ArrayListTester_ArrayListTester(Object self) {
    return self;
}

harness void mn_int_int_int(int l1, int l2, int l3) {
  Object self = Object_Object(new Object(__cid=Object()));
  assume l1 >= 0 && l1 <= 10;
  assume l2 <= l1;
  assume l3 <= l1;
  Object a = ArrayList_ArrayList();
  for (int i = 0; i < l1; i++) {
    Object j = Integer_Integer_int(new Object(__cid=Integer()), i);
    (a.__cid == ArrayList() ? add_Object_Object@ArrayList(a, j) : null); a = (a.__cid == ArrayList() ? addb_Object_Object@ArrayList(a, j) : null);
  }
  int sz = (a.__cid == ArrayList() ? size_Object@ArrayList(a) : 0);
  assert sz == l1;
  for (int i = 0; i < l2; i++) {
    Object j = Integer_Integer_int(new Object(__cid=Integer()), i + 1);
    (a.__cid == ArrayList() ? set_Object_int_Object@ArrayList(a, i, j) : null); a = (a.__cid == ArrayList() ? setb_Object_int_Object@ArrayList(a, i, j) : null);
  }
  sz = (a.__cid == ArrayList() ? size_Object@ArrayList(a) : 0);
  assert sz == l1;
  for (int i = l3; i > 0; i--) {
    (a.__cid == ArrayList() ? remove_Object_int@ArrayList(a, i) : null); a = (a.__cid == ArrayList() ? removeb_Object_int@ArrayList(a, i) : null);
  }
  sz = (a.__cid == ArrayList() ? size_Object@ArrayList(a) : 0);
  assert sz == l1 - l3;
}

