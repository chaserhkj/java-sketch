package FreqTable;

harness void main() {
  test1();
  test2();
}
void test1() {
  Object freqs = HashMap_NoHash_HashMap_NoHash(new Object(__cid=HashMap_NoHash()));
  char[] file0_nm = "f";
  char[] file0_d = "aab";
  freqs = createTable(file0_nm, file0_d);
  Object a = Character_Character_char(new Object(__cid=Character()), 'a');
  Object b = Character_Character_char(new Object(__cid=Character()), 'b');
  Object ia = get_K(freqs, a);
  Object ib = get_K(freqs, b);
  assert intValue@Integer(ia) == 2;
  assert intValue@Integer(ib) == 1;
}
void test2() {
  Object freqs = HashMap_NoHash_HashMap_NoHash(new Object(__cid=HashMap_NoHash()));
  char[] file0_nm = "f";
  char[] file0_d = "aba";
  freqs = createTable(file0_nm, file0_d);
  Object a = Character_Character_char(new Object(__cid=Character()), 'a');
  Object b = Character_Character_char(new Object(__cid=Character()), 'b');
  Object ia = get_K(freqs, a);
  Object ib = get_K(freqs, b);
  assert intValue@Integer(ia) == 2;
  assert intValue@Integer(ib) == 1;
}

Object createTable([int ln, int ld], char[ln] name, char[ld] data) {
  Object freqs = HashMap_NoHash_HashMap_NoHash(new Object(__cid=HashMap_NoHash()));
  File af = new File(f=new File(), ln=ln, n=name, ld=ld, d=data);
  AFileReaderr ar = new FileReaderr(f=af, p=0);
  while (xform_ready(ar)) {
    Read rd = new Read(r=ar);
    Object c = Character_Character_char(new Object(__cid=Character()), xform_read(rd.r));
    ar = new ReadB(r=ar);
    bit bE = !isEmpty@HashMap_NoHash(freqs);
    bit bV = containsValue_V@HashMap_NoHash(freqs, c);
    bit bK = containsKey_K@HashMap_NoHash(freqs, c);
    if ({|bE | bV | bK|}) {
      Object v = get_K(freqs, c);
      if (v == null) {
	Object i0 = Integer_Integer_int(new Object(__cid=Integer()), intValue@Integer(??));
	put_K_V(freqs, {|c | i0|}, {|c | i0|});
      }
      else {
	Object i0 = Integer_Integer_int(new Object(__cid=Integer()), intValue@Integer(v) + ??);
	replace_K_V(freqs, {|c | i0|}, {|c | i0|});
      }
    }
    else {
      Object v = get_K(freqs, c);
      if (v == null) {
	Object i0 = Integer_Integer_int(new Object(__cid=Integer()), intValue@Integer(??));
	put_K_V(freqs, {|c | i0|}, {|c | i0|});
      }
      else {
	Object i0 = Integer_Integer_int(new Object(__cid=Integer()), intValue@Integer(v) + ??);
	replace_K_V(freqs, {|c | i0|}, {|c | i0|});
      }
    }
  }
  return freqs;
}
