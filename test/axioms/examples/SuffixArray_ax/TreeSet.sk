package TreeSet;

adt AThing {
   TreeSet {}
   AddB { AThing a; Object e; }   
   ClearB {}
   Add { AThing a; Object e; }
   Contains { AThing a; Object e; }      
}

Object TreeSet_TreeSet(Object self) {
   self.Thing = new TreeSet(); 
   return self;
}

Object add_E(Object self, Object e) {
   Object ret = new Object();
   ret.Thing = new Add(a=self.Thing,e=e);
   return ret;
}

Object add_EB(Object self, Object e) {
   self.Thing = new AddB(a=self.Thing,e=e);
   return self;
}

Object contains_Object(Object self, Object e) {
   Object ret = new Object();
   ret.Thing = new Contains(a=self.Thing,e=e);
   return ret;
}

Object clearB(Object self) {
   self.Thing = new ClearB();
   return self;
}

AThing xform_ClearB() {
   return new TreeSet();
}

bit equals(Object a, Object b) {
   if ((a.__cid == SuffixRankTuple() ? equals_Object@Object(a, b) : a.__cid == HashMap_TreeNode() ? equals_Object@Object(a, b) : a.__cid == TwoDArray() ? equals_Object@Object(a, b) : a.__cid == HashMap() ? equals_Object@Object(a, b) : a.__cid == HashMap_Node() ? equals_Object@HashMap_Node(a, b) : a.__cid == Integer() ? equals_Object@Integer(a, b) : a.__cid == TreeSet() ? equals_Object@Object(a, b) : a.__cid == Arrays() ? equals_Object@Object(a, b) : a.__cid == HashMap_Simple_Node() ? equals_Object@Object(a, b) : a.__cid == Assert() ? equals_Object@Object(a, b) : a.__cid == ArrayDeque() ? equals_Object@Object(a, b) : a.__cid == String() ? equals_Object@String(a, b) : a.__cid == Number() ? equals_Object@Object(a, b) : a.__cid == Character() ? equals_Object@Object(a, b) : a.__cid == ArrayList() ? equals_Object@Object(a, b) : a.__cid == SuffixArray() ? equals_Object@Object(a, b) : a.__cid == SuffixArrayTest() ? equals_Object@Object(a, b) : a.__cid == ArrayDeque_DequeNode() ? equals_Object@Object(a, b) : a.__cid == HashSet() ? equals_Object@Object(a, b) : a.__cid == Assert() ? equals_Object@Object(a, b) : a.__cid == Object() ? equals_Object@Object(a, b) : 0)) {
      return true;
   }
   return false;
}

boolean xform_Add(AThing a, Object e2) {
   switch(a) {
      case TreeSet: return true;	
      case AddB: {
	 if (equals(e2, a.e)) {
	    return false;	       
	 }
	 return xform_Add(a.a, e2);
      }
      case ClearB: return true;
      case Add: assert false;
      case Contains: assert false;
   }
}

boolean xform_Contains(AThing a, Object e2) {
   switch(a) {
      case TreeSet: return false;	
      case AddB: {
	 if (equals(e2, a.e)) {
	    return true;	       
	 }
	 return xform_Contains(a.a, e2);
      }
      case ClearB: return true;
      case Add: assert false;
      case Contains: assert false;
   }
}

boolean xform_add(AThing a) {
   switch(a) {
      case TreeSet: assert false;	
      case AddB: assert false;
      case ClearB: assert false;
      case Add: return xform_Add(a.a, a.e);
      case Contains: assert false;
   }
}

boolean xform_contains(AThing a) {
   switch(a) {
      case TreeSet: assert false;	
      case AddB: assert false;
      case ClearB: assert false;
      case Add: assert false;
      case Contains: return xform_Contains(a.a, a.e);
   }
}

