package HashSet;

Object INITIAL_CAPACITY;
Object INITIAL_CAPACITY_g() { return INITIAL_CAPACITY; }
void INITIAL_CAPACITY_s(Object INITIAL_CAPACITY_s) { INITIAL_CAPACITY = INITIAL_CAPACITY_s; }

Object RESIZE_FACTOR;
Object RESIZE_FACTOR_g() { return RESIZE_FACTOR; }
void RESIZE_FACTOR_s(Object RESIZE_FACTOR_s) { RESIZE_FACTOR = RESIZE_FACTOR_s; }

Object HashSet_HashSet(Object self) {
  self.set_HashSet = Wrap_Array_Object(new Array_Object(length=INITIAL_CAPACITY));
  self.size_HashSet = (new Object(__cid=-2, _int=0));
  self.capacity_HashSet = INITIAL_CAPACITY;
  INITIAL_CAPACITY = (new Object(__cid=-2, _int=16));
  RESIZE_FACTOR = (new Object(__cid=-2, _int=2));
  return self;
}

void resize(Object self) {
  Object new_size = (new Object(__cid=-2, _int=self.capacity_HashSet._int * RESIZE_FACTOR._int));
  Object new_set = Wrap_Array_Object(new Array_Object(length=new_size));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.capacity_HashSet._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    new_set._array_object.A[i._int] = self.set_HashSet._array_object.A[i._int];
  }
  self.set_HashSet = new_set;
  self.capacity_HashSet = (new Object(__cid=-2, _int=self.capacity_HashSet._int * RESIZE_FACTOR._int));
}

void check_size(Object self) {
  if (self.size_HashSet._int >= self.capacity_HashSet._int) {
    resize@HashSet(self);
  }
}

Object get_Index_Object(Object self, Object o) {
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.size_HashSet._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if ((o.__cid == (new Object(__cid=-2, _int=HashSet()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Arrays()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=CryptoCipherFactory_CipherProvider()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=RomlistParser()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=ArrayDeque_DequeNode()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Stack()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=HashMap_Node()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Collections()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=RomlistGame()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=ArrayDeque()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=FileWriterr()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=KeyStore()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=FileOutputStream()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=StringBuffer()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Properties()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Tester()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=System()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=KerberosKey()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=FileReaderr()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=CryptoCipherFactory()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=KeyGenerator()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Utils()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Float()))._int ? equals_Object@Float(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Number()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=BufferedReader()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=TreeMap()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=BufferedWriter()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=File()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Scanner()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=PrintStream()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=AbstractQueue()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=StringBuilder()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : o.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(o, self.set_HashSet._array_object.A[i._int]) : null)._bit) {
      return i;
    }
  }
  return (new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1))._int));
}

Object contains_Object(Object self, Object o) {
  return (new Object(__cid=-2, _int=get_Index_Object@HashSet(self, o)._int >= (new Object(__cid=-2, _int=0))._int));
}

Object add_E(Object self, Object e) {
  if (contains_Object@HashSet(self, e)._bit || e == null) {
    return (new Object(__cid=-4, _bit=false));
  }
  else {
    self.set_HashSet._array_object.A[self.size_HashSet._int] = e;
    self.size_HashSet = new Object(__cid=-2, _int=self.size_HashSet._int + 1);
    check_size@HashSet(self);
    return (new Object(__cid=-4, _bit=true));
  }
}

Object remove_Object(Object self, Object o) {
  Object index = get_Index_Object@HashSet(self, o);
  if (index._int >= (new Object(__cid=-2, _int=0))._int) {
    for (Object j = index; j._int < self.size_HashSet._int - (new Object(__cid=-2, _int=1))._int; j = new Object(__cid=-2, _int=j._int + 1)) {
      self.set_HashSet._array_object.A[j._int] = self.set_HashSet._array_object.A[j._int + (new Object(__cid=-2, _int=1))._int];
    }
    self.set_HashSet._array_object.A[self.size_HashSet._int - (new Object(__cid=-2, _int=1))._int] = null;
    self.size_HashSet = new Object(__cid=-2, _int=self.size_HashSet._int - 1);
    return (new Object(__cid=-4, _bit=true));
  }
  else {
    return (new Object(__cid=-4, _bit=false));
  }
}

void clear(Object self) {
  self.set_HashSet = Wrap_Array_Object(new Array_Object(length=INITIAL_CAPACITY));
  self.size_HashSet = (new Object(__cid=-2, _int=0));
  self.capacity_HashSet = INITIAL_CAPACITY;
}

Object size(Object self) {
  return self.size_HashSet;
}

Object isEmpty(Object self) {
  return (new Object(__cid=-4, _bit=self.size_HashSet._int == (new Object(__cid=-2, _int=0))._int));
}

