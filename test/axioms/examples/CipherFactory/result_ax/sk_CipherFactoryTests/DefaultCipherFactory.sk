package DefaultCipherFactory;

Object DefaultCipherFactory_DefaultCipherFactory(Object self) {
  self.ALGORITHM_DefaultCipherFactory = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=3+1), A="AES")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=3));
  self.PADDING_DefaultCipherFactory = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=20+1), A="AES/ECB/PKCS5Padding")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=20));
  self.algorithm_DefaultCipherFactory = self.ALGORITHM_DefaultCipherFactory;
  self.padding_DefaultCipherFactory = self.PADDING_DefaultCipherFactory;
  return self;
}

Object encryptionCipher(Object self) {
  return initCipher_int@DefaultCipherFactory(self, (new Object(__cid=-2, _int=1)));
}

Object decryptionCipher(Object self) {
  return initCipher_int@DefaultCipherFactory(self, (new Object(__cid=-2, _int=2)));
}

Object initCipher_int(Object self, Object mode) {
  Object cipher;
  cipher = obtainCipher_int@DefaultCipherFactory(self, mode);
  return cipher;
}

Object obtainCipher_int(Object self, Object mode) {
  Object secretKeySpec = SecretKeySpec_Object_byte_String(key@DefaultCipherFactory(self), getAlgorithm@DefaultCipherFactory(self));
  Object cipher = getInstance_String@Cipher(getPadding@DefaultCipherFactory(self));
  if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_Object_int_SecretKeySpec@Cipher(cipher, mode, secretKeySpec); }
  else { 0; }; cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? initb_Object_int_SecretKeySpec@Cipher(cipher, mode, secretKeySpec) : null);
  return cipher;
}

Object key(Object self) {
  Object k = getKey@DefaultCipherFactory(self);
  return (k.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(k) : null);
}

Object getAlgorithm(Object self) {
  return self.algorithm_DefaultCipherFactory;
}

Object getPadding(Object self) {
  return self.padding_DefaultCipherFactory;
}

Object getKey(Object self) {
  return self.key_DefaultCipherFactory;
}

void setKey_String(Object self, Object key) {
  self.key_DefaultCipherFactory = key;
}

Object isKeyBase64(Object self) {
  return self.keyBase64_DefaultCipherFactory;
}

void setKeyBase64_boolean(Object self, Object keyBase64) {
  self.keyBase64_DefaultCipherFactory = keyBase64;
}

