package DefaultCipherFactoryTest;

Object DefaultCipherFactoryTest_DefaultCipherFactoryTest(Object self) {
  self.defaultCipherFactory_DefaultCipherFactoryTest = DefaultCipherFactory_DefaultCipherFactory(new Object(__cid=DefaultCipherFactory()));
  self.keyString_DefaultCipherFactoryTest = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=16+1), A="StrongKey0123456")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=16));
  return self;
}

void setUp(Object self) {
  if (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int) { setKey_String@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest, self.keyString_DefaultCipherFactoryTest); }
  else { 0; };
}

void testEncryptionCipher(Object self) {
  assertEquals_Object_Object@Assert(self.cipher_DefaultCipherFactoryTest, (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? encryptionCipher@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest) : null));
}

void testDecryptionCipher(Object self) {
  assertEquals_Object_Object@Assert(self.cipher_DefaultCipherFactoryTest, (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? decryptionCipher@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest) : null));
}

void testInitCipher(Object self) {
  assertEquals_Object_Object@Assert(self.cipher_DefaultCipherFactoryTest, (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? initCipher_int@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest, (new Object(__cid=-2, _int=1))) : null));
}

void testObtainCipher(Object self) {
  assert (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? obtainCipher_int@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest, (new Object(__cid=-2, _int=1))) : null) != null;
}

void testKey(Object self) {
  assertArrayEquals_byte_byte@Assert((self.keyString_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(self.keyString_DefaultCipherFactoryTest) : null), (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? key@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest) : null));
}

void testKeyBase64(Object self) {
  if (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int) { setKey_String@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest, String_String_byte(new Object(__cid=String()), (self.keyString_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(self.keyString_DefaultCipherFactoryTest) : null))); }
  else { 0; };
  if (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int) { setKeyBase64_boolean@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest, (new Object(__cid=-4, _bit=true))); }
  else { 0; };
  assertArrayEquals_byte_byte@Assert((self.keyString_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(self.keyString_DefaultCipherFactoryTest) : null), (self.defaultCipherFactory_DefaultCipherFactoryTest.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? key@DefaultCipherFactory(self.defaultCipherFactory_DefaultCipherFactoryTest) : null));
}

