package HashMap;

adt HashMap {
    Hashmap      { }
    Put          { HashMap self; Object k; Object v; }
    Putb         { HashMap self; Object k; Object v; }
    Removeb      { HashMap self; Object k; }
    Remove       { HashMap self; Object k; }
    Get          { HashMap self; Object k; }
    Containskey  { HashMap self; Object k; }
}

Object HashMap_HashMap() {
    return new Object(__cid=HashMap(), _hashmap=new Hashmap());
}

Object put_Object_Object_Object(Object self, Object k, Object v) {
    return new Object(__cid=HashMap(), _hashmap=new Put(self=self._hashmap, k=k, v=v));
}

Object putb_Object_Object_Object(Object self, Object k, Object v) {
    return new Object(__cid=HashMap(), _hashmap=new Putb(self=self._hashmap, k=k, v=v));
}

Object removeb_Object_Object(Object self, Object k) {
    return new Object(__cid=HashMap(), _hashmap=new Removeb(self=self._hashmap, k=k));
}

Object remove_Object_Object(Object self, Object k) {
    return new Object(__cid=HashMap(), _hashmap=new Remove(self=self._hashmap, k=k));
}

Object get_Object_Object(Object self, Object k) {
    return new Object(__cid=HashMap(), _hashmap=new Get(self=self._hashmap, k=k));
}

Object containsKey_Object_Object(Object self, Object k) {
    return new Object(__cid=HashMap(), _hashmap=new Containskey(self=self._hashmap, k=k));
}

Object xform_HashMap(HashMap self) {
  switch(self) {
  case Hashmap: {
    return xform_hashmap_HashMap(self);
  }
  case Put: {
    return xform_put_HashMap_Object_Object(self.self, self.k, self.v);
  }
  case Putb: {
    return xform_putb_HashMap_Object_Object(self.self, self.k, self.v);
  }
  case Removeb: {
    return xform_removeb_HashMap_Object(self.self, self.k);
  }
  case Remove: {
    return xform_remove_HashMap_Object(self.self, self.k);
  }
  case Get: {
    return xform_get_HashMap_Object(self.self, self.k);
  }
  case Containskey: {
    return xform_containsKey_HashMap_Object(self.self, self.k);
  }
  }

  return null;
}
Object xform_removeb_HashMap_Object(HashMap self, Object k) {
  switch(self) {
  case Hashmap: { assert false; }
  case Put: { assert false; }
  case Putb: { assert false; }
  case Removeb: { assert false; }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_putb_HashMap_Object_Object(HashMap self, Object k, Object v) {
  switch(self) {
  case Hashmap: { assert false; }
  case Put: { assert false; }
  case Putb: { assert false; }
  case Removeb: { assert false; }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_put_HashMap_Object_Object(HashMap self, Object k, Object v) {
  switch(self) {
  case Hashmap: { assert false; }
  case Put: { assert false; }
  case Putb: { assert false; }
  case Removeb: { assert false; }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_get_HashMap_Object(HashMap self, Object k) {
  switch(self) {
  case Hashmap: {
    return null;
  }
  case Put: { assert false; }
  case Putb: {
    return ((k.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Byte()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CryptoManager()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactoryTest()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(k, self.k) : k.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(k, self.k) : k.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CipherFactoryTests()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(k, self.k) : null)._bit ? self.v : xform_get_HashMap_Object(self.self, k));
  }
  case Removeb: {
    return ((k.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Byte()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CryptoManager()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactoryTest()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(k, self.k) : k.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(k, self.k) : k.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CipherFactoryTests()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(k, self.k) : null)._bit ? null : xform_get_HashMap_Object(self.self, k));
  }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_remove_HashMap_Object(HashMap self, Object k) {
  switch(self) {
  case Hashmap: { assert false; }
  case Put: { assert false; }
  case Putb: { assert false; }
  case Removeb: { assert false; }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_containsKey_HashMap_Object(HashMap self, Object k) {
  switch(self) {
  case Hashmap: {
    return (new Object(__cid=-4, _bit=false));
  }
  case Put: { assert false; }
  case Putb: {
    return ((self.k.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Byte()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=CryptoManager()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactoryTest()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=CipherFactoryTests()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? equals_Object@Object(self.k, k) : self.k.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(self.k, k) : null)._bit ? (new Object(__cid=-4, _bit=true)) : xform_containsKey_HashMap_Object(self.self, k));
  }
  case Removeb: {
    return ((k.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Byte()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CryptoManager()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactoryTest()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(k, self.k) : k.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(k, self.k) : k.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=CipherFactoryTests()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=DefaultCipherFactory()))._int ? equals_Object@Object(k, self.k) : k.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(k, self.k) : null)._bit ? (new Object(__cid=-4, _bit=false)) : xform_containsKey_HashMap_Object(self.self, k));
  }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
Object xform_hashmap_HashMap(HashMap self) {
  switch(self) {
  case Hashmap: { assert false; }
  case Put: { assert false; }
  case Putb: { assert false; }
  case Removeb: { assert false; }
  case Remove: { assert false; }
  case Get: { assert false; }
  case Containskey: { assert false; }
  }

  return null;
}
