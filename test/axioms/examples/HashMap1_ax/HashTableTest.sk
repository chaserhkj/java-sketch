package HashTableTest;

Object HashTableTest_HashTableTest(Object self) {
    return self;
}

harness void mn_int_int_int() {
  Object self = Object_Object(new Object(__cid=Object()));
  setUp@HashTableTest(self);
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), 15);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), 1);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), 2);
  
  /* testPutAndGet_Integer_Integer@HashTableTest(self, xx, yy); */
  /* testReplacing_Integer_Integer_Integer(self, xx, yy, zz); */
  testKeys_Integer_Integer(self, xx, yy);
  /* testClear_Integer_Integer(self, xx, yy); */
}

void setUp(Object self) {
  self.classUnderTest_HashTableTest = HashTable_HashTable(new Object(__cid=HashTable()));
}

void testPutAndGet_Integer_Integer(Object self, Object x, Object y) {
  put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y);
  assertEquals_Object_Object@Assert(get_K@HashTable(self.classUnderTest_HashTableTest, x), y);
}

void testReplacing_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  clear@HashTable(self.classUnderTest_HashTableTest);
  put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y);
  assertEquals_Object_Object@Assert(get_K@HashTable(self.classUnderTest_HashTableTest, x), y);

  int size = size@HashTable(self.classUnderTest_HashTableTest);
  put_K_V@HashTable(self.classUnderTest_HashTableTest, x, z);
  assertEquals_Object_Object@Assert(get_K@HashTable(self.classUnderTest_HashTableTest, x), z);
  assertEquals_int_int@Assert(size@HashTable(self.classUnderTest_HashTableTest), size);
}

/* void testGetEmpty(Object self) { */
/*   Object o = (self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, null) : null); */
/* } */

void testKeys_Integer_Integer(Object self, Object x, Object y) {
  clear@HashTable(self.classUnderTest_HashTableTest); 
  put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y);
  Object k = keys@HashTable(self.classUnderTest_HashTableTest).A[0];
  assertTrue_boolean@Assert(equals_Object@Object(k, x));
  /* Array_Object keys = keys@HashTable(self.classUnderTest16_HashTableTest); */
  /* assertTrue_boolean@Assert(keys.length == 1); */
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  clear@HashTable(self.classUnderTest_HashTableTest);
  put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y);
  put_K_V@HashTable(self.classUnderTest_HashTableTest, y, x);
  assertTrue_boolean(size@HashTable(self.classUnderTest_HashTableTest) > 0);

  clear@HashTable(self.classUnderTest_HashTableTest);
  assertNull_Object@Assert(get_K@HashTable(self.classUnderTest_HashTableTest, x));
  assertEquals_int_int(size@HashTable(self.classUnderTest_HashTableTest), 0);
}
