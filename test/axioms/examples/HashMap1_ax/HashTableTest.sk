package HashTableTest;

int INITIAL_SIZE = 16;

Object HashTableTest_HashTableTest(Object self) {
    return self;
}

harness void mn_int_int_int(int x, int y, int z) {
  assume x != y;
  assume y != z;
  Object self = Object_Object(new Object(__cid=Object()));
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), x);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), y);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), z);
  setUp@HashTableTest(self);
  /* testPutAndGet_Integer_Integer_Integer@HashTableTest(self, xx, yy, zz); */
  /* testReplacing_Integer_Integer_Integer(self, xx, yy, zz); */
  /* testKeys_Integer_Integer@HashTableTest(self, xx, yy); */
  /* testValues_Integer_Integer@HashTableTest(self, xx, yy); */
  /* testContainsValue_Integer_Integer_Integer(self, xx, yy, zz); */
  /* testContainsKey_Integer_Integer_Integer(self, xx, yy, zz); */
  /* testRemove_Integer_Integer_Integer@HashTableTest(self, xx, yy, zz); */
  /* testRemoveNonExistent_Integer_Integer(self, xx, yy); */
  /* testClear_Integer_Integer@HashTableTest(self, xx, yy); */
  /* assume x >= INITIAL_SIZE && x < 0; */
  /* testSize_int_int(self, x, y); */
}

void setUp(Object self) {
  self.classUnderTest_HashTableTest = HashTable_HashTable_int(new Object(__cid=HashTable()), INITIAL_SIZE);
}

/* void testGetEmpty(Object self) { */
/*   Object o = (self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, null) : null); */
/*   assertNull_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, null) : null)); */
/* } */

void testPutAndGet_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, y, z); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null), y);
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, y) : null), z);
}

void testReplacing_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null), y);
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, z); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null), z);
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size);
}

void testKeys_Integer_Integer(Object self, Object x, Object y) { // TODO: WHY IS THIS SO MUCH SLOWER THAN testValues()!?!
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  Object k = (self.classUnderTest_HashTableTest.__cid == HashTable() ? keys@HashTable(self.classUnderTest_HashTableTest) : null).A[0];
  assertTrue_boolean@Assert((k.__cid == HashTableTest() ? equals_Object@Object(k, x) :
			     k.__cid == Number() ? equals_Object@Object(k, x) :
			     k.__cid == String() ? equals_Object@String(k, x) :
			     k.__cid == HashTable() ? equals_Object@Object(k, x) :
			     k.__cid == HashTableNode() ? equals_Object@Object(k, x) :
			     k.__cid == Integer() ? equals_Object@Integer(k, x) :
			     k.__cid == Assert() ? equals_Object@Object(k, x) :
			     k.__cid == ArrayList() ? equals_Object@Object(k, x) :
			     k.__cid == Object() ? equals_Object@Object(k, x) : 0));
  Array_Object keys = (self.classUnderTest_HashTableTest.__cid == HashTable() ? keys@HashTable(self.classUnderTest_HashTableTest) : null);
  assertTrue_boolean@Assert(keys.length == 1);
}

void testValues_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  Object k = (self.classUnderTest_HashTableTest.__cid == HashTable() ? values@HashTable(self.classUnderTest_HashTableTest) : null).A[0];
  assertTrue_boolean@Assert((k.__cid == HashTableTest() ? equals_Object@Object(k, y) :
			     k.__cid == Number() ? equals_Object@Object(k, y) :
			     k.__cid == String() ? equals_Object@String(k, y) :
			     k.__cid == HashTable() ? equals_Object@Object(k, y) :
			     k.__cid == HashTableNode() ? equals_Object@Object(k, y) :
			     k.__cid == Integer() ? equals_Object@Integer(k, y) :
			     k.__cid == Assert() ? equals_Object@Object(k, y) :
			     k.__cid == ArrayList() ? equals_Object@Object(k, y) :
			     k.__cid == Object() ? equals_Object@Object(k, y) : 0));
  Array_Object values = (self.classUnderTest_HashTableTest.__cid == HashTable() ? values@HashTable(self.classUnderTest_HashTableTest) : null);
  assertTrue_boolean@Assert(values.length == 1);
}

void testContainsValue_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsValue_V@HashTable(self.classUnderTest_HashTableTest, y) : 0));
  /* if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); } */
  /* else { 0; }; */
  /* assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsValue_V@HashTable(self.classUnderTest_HashTableTest, y) : 0)); */
}

void testRemove_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null), y);
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size + 1);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { remove_K@HashTable(self.classUnderTest_HashTableTest, x); }
  else { 0; };
  assertNull_Object@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? get_K@HashTable(self.classUnderTest_HashTableTest, x) : null));
}

void testContainsKey_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  assertFalse_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsKey_K@HashTable(self.classUnderTest_HashTableTest, x) : 0));
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? containsKey_K@HashTable(self.classUnderTest_HashTableTest, x) : 0));
}

void testSize_int_int(Object self, int x, int y) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) {
    clear@HashTable(self.classUnderTest_HashTableTest);
  }
  else { 0; };
  for (int i = 0; i < INITIAL_SIZE; i++) {
    if (self.classUnderTest_HashTableTest.__cid == HashTable()) {
      put_K_V@HashTable(self.classUnderTest_HashTableTest, Integer_Integer_int(new Object(__cid=Integer()), i), null);
    }
    else { 0; };
  }
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), INITIAL_SIZE);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) {
    put_K_V@HashTable(self.classUnderTest_HashTableTest, Integer_Integer_int(new Object(__cid=Integer()), x), Integer_Integer_int(new Object(__cid=Integer()), y));
  }
  else { 0; };
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), INITIAL_SIZE + 1);
}

void testRemoveNonExistent_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  int size = (self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { remove_K@HashTable(self.classUnderTest_HashTableTest, y); }
  else { 0; };
  assertEquals_int_int@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0), size);
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, x, y); }
  else { 0; };
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { put_K_V@HashTable(self.classUnderTest_HashTableTest, y, x); }
  else { 0; };
  assertTrue_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0) > 0);
  if (self.classUnderTest_HashTableTest.__cid == HashTable()) { clear@HashTable(self.classUnderTest_HashTableTest); }
  else { 0; };
  ;
  assertFalse_boolean@Assert((self.classUnderTest_HashTableTest.__cid == HashTable() ? size@HashTable(self.classUnderTest_HashTableTest) : 0) > 0);
}
