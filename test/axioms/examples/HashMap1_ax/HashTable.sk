package HashTable;

Object HashTable_HashTable(Object self) {
  HashTable_HashTable_int(self, 16);
  return self;
}

void resetHashTable(Object self) {
  self.size_HashTable = 0;
  self.currentCapacity_HashTable = self.initialCapacity_HashTable;
  self.buckets_HashTable = new List();
  /* for (int i = 0; i < {| self.size_HashTable |  self.currentCapacity_HashTable |  self.capacityGrowth_HashTable |  self.initialCapacity_HashTable |}; i++) { */
  for (int i = 0; i < self.initialCapacity_HashTable; i++) {
    self.buckets_HashTable = set(self.buckets_HashTable, i, null).alist;
  }
}

Object HashTable_HashTable_int(Object self, int initialCapacity) {
  self.initialCapacity_HashTable = initialCapacity;
  self.size_HashTable = 0;
  self.buckets_HashTable = new List();
  for (int i = 0; i < initialCapacity; i++)
    self.buckets_HashTable = set(self.buckets_HashTable, i, null).alist;
  return self;
}

Object get_K(Object self, Object key) {
  // don't want to return the actual value, or do we?
  Object result = getNodeWithKey_K@HashTable(self, key);
  return (result != null ? getValue@HashTableNode(result) : null);
}

Object getNodeWithKey_K(Object self, Object key) {
  if (size@HashTable(self) == 0 || key == null) {
    return null;
  }
  int bucketIndex = getBucketIndex_K@HashTable(self, key);
  AList current = get@ArrayList(self.buckets_HashTable, bucketIndex).alist;
  while (get_obj@ArrayList(current) != null) {
    if (equals_Object@Object(getKey@HashTableNode(get_obj@ArrayList(current)), key)) {
      return get_obj@ArrayList(current);
    }
    current = getNext@HashTableNode(get_obj@ArrayList(current)).alist;
  }
  return get_obj@ArrayList(current);
}

void put_K_V(Object self, Object key, Object value) {
  int bucketIndex = getBucketIndex_K@HashTable(self, key);
  Object newNode = HashTableNode_HashTableNode_K_V(new Object(__cid=HashTableNode()), key, value);
  AList current = get@ArrayList(self.buckets_HashTable, bucketIndex).alist;
  if (get_obj@ArrayList(current) == null) {
    self.buckets_HashTable = set@ArrayList(self.buckets_HashTable, bucketIndex, newNode).alist;
    self.size_HashTable++;
    return;
  }
  
  while (get_obj@ArrayList(current) != null) {
    if (equals_Object@Object(getKey@HashTableNode(get_obj@ArrayList(current)), key)) {
      setValue_V@HashTableNode(get_obj@ArrayList(current), value);
      return;
    }
    else if (getNext@HashTableNode(get_obj@ArrayList(current)) == null) {
      setNext_HashTableNode@HashTableNode(get_obj@ArrayList(current), newNode); 
      self.size_HashTable++;
      return;
    }
    current = getNext@HashTableNode(get_obj@ArrayList(current)).alist;
  }
}

/* Object getNodeWithValue_V(Object self, Object value) { */
/*   if (size@HashTable(self) == 0) { */
/*     return null; */
/*   } */
/*   for (int i = 0; i < (self.buckets_HashTable.__cid == ArrayList() ? size@ArrayList(self.buckets_HashTable) : 0); i++) { */
/*     Object current = (self.buckets_HashTable.__cid == ArrayList() ? get_int@ArrayList(self.buckets_HashTable, i) : null); */
/*     while (current != null) { */
/*       if (((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == HashTable() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == Integer() ? equals_Object@Integer((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == Number() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == ArrayList() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == String() ? equals_Object@String((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == HashTableNode() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == HashTableTest() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == Assert() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : (current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null).__cid == Object() ? equals_Object@Object((current.__cid == HashTableNode() ? getValue@HashTableNode(current) : null), value) : 0)) { */
/*         return current; */
/*       } */
/*       current = (current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null); */
/*     } */
/*   } */
/*   return null; */
/* } */

int getBucketIndex_K(Object self, Object key) {
  assert key.__cid == Integer();
  int h = (key.__cid == HashTable() ? hashCode@Object(key) :
	   key.__cid == Integer() ? hashCode@Integer(key) :
	   key.__cid == Number() ? hashCode@Object(key) :
	   key.__cid == ArrayList() ? hashCode@Object(key) :
	   key.__cid == String() ? hashCode@String(key) :
	   key.__cid == HashTableNode() ? hashCode@Object(key) :
	   key.__cid == HashTableTest() ? hashCode@Object(key) :
	   key.__cid == Assert() ? hashCode@Object(key) :
	   key.__cid == Object() ? hashCode@Object(key) : 0);
  int c = self.currentCapacity_HashTable - 1;
  int result = 0,  s = 1;
  for (int i = 0; i < 32; i++) {
    if (i > 1) {
      for (int j = 0; j < i - 1; j++) s = s * 2;
    }
    result = result + (((h / s) % 2) * ((c / s) % 2) * s);
    s = 2;
  }
  return result;
}

int size(Object self) {
  return self.size_HashTable;
}


/* void remove_K(Object self, Object key) { */
/*   if (size@HashTable(self) == 0 || key == null) { */
/*     return; */
/*   } */
/*   int bucketIndex = getBucketIndex_K@HashTable(self, key); */
/*   Object current = (self.buckets_HashTable.__cid == ArrayList() ? get_int@ArrayList(self.buckets_HashTable, bucketIndex) : null); */
/*   Object previous = null; */
/*   while (current != null) { */
/*     if (((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == HashTable() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == Integer() ? equals_Object@Integer((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == Number() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == ArrayList() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == String() ? equals_Object@String((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == HashTableNode() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == HashTableTest() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == Assert() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : (current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null).__cid == Object() ? equals_Object@Object((current.__cid == HashTableNode() ? getKey@HashTableNode(current) : null), key) : 0)) { */
/*       if (previous == null) { */
/*         if ((current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null) != null) { */
/*           (self.buckets_HashTable.__cid == ArrayList() ? set_int_E@ArrayList(self.buckets_HashTable, bucketIndex, (current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null)) : null); */
/*         } */
/*         else { */
/*           (self.buckets_HashTable.__cid == ArrayList() ? set_int_E@ArrayList(self.buckets_HashTable, bucketIndex, null) : null); */
/*         } */
/*       } */
/*       else { */
/*         if ((current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null) == null) { */
/*           if (previous.__cid == HashTableNode()) { setNext_HashTableNode@HashTableNode(previous, null); } */
/*           else { 0; }; */
/*         } */
/*         else { */
/*           if (previous.__cid == HashTableNode()) { setNext_HashTableNode@HashTableNode(previous, (current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null)); } */
/*           else { 0; }; */
/*         } */
/*       } */
/*       self.size_HashTable--; */
/*       return; */
/*     } */
/*     previous = current; */
/*     current = (current.__cid == HashTableNode() ? getNext@HashTableNode(current) : null); */
/*   } */
/* } */

Array_Object keys(Object self) {
  Array_Object keys = new Array_Object(length=size@HashTable(self));
  if (size@HashTable(self) > 0) {
    int index = 0;
    /* for (int i = 0; i < size@ArrayList(self.buckets_HashTable); i++) { */ //TODO: Fix this 
    for (int i = 0; i < 16; i++) {
      AList current = get@ArrayList(self.buckets_HashTable, i).alist;
      while (get_obj@ArrayList(current) != null) {
        keys.A[index] = getKey@HashTableNode(get_obj@ArrayList(current));
        index++;
        current = getNext@HashTableNode(get_obj@ArrayList(current)).alist;
      }
    }
  }
  return keys;
}

void clear(Object self) {
  resetHashTable@HashTable(self);
}
