package OpenSSLCipher;

Object OpenSSLCipher_OpenSSLCipher(Object self) {
    return self;
}

Object OpenSSLCipher_OpenSSLCipher_String_String(Object self, Object algorithm, Object transformation) {
  self.algorithm_OpenSSLCipher = algorithm;
  self.transformation_OpenSSLCipher = transformation;
  return self;
}

Object getCipher_boolean_Key_byte(Object self, bit isEncryption, Object key, Array_char IV) {
  Object properties = Properties_Properties(new Object(__cid=Properties()));
  if (properties.__cid == Properties()) { setProperty_String_String@Properties(properties, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=11+1, A="CLASSES_KEY"), 0, 11), getClassName@CryptoCipherFactory_CipherProvider()); }
  else { 0; };
  Object cipher;
  cipher = getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties);
  Object keyValue = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), (key.__cid == SecretKeySpec() ? getEncoded@SecretKeySpec(key) : key.__cid == KerberosKey() ? getEncoded@KerberosKey(key) : null), self.algorithm_OpenSSLCipher);
  Object IVspec = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), IV);
  if (isEncryption) {
    if (cipher.__cid == Cipher()) { init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher, 1, keyValue, IVspec); }
    else { 0; };
  }
  else {
    if (cipher.__cid == Cipher()) { init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher, 2, keyValue, IVspec); }
    else { 0; };
  }
  return cipher;
}

Array_char encrypt_byte_Key_byte(Object self, Array_char data, Object key, Array_char IV) {
  return translate_boolean_byte_Key_byte@OpenSSLCipher(self, true, data, key, IV);
}

Array_char decrypt_byte_Key_byte(Object self, Array_char data, Object key, Array_char IV) {
  return translate_boolean_byte_Key_byte@OpenSSLCipher(self, false, data, key, IV);
}

Array_char translate_boolean_byte_Key_byte(Object self, bit isEncryption, Array_char data, Object key, Array_char IV) {
  Array_char output = new Array_char(length=2 * data.length);
  Object cipher = getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV);
  int updateBytes = (cipher.__cid == Cipher() ? update_byte_int_int_byte_int@Cipher(cipher, data, 0, data.length, output, 0) : 0);
  int finalBytes = (cipher.__cid == Cipher() ? doFinal_byte_int_int_byte_int@Cipher(cipher, data, 0, 0, output, updateBytes) : 0);
  output = (cipher.__cid == Cipher() ? doFinal_byte@Cipher(cipher, data) : null);
  return copyOf_byte_int@Arrays(output, updateBytes + finalBytes);
}

