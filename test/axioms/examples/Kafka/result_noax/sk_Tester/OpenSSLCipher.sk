package OpenSSLCipher;

Object OpenSSLCipher_OpenSSLCipher(Object self) {
    return self;
}

Object OpenSSLCipher_OpenSSLCipher_String_String(Object self, Object algorithm, Object transformation) {
  self.algorithm_OpenSSLCipher = algorithm;
  self.transformation_OpenSSLCipher = transformation;
  return self;
}

Object getCipher_boolean_Key_byte(Object self, Object isEncryption, Object key, Object IV) {
  Object properties = Properties_Properties(new Object(__cid=Properties()));
  if (properties.__cid == (new Object(__cid=-2, _int=Properties()))._int) { setProperty_String_String@Properties(properties, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=11+1), A="CLASSES_KEY")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=11)), getClassName@CryptoCipherFactory_CipherProvider()); }
  else { 0; };
  Object cipher;
  cipher = getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties);
  Object keyValue = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), (key.__cid == (new Object(__cid=-2, _int=KerberosKey()))._int ? getEncoded@KerberosKey(key) : key.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? getEncoded@SecretKeySpec(key) : null), self.algorithm_OpenSSLCipher);
  Object IVspec = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), IV);
  if (isEncryption._bit) {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=1)), keyValue, IVspec); }
    else { 0; };
  }
  else {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=2)), keyValue, IVspec); }
    else { 0; };
  }
  return cipher;
}

Object encrypt_byte_Key_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_Key_byte@OpenSSLCipher(self, (new Object(__cid=-4, _bit=true)), data, key, IV);
}

Object decrypt_byte_Key_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_Key_byte@OpenSSLCipher(self, (new Object(__cid=-4, _bit=false)), data, key, IV);
}

Object translate_boolean_byte_Key_byte(Object self, Object isEncryption, Object data, Object key, Object IV) {
  Object output = Wrap_Array_char(new Array_char(length=(new Object(__cid=-2, _int=(new Object(__cid=-2, _int=2))._int * data._array_object.length._int))));
  Object cipher = getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV);
  Object updateBytes = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? update_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), data._array_object.length, output, (new Object(__cid=-2, _int=0))) : null);
  Object finalBytes = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), (new Object(__cid=-2, _int=0)), output, updateBytes) : null);
  output = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_byte@Cipher(cipher, data) : null);
  return copyOf_byte_int@Arrays(output, (new Object(__cid=-2, _int=updateBytes._int + finalBytes._int)));
}

