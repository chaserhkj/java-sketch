SKETCH version 1.7.4
Benchmark = /Users/grumpy/Research/java-sketch/test/axioms/examples/Kafka/Kafka/../result_noax/sk_Tester/main.sk
/* BEGIN PACKAGE FileWriterr*/
package FileWriterr{
  /* END PACKAGE FileWriterr*/
}
/* BEGIN PACKAGE Comparable*/
package Comparable{
  /* END PACKAGE Comparable*/
}
/* BEGIN PACKAGE PrivateKey*/
package PrivateKey{
  /* END PACKAGE PrivateKey*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  /*HashMap.sk:7*/
  
void HashMap_HashMap (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4667)/*HashMap.sk:7*/
  {
    _out = null;
    self.elementData_HashMap = new Array_Object@array(length=DEFAULT_INITIAL_CAPACITY__HashMap_s4667);
    self.numPairs_HashMap = 0;
    self.capacity_HashMap = DEFAULT_INITIAL_CAPACITY__HashMap_s4667;
    _out = self;
    return;
  }
  /*HashMap.sk:3*/
  
void glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s4756 (ref int DEFAULT_INITIAL_CAPACITY__HashMap_s4755)/*HashMap.sk:3*/
  {
    DEFAULT_INITIAL_CAPACITY__HashMap_s4755 = 16;
  }
  /*HashMap.sk:115*/
  
void putVal_int_K_V (Object self, int hash, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s4730)/*HashMap.sk:115*/
  {
    _out = null;
    int hashMod = hash % (self.capacity_HashMap);
    if(hashMod < 0)/*HashMap.sk:117*/
    {
      hashMod = hashMod + (self.capacity_HashMap);
    }
    Object@Object node = self.elementData_HashMap.A[hashMod];
    if(node != (null))/*HashMap.sk:121*/
    {
      bit _pac_sc_s310 = (node.hash_HashMap_Node) != hash;
      if(!(_pac_sc_s310))/*HashMap.sk:122*/
      {
        int _pac_sc_s310_s312 = 0;
        KerberosKey@meta(_pac_sc_s310_s312);
        bit _pac_sc_s313 = 0;
        if((key.__cid) == _pac_sc_s310_s312)/*HashMap.sk:122*/
        {
          bit _pac_sc_s310_s315 = 0;
          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s315);
          _pac_sc_s313 = _pac_sc_s310_s315;
        }
        else
        {
          int _pac_sc_s310_s317 = 0;
          HashMap_Node@meta(_pac_sc_s310_s317);
          bit _pac_sc_s318 = 0;
          if((key.__cid) == _pac_sc_s310_s317)/*HashMap.sk:122*/
          {
            bit _pac_sc_s310_s320 = 0;
            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s320);
            _pac_sc_s318 = _pac_sc_s310_s320;
          }
          else
          {
            int _pac_sc_s310_s322 = 0;
            Properties@meta(_pac_sc_s310_s322);
            bit _pac_sc_s323 = 0;
            if((key.__cid) == _pac_sc_s310_s322)/*HashMap.sk:122*/
            {
              bit _pac_sc_s310_s325 = 0;
              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s325);
              _pac_sc_s323 = _pac_sc_s310_s325;
            }
            else
            {
              int _pac_sc_s310_s327 = 0;
              File@meta(_pac_sc_s310_s327);
              bit _pac_sc_s328 = 0;
              if((key.__cid) == _pac_sc_s310_s327)/*HashMap.sk:122*/
              {
                bit _pac_sc_s310_s330 = 0;
                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s330);
                _pac_sc_s328 = _pac_sc_s310_s330;
              }
              else
              {
                int _pac_sc_s310_s332 = 0;
                CryptoCipherFactory_CipherProvider@meta(_pac_sc_s310_s332);
                bit _pac_sc_s333 = 0;
                if((key.__cid) == _pac_sc_s310_s332)/*HashMap.sk:122*/
                {
                  bit _pac_sc_s310_s335 = 0;
                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s335);
                  _pac_sc_s333 = _pac_sc_s310_s335;
                }
                else
                {
                  int _pac_sc_s310_s337 = 0;
                  StringBuffer@meta(_pac_sc_s310_s337);
                  bit _pac_sc_s338 = 0;
                  if((key.__cid) == _pac_sc_s310_s337)/*HashMap.sk:122*/
                  {
                    bit _pac_sc_s310_s340 = 0;
                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s340);
                    _pac_sc_s338 = _pac_sc_s310_s340;
                  }
                  else
                  {
                    int _pac_sc_s310_s342 = 0;
                    OpenSSLCipher@meta(_pac_sc_s310_s342);
                    bit _pac_sc_s343 = 0;
                    if((key.__cid) == _pac_sc_s310_s342)/*HashMap.sk:122*/
                    {
                      bit _pac_sc_s310_s345 = 0;
                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s345);
                      _pac_sc_s343 = _pac_sc_s310_s345;
                    }
                    else
                    {
                      int _pac_sc_s310_s347 = 0;
                      AbstractQueue@meta(_pac_sc_s310_s347);
                      bit _pac_sc_s348 = 0;
                      if((key.__cid) == _pac_sc_s310_s347)/*HashMap.sk:122*/
                      {
                        bit _pac_sc_s310_s350 = 0;
                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s350);
                        _pac_sc_s348 = _pac_sc_s310_s350;
                      }
                      else
                      {
                        int _pac_sc_s310_s352 = 0;
                        JCECipher@meta(_pac_sc_s310_s352);
                        bit _pac_sc_s353 = 0;
                        if((key.__cid) == _pac_sc_s310_s352)/*HashMap.sk:122*/
                        {
                          bit _pac_sc_s310_s355 = 0;
                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s355);
                          _pac_sc_s353 = _pac_sc_s310_s355;
                        }
                        else
                        {
                          int _pac_sc_s310_s357 = 0;
                          Mac@meta(_pac_sc_s310_s357);
                          bit _pac_sc_s358 = 0;
                          if((key.__cid) == _pac_sc_s310_s357)/*HashMap.sk:122*/
                          {
                            bit _pac_sc_s310_s360 = 0;
                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s360);
                            _pac_sc_s358 = _pac_sc_s310_s360;
                          }
                          else
                          {
                            int _pac_sc_s310_s362 = 0;
                            KeyGenerator@meta(_pac_sc_s310_s362);
                            bit _pac_sc_s363 = 0;
                            if((key.__cid) == _pac_sc_s310_s362)/*HashMap.sk:122*/
                            {
                              bit _pac_sc_s310_s365 = 0;
                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s365);
                              _pac_sc_s363 = _pac_sc_s310_s365;
                            }
                            else
                            {
                              int _pac_sc_s310_s367 = 0;
                              ArrayList@meta(_pac_sc_s310_s367);
                              bit _pac_sc_s368 = 0;
                              if((key.__cid) == _pac_sc_s310_s367)/*HashMap.sk:122*/
                              {
                                bit _pac_sc_s310_s370 = 0;
                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s370);
                                _pac_sc_s368 = _pac_sc_s310_s370;
                              }
                              else
                              {
                                int _pac_sc_s310_s372 = 0;
                                KeyStore@meta(_pac_sc_s310_s372);
                                bit _pac_sc_s373 = 0;
                                if((key.__cid) == _pac_sc_s310_s372)/*HashMap.sk:122*/
                                {
                                  bit _pac_sc_s310_s375 = 0;
                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s375);
                                  _pac_sc_s373 = _pac_sc_s310_s375;
                                }
                                else
                                {
                                  int _pac_sc_s310_s377 = 0;
                                  Cipher@meta(_pac_sc_s310_s377);
                                  bit _pac_sc_s378 = 0;
                                  if((key.__cid) == _pac_sc_s310_s377)/*HashMap.sk:122*/
                                  {
                                    bit _pac_sc_s310_s380 = 0;
                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s380);
                                    _pac_sc_s378 = _pac_sc_s310_s380;
                                  }
                                  else
                                  {
                                    int _pac_sc_s310_s382 = 0;
                                    LinkedList@meta(_pac_sc_s310_s382);
                                    bit _pac_sc_s383 = 0;
                                    if((key.__cid) == _pac_sc_s310_s382)/*HashMap.sk:122*/
                                    {
                                      bit _pac_sc_s310_s385 = 0;
                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s385);
                                      _pac_sc_s383 = _pac_sc_s310_s385;
                                    }
                                    else
                                    {
                                      int _pac_sc_s310_s387 = 0;
                                      System@meta(_pac_sc_s310_s387);
                                      bit _pac_sc_s388 = 0;
                                      if((key.__cid) == _pac_sc_s310_s387)/*HashMap.sk:122*/
                                      {
                                        bit _pac_sc_s310_s390 = 0;
                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s390);
                                        _pac_sc_s388 = _pac_sc_s310_s390;
                                      }
                                      else
                                      {
                                        int _pac_sc_s310_s392 = 0;
                                        ArrayDeque_DequeNode@meta(_pac_sc_s310_s392);
                                        bit _pac_sc_s393 = 0;
                                        if((key.__cid) == _pac_sc_s310_s392)/*HashMap.sk:122*/
                                        {
                                          bit _pac_sc_s310_s395 = 0;
                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s395);
                                          _pac_sc_s393 = _pac_sc_s310_s395;
                                        }
                                        else
                                        {
                                          int _pac_sc_s310_s397 = 0;
                                          SecretKeySpec@meta(_pac_sc_s310_s397);
                                          bit _pac_sc_s398 = 0;
                                          if((key.__cid) == _pac_sc_s310_s397)/*HashMap.sk:122*/
                                          {
                                            bit _pac_sc_s310_s400 = 0;
                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s400);
                                            _pac_sc_s398 = _pac_sc_s310_s400;
                                          }
                                          else
                                          {
                                            int _pac_sc_s310_s402 = 0;
                                            CipherFactory@meta(_pac_sc_s310_s402);
                                            bit _pac_sc_s403 = 0;
                                            if((key.__cid) == _pac_sc_s310_s402)/*HashMap.sk:122*/
                                            {
                                              bit _pac_sc_s310_s405 = 0;
                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s405);
                                              _pac_sc_s403 = _pac_sc_s310_s405;
                                            }
                                            else
                                            {
                                              int _pac_sc_s310_s407 = 0;
                                              Integer@meta(_pac_sc_s310_s407);
                                              bit _pac_sc_s408 = 0;
                                              if((key.__cid) == _pac_sc_s310_s407)/*HashMap.sk:122*/
                                              {
                                                bit _pac_sc_s310_s410 = 0;
                                                equals_Object@Integer(key, node.key_HashMap_Node, _pac_sc_s310_s410);
                                                _pac_sc_s408 = _pac_sc_s310_s410;
                                              }
                                              else
                                              {
                                                int _pac_sc_s310_s412 = 0;
                                                Character@meta(_pac_sc_s310_s412);
                                                bit _pac_sc_s413 = 0;
                                                if((key.__cid) == _pac_sc_s310_s412)/*HashMap.sk:122*/
                                                {
                                                  bit _pac_sc_s310_s415 = 0;
                                                  equals_Object@Character(key, node.key_HashMap_Node, _pac_sc_s310_s415);
                                                  _pac_sc_s413 = _pac_sc_s310_s415;
                                                }
                                                else
                                                {
                                                  int _pac_sc_s310_s417 = 0;
                                                  Tester@meta(_pac_sc_s310_s417);
                                                  bit _pac_sc_s418 = 0;
                                                  if((key.__cid) == _pac_sc_s310_s417)/*HashMap.sk:122*/
                                                  {
                                                    bit _pac_sc_s310_s420 = 0;
                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s420);
                                                    _pac_sc_s418 = _pac_sc_s310_s420;
                                                  }
                                                  else
                                                  {
                                                    int _pac_sc_s310_s422 = 0;
                                                    Arrays@meta(_pac_sc_s310_s422);
                                                    bit _pac_sc_s423 = 0;
                                                    if((key.__cid) == _pac_sc_s310_s422)/*HashMap.sk:122*/
                                                    {
                                                      bit _pac_sc_s310_s425 = 0;
                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s425);
                                                      _pac_sc_s423 = _pac_sc_s310_s425;
                                                    }
                                                    else
                                                    {
                                                      int _pac_sc_s310_s427 = 0;
                                                      TreeMap@meta(_pac_sc_s310_s427);
                                                      bit _pac_sc_s428 = 0;
                                                      if((key.__cid) == _pac_sc_s310_s427)/*HashMap.sk:122*/
                                                      {
                                                        bit _pac_sc_s310_s430 = 0;
                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s430);
                                                        _pac_sc_s428 = _pac_sc_s310_s430;
                                                      }
                                                      else
                                                      {
                                                        int _pac_sc_s310_s432 = 0;
                                                        FileWriterr@meta(_pac_sc_s310_s432);
                                                        bit _pac_sc_s433 = 0;
                                                        if((key.__cid) == _pac_sc_s310_s432)/*HashMap.sk:122*/
                                                        {
                                                          bit _pac_sc_s310_s435 = 0;
                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s435);
                                                          _pac_sc_s433 = _pac_sc_s310_s435;
                                                        }
                                                        else
                                                        {
                                                          int _pac_sc_s310_s437 = 0;
                                                          SecureRandom@meta(_pac_sc_s310_s437);
                                                          bit _pac_sc_s438 = 0;
                                                          if((key.__cid) == _pac_sc_s310_s437)/*HashMap.sk:122*/
                                                          {
                                                            bit _pac_sc_s310_s440 = 0;
                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s440);
                                                            _pac_sc_s438 = _pac_sc_s310_s440;
                                                          }
                                                          else
                                                          {
                                                            int _pac_sc_s310_s442 = 0;
                                                            ArrayDeque@meta(_pac_sc_s310_s442);
                                                            bit _pac_sc_s443 = 0;
                                                            if((key.__cid) == _pac_sc_s310_s442)/*HashMap.sk:122*/
                                                            {
                                                              bit _pac_sc_s310_s445 = 0;
                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s445);
                                                              _pac_sc_s443 = _pac_sc_s310_s445;
                                                            }
                                                            else
                                                            {
                                                              int _pac_sc_s310_s447 = 0;
                                                              Stack@meta(_pac_sc_s310_s447);
                                                              bit _pac_sc_s448 = 0;
                                                              if((key.__cid) == _pac_sc_s310_s447)/*HashMap.sk:122*/
                                                              {
                                                                bit _pac_sc_s310_s450 = 0;
                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s450);
                                                                _pac_sc_s448 = _pac_sc_s310_s450;
                                                              }
                                                              else
                                                              {
                                                                int _pac_sc_s310_s452 = 0;
                                                                StringBuilder@meta(_pac_sc_s310_s452);
                                                                bit _pac_sc_s453 = 0;
                                                                if((key.__cid) == _pac_sc_s310_s452)/*HashMap.sk:122*/
                                                                {
                                                                  bit _pac_sc_s310_s455 = 0;
                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s455);
                                                                  _pac_sc_s453 = _pac_sc_s310_s455;
                                                                }
                                                                else
                                                                {
                                                                  int _pac_sc_s310_s457 = 0;
                                                                  TreeSet@meta(_pac_sc_s310_s457);
                                                                  bit _pac_sc_s458 = 0;
                                                                  if((key.__cid) == _pac_sc_s310_s457)/*HashMap.sk:122*/
                                                                  {
                                                                    bit _pac_sc_s310_s460 = 0;
                                                                    equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s460);
                                                                    _pac_sc_s458 = _pac_sc_s310_s460;
                                                                  }
                                                                  else
                                                                  {
                                                                    int _pac_sc_s310_s462 = 0;
                                                                    String@meta(_pac_sc_s310_s462);
                                                                    bit _pac_sc_s463 = 0;
                                                                    if((key.__cid) == _pac_sc_s310_s462)/*HashMap.sk:122*/
                                                                    {
                                                                      bit _pac_sc_s310_s465 = 0;
                                                                      equals_Object@String(key, node.key_HashMap_Node, _pac_sc_s310_s465);
                                                                      _pac_sc_s463 = _pac_sc_s310_s465;
                                                                    }
                                                                    else
                                                                    {
                                                                      int _pac_sc_s310_s467 = 0;
                                                                      IvParameterSpec@meta(_pac_sc_s310_s467);
                                                                      bit _pac_sc_s468 = 0;
                                                                      if((key.__cid) == _pac_sc_s310_s467)/*HashMap.sk:122*/
                                                                      {
                                                                        bit _pac_sc_s310_s470 = 0;
                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s470);
                                                                        _pac_sc_s468 = _pac_sc_s310_s470;
                                                                      }
                                                                      else
                                                                      {
                                                                        int _pac_sc_s310_s472 = 0;
                                                                        Assert@meta(_pac_sc_s310_s472);
                                                                        bit _pac_sc_s473 = 0;
                                                                        if((key.__cid) == _pac_sc_s310_s472)/*HashMap.sk:122*/
                                                                        {
                                                                          bit _pac_sc_s310_s475 = 0;
                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s475);
                                                                          _pac_sc_s473 = _pac_sc_s310_s475;
                                                                        }
                                                                        else
                                                                        {
                                                                          int _pac_sc_s310_s477 = 0;
                                                                          Boolean@meta(_pac_sc_s310_s477);
                                                                          bit _pac_sc_s478 = 0;
                                                                          if((key.__cid) == _pac_sc_s310_s477)/*HashMap.sk:122*/
                                                                          {
                                                                            bit _pac_sc_s310_s480 = 0;
                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s480);
                                                                            _pac_sc_s478 = _pac_sc_s310_s480;
                                                                          }
                                                                          else
                                                                          {
                                                                            int _pac_sc_s310_s482 = 0;
                                                                            HashSet@meta(_pac_sc_s310_s482);
                                                                            bit _pac_sc_s483 = 0;
                                                                            if((key.__cid) == _pac_sc_s310_s482)/*HashMap.sk:122*/
                                                                            {
                                                                              bit _pac_sc_s310_s485 = 0;
                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s485);
                                                                              _pac_sc_s483 = _pac_sc_s310_s485;
                                                                            }
                                                                            else
                                                                            {
                                                                              int _pac_sc_s310_s487 = 0;
                                                                              BufferedWriter@meta(_pac_sc_s310_s487);
                                                                              bit _pac_sc_s488 = 0;
                                                                              if((key.__cid) == _pac_sc_s310_s487)/*HashMap.sk:122*/
                                                                              {
                                                                                bit _pac_sc_s310_s490 = 0;
                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s490);
                                                                                _pac_sc_s488 = _pac_sc_s310_s490;
                                                                              }
                                                                              else
                                                                              {
                                                                                int _pac_sc_s310_s492 = 0;
                                                                                Utils@meta(_pac_sc_s310_s492);
                                                                                bit _pac_sc_s493 = 0;
                                                                                if((key.__cid) == _pac_sc_s310_s492)/*HashMap.sk:122*/
                                                                                {
                                                                                  bit _pac_sc_s310_s495 = 0;
                                                                                  equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s495);
                                                                                  _pac_sc_s493 = _pac_sc_s310_s495;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int _pac_sc_s310_s497 = 0;
                                                                                  Float@meta(_pac_sc_s310_s497);
                                                                                  bit _pac_sc_s498 = 0;
                                                                                  if((key.__cid) == _pac_sc_s310_s497)/*HashMap.sk:122*/
                                                                                  {
                                                                                    bit _pac_sc_s310_s500 = 0;
                                                                                    equals_Object@Float(key, node.key_HashMap_Node, _pac_sc_s310_s500);
                                                                                    _pac_sc_s498 = _pac_sc_s310_s500;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int _pac_sc_s310_s502 = 0;
                                                                                    HashMap@meta(_pac_sc_s310_s502);
                                                                                    bit _pac_sc_s503 = 0;
                                                                                    if((key.__cid) == _pac_sc_s310_s502)/*HashMap.sk:122*/
                                                                                    {
                                                                                      bit _pac_sc_s310_s505 = 0;
                                                                                      equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s505);
                                                                                      _pac_sc_s503 = _pac_sc_s310_s505;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int _pac_sc_s310_s507 = 0;
                                                                                      Number@meta(_pac_sc_s310_s507);
                                                                                      bit _pac_sc_s508 = 0;
                                                                                      if((key.__cid) == _pac_sc_s310_s507)/*HashMap.sk:122*/
                                                                                      {
                                                                                        bit _pac_sc_s310_s510 = 0;
                                                                                        equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s510);
                                                                                        _pac_sc_s508 = _pac_sc_s310_s510;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int _pac_sc_s310_s512 = 0;
                                                                                        FileReaderr@meta(_pac_sc_s310_s512);
                                                                                        bit _pac_sc_s513 = 0;
                                                                                        if((key.__cid) == _pac_sc_s310_s512)/*HashMap.sk:122*/
                                                                                        {
                                                                                          bit _pac_sc_s310_s515 = 0;
                                                                                          equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s515);
                                                                                          _pac_sc_s513 = _pac_sc_s310_s515;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int _pac_sc_s310_s517 = 0;
                                                                                          CryptoCipherFactory@meta(_pac_sc_s310_s517);
                                                                                          bit _pac_sc_s518 = 0;
                                                                                          if((key.__cid) == _pac_sc_s310_s517)/*HashMap.sk:122*/
                                                                                          {
                                                                                            bit _pac_sc_s310_s520 = 0;
                                                                                            equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s520);
                                                                                            _pac_sc_s518 = _pac_sc_s310_s520;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int _pac_sc_s310_s522 = 0;
                                                                                            Scanner@meta(_pac_sc_s310_s522);
                                                                                            bit _pac_sc_s523 = 0;
                                                                                            if((key.__cid) == _pac_sc_s310_s522)/*HashMap.sk:122*/
                                                                                            {
                                                                                              bit _pac_sc_s310_s525 = 0;
                                                                                              equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s525);
                                                                                              _pac_sc_s523 = _pac_sc_s310_s525;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int _pac_sc_s310_s527 = 0;
                                                                                              Object@meta(_pac_sc_s310_s527);
                                                                                              bit _pac_sc_s528 = 0;
                                                                                              if((key.__cid) == _pac_sc_s310_s527)/*HashMap.sk:122*/
                                                                                              {
                                                                                                bit _pac_sc_s310_s530 = 0;
                                                                                                equals_Object@Object(key, node.key_HashMap_Node, _pac_sc_s310_s530);
                                                                                                _pac_sc_s528 = _pac_sc_s310_s530;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                _pac_sc_s528 = 0;
                                                                                              }
                                                                                              _pac_sc_s523 = _pac_sc_s528;
                                                                                            }
                                                                                            _pac_sc_s518 = _pac_sc_s523;
                                                                                          }
                                                                                          _pac_sc_s513 = _pac_sc_s518;
                                                                                        }
                                                                                        _pac_sc_s508 = _pac_sc_s513;
                                                                                      }
                                                                                      _pac_sc_s503 = _pac_sc_s508;
                                                                                    }
                                                                                    _pac_sc_s498 = _pac_sc_s503;
                                                                                  }
                                                                                  _pac_sc_s493 = _pac_sc_s498;
                                                                                }
                                                                                _pac_sc_s488 = _pac_sc_s493;
                                                                              }
                                                                              _pac_sc_s483 = _pac_sc_s488;
                                                                            }
                                                                            _pac_sc_s478 = _pac_sc_s483;
                                                                          }
                                                                          _pac_sc_s473 = _pac_sc_s478;
                                                                        }
                                                                        _pac_sc_s468 = _pac_sc_s473;
                                                                      }
                                                                      _pac_sc_s463 = _pac_sc_s468;
                                                                    }
                                                                    _pac_sc_s458 = _pac_sc_s463;
                                                                  }
                                                                  _pac_sc_s453 = _pac_sc_s458;
                                                                }
                                                                _pac_sc_s448 = _pac_sc_s453;
                                                              }
                                                              _pac_sc_s443 = _pac_sc_s448;
                                                            }
                                                            _pac_sc_s438 = _pac_sc_s443;
                                                          }
                                                          _pac_sc_s433 = _pac_sc_s438;
                                                        }
                                                        _pac_sc_s428 = _pac_sc_s433;
                                                      }
                                                      _pac_sc_s423 = _pac_sc_s428;
                                                    }
                                                    _pac_sc_s418 = _pac_sc_s423;
                                                  }
                                                  _pac_sc_s413 = _pac_sc_s418;
                                                }
                                                _pac_sc_s408 = _pac_sc_s413;
                                              }
                                              _pac_sc_s403 = _pac_sc_s408;
                                            }
                                            _pac_sc_s398 = _pac_sc_s403;
                                          }
                                          _pac_sc_s393 = _pac_sc_s398;
                                        }
                                        _pac_sc_s388 = _pac_sc_s393;
                                      }
                                      _pac_sc_s383 = _pac_sc_s388;
                                    }
                                    _pac_sc_s378 = _pac_sc_s383;
                                  }
                                  _pac_sc_s373 = _pac_sc_s378;
                                }
                                _pac_sc_s368 = _pac_sc_s373;
                              }
                              _pac_sc_s363 = _pac_sc_s368;
                            }
                            _pac_sc_s358 = _pac_sc_s363;
                          }
                          _pac_sc_s353 = _pac_sc_s358;
                        }
                        _pac_sc_s348 = _pac_sc_s353;
                      }
                      _pac_sc_s343 = _pac_sc_s348;
                    }
                    _pac_sc_s338 = _pac_sc_s343;
                  }
                  _pac_sc_s333 = _pac_sc_s338;
                }
                _pac_sc_s328 = _pac_sc_s333;
              }
              _pac_sc_s323 = _pac_sc_s328;
            }
            _pac_sc_s318 = _pac_sc_s323;
          }
          _pac_sc_s313 = _pac_sc_s318;
        }
        _pac_sc_s310 = !(_pac_sc_s313);
      }
      if(_pac_sc_s310)/*HashMap.sk:122*/
      {
        resize_int@HashMap(self, hash + 1, self0__HashMap_Node_s4730);
        hashMod = hash % (self.capacity_HashMap);
        if(hashMod < 0)/*HashMap.sk:125*/
        {
          hashMod = hashMod + (self.capacity_HashMap);
        }
        node = self.elementData_HashMap.A[hashMod];
        self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
      }
      int _out_s532 = 0;
      HashMap_Node@meta(_out_s532);
      Object@Object _out_s534 = null;
      HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s532), self, key, value, hash, _out_s534, self0__HashMap_Node_s4730);
      self.elementData_HashMap.A[hashMod] = _out_s534;
      if(node != (null))/*HashMap.sk:132*/
      {
        _out = node.value_HashMap_Node;
        return;
      }
      else
      {
        _out = null;
        return;
      }
    }
    int _out_s536 = 0;
    HashMap_Node@meta(_out_s536);
    Object@Object _out_s538 = null;
    HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s536), self, key, value, hash, _out_s538, self0__HashMap_Node_s4730);
    self.elementData_HashMap.A[hashMod] = _out_s538;
    self.numPairs_HashMap = (self.numPairs_HashMap) + 1;
    _out = null;
    return;
  }
  /*HashMap.sk:95*/
  
void put_K_V (Object self, Object key, Object value, ref Object _out, ref global Object@Object self0__HashMap_Node_s4721)/*HashMap.sk:95*/
  {
    _out = null;
    int h_s89 = 0;
    KerberosKey@meta(h_s89);
    int _pac_sc_s90 = 0;
    if((key.__cid) == h_s89)/*HashMap.sk:96*/
    {
      int h_s92 = 0;
      hashCode@Object(key, h_s92);
      _pac_sc_s90 = h_s92;
    }
    else
    {
      int h_s94 = 0;
      HashMap_Node@meta(h_s94);
      int _pac_sc_s95 = 0;
      if((key.__cid) == h_s94)/*HashMap.sk:96*/
      {
        int h_s97 = 0;
        hashCode@Object(key, h_s97);
        _pac_sc_s95 = h_s97;
      }
      else
      {
        int h_s99 = 0;
        Properties@meta(h_s99);
        int _pac_sc_s100 = 0;
        if((key.__cid) == h_s99)/*HashMap.sk:96*/
        {
          int h_s102 = 0;
          hashCode@Object(key, h_s102);
          _pac_sc_s100 = h_s102;
        }
        else
        {
          int h_s104 = 0;
          File@meta(h_s104);
          int _pac_sc_s105 = 0;
          if((key.__cid) == h_s104)/*HashMap.sk:96*/
          {
            int h_s107 = 0;
            hashCode@Object(key, h_s107);
            _pac_sc_s105 = h_s107;
          }
          else
          {
            int h_s109 = 0;
            CryptoCipherFactory_CipherProvider@meta(h_s109);
            int _pac_sc_s110 = 0;
            if((key.__cid) == h_s109)/*HashMap.sk:96*/
            {
              int h_s112 = 0;
              hashCode@Object(key, h_s112);
              _pac_sc_s110 = h_s112;
            }
            else
            {
              int h_s114 = 0;
              StringBuffer@meta(h_s114);
              int _pac_sc_s115 = 0;
              if((key.__cid) == h_s114)/*HashMap.sk:96*/
              {
                int h_s117 = 0;
                hashCode@Object(key, h_s117);
                _pac_sc_s115 = h_s117;
              }
              else
              {
                int h_s119 = 0;
                OpenSSLCipher@meta(h_s119);
                int _pac_sc_s120 = 0;
                if((key.__cid) == h_s119)/*HashMap.sk:96*/
                {
                  int h_s122 = 0;
                  hashCode@Object(key, h_s122);
                  _pac_sc_s120 = h_s122;
                }
                else
                {
                  int h_s124 = 0;
                  AbstractQueue@meta(h_s124);
                  int _pac_sc_s125 = 0;
                  if((key.__cid) == h_s124)/*HashMap.sk:96*/
                  {
                    int h_s127 = 0;
                    hashCode@Object(key, h_s127);
                    _pac_sc_s125 = h_s127;
                  }
                  else
                  {
                    int h_s129 = 0;
                    JCECipher@meta(h_s129);
                    int _pac_sc_s130 = 0;
                    if((key.__cid) == h_s129)/*HashMap.sk:96*/
                    {
                      int h_s132 = 0;
                      hashCode@Object(key, h_s132);
                      _pac_sc_s130 = h_s132;
                    }
                    else
                    {
                      int h_s134 = 0;
                      Mac@meta(h_s134);
                      int _pac_sc_s135 = 0;
                      if((key.__cid) == h_s134)/*HashMap.sk:96*/
                      {
                        int h_s137 = 0;
                        hashCode@Object(key, h_s137);
                        _pac_sc_s135 = h_s137;
                      }
                      else
                      {
                        int h_s139 = 0;
                        KeyGenerator@meta(h_s139);
                        int _pac_sc_s140 = 0;
                        if((key.__cid) == h_s139)/*HashMap.sk:96*/
                        {
                          int h_s142 = 0;
                          hashCode@Object(key, h_s142);
                          _pac_sc_s140 = h_s142;
                        }
                        else
                        {
                          int h_s144 = 0;
                          ArrayList@meta(h_s144);
                          int _pac_sc_s145 = 0;
                          if((key.__cid) == h_s144)/*HashMap.sk:96*/
                          {
                            int h_s147 = 0;
                            hashCode@Object(key, h_s147);
                            _pac_sc_s145 = h_s147;
                          }
                          else
                          {
                            int h_s149 = 0;
                            KeyStore@meta(h_s149);
                            int _pac_sc_s150 = 0;
                            if((key.__cid) == h_s149)/*HashMap.sk:96*/
                            {
                              int h_s152 = 0;
                              hashCode@Object(key, h_s152);
                              _pac_sc_s150 = h_s152;
                            }
                            else
                            {
                              int h_s154 = 0;
                              Cipher@meta(h_s154);
                              int _pac_sc_s155 = 0;
                              if((key.__cid) == h_s154)/*HashMap.sk:96*/
                              {
                                int h_s157 = 0;
                                hashCode@Object(key, h_s157);
                                _pac_sc_s155 = h_s157;
                              }
                              else
                              {
                                int h_s159 = 0;
                                LinkedList@meta(h_s159);
                                int _pac_sc_s160 = 0;
                                if((key.__cid) == h_s159)/*HashMap.sk:96*/
                                {
                                  int h_s162 = 0;
                                  hashCode@Object(key, h_s162);
                                  _pac_sc_s160 = h_s162;
                                }
                                else
                                {
                                  int h_s164 = 0;
                                  System@meta(h_s164);
                                  int _pac_sc_s165 = 0;
                                  if((key.__cid) == h_s164)/*HashMap.sk:96*/
                                  {
                                    int h_s167 = 0;
                                    hashCode@Object(key, h_s167);
                                    _pac_sc_s165 = h_s167;
                                  }
                                  else
                                  {
                                    int h_s169 = 0;
                                    ArrayDeque_DequeNode@meta(h_s169);
                                    int _pac_sc_s170 = 0;
                                    if((key.__cid) == h_s169)/*HashMap.sk:96*/
                                    {
                                      int h_s172 = 0;
                                      hashCode@Object(key, h_s172);
                                      _pac_sc_s170 = h_s172;
                                    }
                                    else
                                    {
                                      int h_s174 = 0;
                                      SecretKeySpec@meta(h_s174);
                                      int _pac_sc_s175 = 0;
                                      if((key.__cid) == h_s174)/*HashMap.sk:96*/
                                      {
                                        int h_s177 = 0;
                                        hashCode@Object(key, h_s177);
                                        _pac_sc_s175 = h_s177;
                                      }
                                      else
                                      {
                                        int h_s179 = 0;
                                        CipherFactory@meta(h_s179);
                                        int _pac_sc_s180 = 0;
                                        if((key.__cid) == h_s179)/*HashMap.sk:96*/
                                        {
                                          int h_s182 = 0;
                                          hashCode@Object(key, h_s182);
                                          _pac_sc_s180 = h_s182;
                                        }
                                        else
                                        {
                                          int h_s184 = 0;
                                          Integer@meta(h_s184);
                                          int _pac_sc_s185 = 0;
                                          if((key.__cid) == h_s184)/*HashMap.sk:96*/
                                          {
                                            int h_s187 = 0;
                                            hashCode@Integer(key, h_s187);
                                            _pac_sc_s185 = h_s187;
                                          }
                                          else
                                          {
                                            int h_s189 = 0;
                                            Character@meta(h_s189);
                                            int _pac_sc_s190 = 0;
                                            if((key.__cid) == h_s189)/*HashMap.sk:96*/
                                            {
                                              int h_s192 = 0;
                                              hashCode@Object(key, h_s192);
                                              _pac_sc_s190 = h_s192;
                                            }
                                            else
                                            {
                                              int h_s194 = 0;
                                              Tester@meta(h_s194);
                                              int _pac_sc_s195 = 0;
                                              if((key.__cid) == h_s194)/*HashMap.sk:96*/
                                              {
                                                int h_s197 = 0;
                                                hashCode@Object(key, h_s197);
                                                _pac_sc_s195 = h_s197;
                                              }
                                              else
                                              {
                                                int h_s199 = 0;
                                                Arrays@meta(h_s199);
                                                int _pac_sc_s200 = 0;
                                                if((key.__cid) == h_s199)/*HashMap.sk:96*/
                                                {
                                                  int h_s202 = 0;
                                                  hashCode@Object(key, h_s202);
                                                  _pac_sc_s200 = h_s202;
                                                }
                                                else
                                                {
                                                  int h_s204 = 0;
                                                  TreeMap@meta(h_s204);
                                                  int _pac_sc_s205 = 0;
                                                  if((key.__cid) == h_s204)/*HashMap.sk:96*/
                                                  {
                                                    int h_s207 = 0;
                                                    hashCode@Object(key, h_s207);
                                                    _pac_sc_s205 = h_s207;
                                                  }
                                                  else
                                                  {
                                                    int h_s209 = 0;
                                                    FileWriterr@meta(h_s209);
                                                    int _pac_sc_s210 = 0;
                                                    if((key.__cid) == h_s209)/*HashMap.sk:96*/
                                                    {
                                                      int h_s212 = 0;
                                                      hashCode@Object(key, h_s212);
                                                      _pac_sc_s210 = h_s212;
                                                    }
                                                    else
                                                    {
                                                      int h_s214 = 0;
                                                      SecureRandom@meta(h_s214);
                                                      int _pac_sc_s215 = 0;
                                                      if((key.__cid) == h_s214)/*HashMap.sk:96*/
                                                      {
                                                        int h_s217 = 0;
                                                        hashCode@Object(key, h_s217);
                                                        _pac_sc_s215 = h_s217;
                                                      }
                                                      else
                                                      {
                                                        int h_s219 = 0;
                                                        ArrayDeque@meta(h_s219);
                                                        int _pac_sc_s220 = 0;
                                                        if((key.__cid) == h_s219)/*HashMap.sk:96*/
                                                        {
                                                          int h_s222 = 0;
                                                          hashCode@Object(key, h_s222);
                                                          _pac_sc_s220 = h_s222;
                                                        }
                                                        else
                                                        {
                                                          int h_s224 = 0;
                                                          Stack@meta(h_s224);
                                                          int _pac_sc_s225 = 0;
                                                          if((key.__cid) == h_s224)/*HashMap.sk:96*/
                                                          {
                                                            int h_s227 = 0;
                                                            hashCode@Object(key, h_s227);
                                                            _pac_sc_s225 = h_s227;
                                                          }
                                                          else
                                                          {
                                                            int h_s229 = 0;
                                                            StringBuilder@meta(h_s229);
                                                            int _pac_sc_s230 = 0;
                                                            if((key.__cid) == h_s229)/*HashMap.sk:96*/
                                                            {
                                                              int h_s232 = 0;
                                                              hashCode@Object(key, h_s232);
                                                              _pac_sc_s230 = h_s232;
                                                            }
                                                            else
                                                            {
                                                              int h_s234 = 0;
                                                              TreeSet@meta(h_s234);
                                                              int _pac_sc_s235 = 0;
                                                              if((key.__cid) == h_s234)/*HashMap.sk:96*/
                                                              {
                                                                int h_s237 = 0;
                                                                hashCode@Object(key, h_s237);
                                                                _pac_sc_s235 = h_s237;
                                                              }
                                                              else
                                                              {
                                                                int h_s239 = 0;
                                                                String@meta(h_s239);
                                                                int _pac_sc_s240 = 0;
                                                                if((key.__cid) == h_s239)/*HashMap.sk:96*/
                                                                {
                                                                  int h_s242 = 0;
                                                                  hashCode@String(key, h_s242);
                                                                  _pac_sc_s240 = h_s242;
                                                                }
                                                                else
                                                                {
                                                                  int h_s244 = 0;
                                                                  IvParameterSpec@meta(h_s244);
                                                                  int _pac_sc_s245 = 0;
                                                                  if((key.__cid) == h_s244)/*HashMap.sk:96*/
                                                                  {
                                                                    int h_s247 = 0;
                                                                    hashCode@Object(key, h_s247);
                                                                    _pac_sc_s245 = h_s247;
                                                                  }
                                                                  else
                                                                  {
                                                                    int h_s249 = 0;
                                                                    Assert@meta(h_s249);
                                                                    int _pac_sc_s250 = 0;
                                                                    if((key.__cid) == h_s249)/*HashMap.sk:96*/
                                                                    {
                                                                      int h_s252 = 0;
                                                                      hashCode@Object(key, h_s252);
                                                                      _pac_sc_s250 = h_s252;
                                                                    }
                                                                    else
                                                                    {
                                                                      int h_s254 = 0;
                                                                      Boolean@meta(h_s254);
                                                                      int _pac_sc_s255 = 0;
                                                                      if((key.__cid) == h_s254)/*HashMap.sk:96*/
                                                                      {
                                                                        int h_s257 = 0;
                                                                        hashCode@Object(key, h_s257);
                                                                        _pac_sc_s255 = h_s257;
                                                                      }
                                                                      else
                                                                      {
                                                                        int h_s259 = 0;
                                                                        HashSet@meta(h_s259);
                                                                        int _pac_sc_s260 = 0;
                                                                        if((key.__cid) == h_s259)/*HashMap.sk:96*/
                                                                        {
                                                                          int h_s262 = 0;
                                                                          hashCode@Object(key, h_s262);
                                                                          _pac_sc_s260 = h_s262;
                                                                        }
                                                                        else
                                                                        {
                                                                          int h_s264 = 0;
                                                                          BufferedWriter@meta(h_s264);
                                                                          int _pac_sc_s265 = 0;
                                                                          if((key.__cid) == h_s264)/*HashMap.sk:96*/
                                                                          {
                                                                            int h_s267 = 0;
                                                                            hashCode@Object(key, h_s267);
                                                                            _pac_sc_s265 = h_s267;
                                                                          }
                                                                          else
                                                                          {
                                                                            int h_s269 = 0;
                                                                            Utils@meta(h_s269);
                                                                            int _pac_sc_s270 = 0;
                                                                            if((key.__cid) == h_s269)/*HashMap.sk:96*/
                                                                            {
                                                                              int h_s272 = 0;
                                                                              hashCode@Object(key, h_s272);
                                                                              _pac_sc_s270 = h_s272;
                                                                            }
                                                                            else
                                                                            {
                                                                              int h_s274 = 0;
                                                                              Float@meta(h_s274);
                                                                              int _pac_sc_s275 = 0;
                                                                              if((key.__cid) == h_s274)/*HashMap.sk:96*/
                                                                              {
                                                                                int h_s277 = 0;
                                                                                hashCode@Object(key, h_s277);
                                                                                _pac_sc_s275 = h_s277;
                                                                              }
                                                                              else
                                                                              {
                                                                                int h_s279 = 0;
                                                                                HashMap@meta(h_s279);
                                                                                int _pac_sc_s280 = 0;
                                                                                if((key.__cid) == h_s279)/*HashMap.sk:96*/
                                                                                {
                                                                                  int h_s282 = 0;
                                                                                  hashCode@Object(key, h_s282);
                                                                                  _pac_sc_s280 = h_s282;
                                                                                }
                                                                                else
                                                                                {
                                                                                  int h_s284 = 0;
                                                                                  Number@meta(h_s284);
                                                                                  int _pac_sc_s285 = 0;
                                                                                  if((key.__cid) == h_s284)/*HashMap.sk:96*/
                                                                                  {
                                                                                    int h_s287 = 0;
                                                                                    hashCode@Object(key, h_s287);
                                                                                    _pac_sc_s285 = h_s287;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int h_s289 = 0;
                                                                                    FileReaderr@meta(h_s289);
                                                                                    int _pac_sc_s290 = 0;
                                                                                    if((key.__cid) == h_s289)/*HashMap.sk:96*/
                                                                                    {
                                                                                      int h_s292 = 0;
                                                                                      hashCode@Object(key, h_s292);
                                                                                      _pac_sc_s290 = h_s292;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int h_s294 = 0;
                                                                                      CryptoCipherFactory@meta(h_s294);
                                                                                      int _pac_sc_s295 = 0;
                                                                                      if((key.__cid) == h_s294)/*HashMap.sk:96*/
                                                                                      {
                                                                                        int h_s297 = 0;
                                                                                        hashCode@Object(key, h_s297);
                                                                                        _pac_sc_s295 = h_s297;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int h_s299 = 0;
                                                                                        Scanner@meta(h_s299);
                                                                                        int _pac_sc_s300 = 0;
                                                                                        if((key.__cid) == h_s299)/*HashMap.sk:96*/
                                                                                        {
                                                                                          int h_s302 = 0;
                                                                                          hashCode@Object(key, h_s302);
                                                                                          _pac_sc_s300 = h_s302;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int h_s304 = 0;
                                                                                          Object@meta(h_s304);
                                                                                          int _pac_sc_s305 = 0;
                                                                                          if((key.__cid) == h_s304)/*HashMap.sk:96*/
                                                                                          {
                                                                                            int h_s307 = 0;
                                                                                            hashCode@Object(key, h_s307);
                                                                                            _pac_sc_s305 = h_s307;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            _pac_sc_s305 = 0;
                                                                                          }
                                                                                          _pac_sc_s300 = _pac_sc_s305;
                                                                                        }
                                                                                        _pac_sc_s295 = _pac_sc_s300;
                                                                                      }
                                                                                      _pac_sc_s290 = _pac_sc_s295;
                                                                                    }
                                                                                    _pac_sc_s285 = _pac_sc_s290;
                                                                                  }
                                                                                  _pac_sc_s280 = _pac_sc_s285;
                                                                                }
                                                                                _pac_sc_s275 = _pac_sc_s280;
                                                                              }
                                                                              _pac_sc_s270 = _pac_sc_s275;
                                                                            }
                                                                            _pac_sc_s265 = _pac_sc_s270;
                                                                          }
                                                                          _pac_sc_s260 = _pac_sc_s265;
                                                                        }
                                                                        _pac_sc_s255 = _pac_sc_s260;
                                                                      }
                                                                      _pac_sc_s250 = _pac_sc_s255;
                                                                    }
                                                                    _pac_sc_s245 = _pac_sc_s250;
                                                                  }
                                                                  _pac_sc_s240 = _pac_sc_s245;
                                                                }
                                                                _pac_sc_s235 = _pac_sc_s240;
                                                              }
                                                              _pac_sc_s230 = _pac_sc_s235;
                                                            }
                                                            _pac_sc_s225 = _pac_sc_s230;
                                                          }
                                                          _pac_sc_s220 = _pac_sc_s225;
                                                        }
                                                        _pac_sc_s215 = _pac_sc_s220;
                                                      }
                                                      _pac_sc_s210 = _pac_sc_s215;
                                                    }
                                                    _pac_sc_s205 = _pac_sc_s210;
                                                  }
                                                  _pac_sc_s200 = _pac_sc_s205;
                                                }
                                                _pac_sc_s195 = _pac_sc_s200;
                                              }
                                              _pac_sc_s190 = _pac_sc_s195;
                                            }
                                            _pac_sc_s185 = _pac_sc_s190;
                                          }
                                          _pac_sc_s180 = _pac_sc_s185;
                                        }
                                        _pac_sc_s175 = _pac_sc_s180;
                                      }
                                      _pac_sc_s170 = _pac_sc_s175;
                                    }
                                    _pac_sc_s165 = _pac_sc_s170;
                                  }
                                  _pac_sc_s160 = _pac_sc_s165;
                                }
                                _pac_sc_s155 = _pac_sc_s160;
                              }
                              _pac_sc_s150 = _pac_sc_s155;
                            }
                            _pac_sc_s145 = _pac_sc_s150;
                          }
                          _pac_sc_s140 = _pac_sc_s145;
                        }
                        _pac_sc_s135 = _pac_sc_s140;
                      }
                      _pac_sc_s130 = _pac_sc_s135;
                    }
                    _pac_sc_s125 = _pac_sc_s130;
                  }
                  _pac_sc_s120 = _pac_sc_s125;
                }
                _pac_sc_s115 = _pac_sc_s120;
              }
              _pac_sc_s110 = _pac_sc_s115;
            }
            _pac_sc_s105 = _pac_sc_s110;
          }
          _pac_sc_s100 = _pac_sc_s105;
        }
        _pac_sc_s95 = _pac_sc_s100;
      }
      _pac_sc_s90 = _pac_sc_s95;
    }
    Object@Object _out_s309 = null;
    putVal_int_K_V@HashMap(self, _pac_sc_s90, key, value, _out_s309, self0__HashMap_Node_s4721);
    _out = _out_s309;
    return;
  }
  /*HashMap.sk:22*/
  
void resize_int (Object self, int newSize, ref global Object@Object self0__HashMap_Node_s4718)/*HashMap.sk:22*/
  {
    int i = 0;
    int h = 0;
    int hashMod = 0;
    Array_Object@array oldElementData = self.elementData_HashMap;
    Array_Object@array newElementData = new Array_Object@array(length=newSize);
    i = 0;
    bit __sa0 = 0 < (self.capacity_HashMap);
    Object@Object k = null;
    Object@Object v = null;
    while(__sa0)
    {
      {
        {
          {
            if((oldElementData.A[i]) != (null))/*HashMap.sk:30*/
            {
              h = oldElementData.A[i].hash_HashMap_Node;
              k = oldElementData.A[i].key_HashMap_Node;
              v = oldElementData.A[i].value_HashMap_Node;
              hashMod = h % newSize;
              if(hashMod < 0)/*HashMap.sk:35*/
              {
                hashMod = hashMod + newSize;
              }
              int _out_s540 = 0;
              HashMap_Node@meta(_out_s540);
              Object@Object _out_s542 = null;
              HashMap_Node_HashMap_Node_HashMap_K_V_int@HashMap_Node(new Object@Object(__cid=_out_s540), self, k, v, h, _out_s542, self0__HashMap_Node_s4718);
              newElementData.A[hashMod] = _out_s542;
            }
            i = i + 1;
            __sa0 = i < (self.capacity_HashMap);
          }
        }
      }
    }
    self.elementData_HashMap = newElementData;
    self.capacity_HashMap = newSize;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  /*ArrayList.sk:3*/
  
void glblInit_EMPTY_ELEMENTDATA__ArrayList_s4798 (ref Array_Object@array EMPTY_ELEMENTDATA__ArrayList_s4797)/*ArrayList.sk:3*/
  {
    EMPTY_ELEMENTDATA__ArrayList_s4797 = new Array_Object@array(length=0, A={});
  }
  /*ArrayList.sk:7*/
  
void glblInit_MAX_ARRAY_SIZE__ArrayList_s4820 (ref int MAX_ARRAY_SIZE__ArrayList_s4819)/*ArrayList.sk:7*/
  {
    MAX_ARRAY_SIZE__ArrayList_s4819 = 1000000;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Array_char ca, int offset, int count, ref Object _out)/*String.sk:7*/
  {
    _out = null;
    if((offset > 0) && (offset < (ca.length)))/*String.sk:8*/
    {
      Array_char@array tmp = new Array_char@array(length=count);
      for(int i = 0; i < count; i = i + 1)/*Canonical*/
      {
        tmp.A[i] = ca.A[i + offset];
      }
      self._value_String = tmp;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:32*/
  
void charAt_int (Object self, int index, ref char _out)/*String.sk:32*/
  {
    _out = '\0';
    if((0 <= index) && (index < (self._count_String)))/*String.sk:33*/
    {
      _out = self._value_String.A[index];
      return;
    }
    _out = '\0';
    return;
  }
  /*String.sk:139*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*String.sk:139*/
  {
    _out = 0;
    _out = 0;
    int _out_s2327 = 0;
    String@meta(_out_s2327);
    if((obj.__cid) == _out_s2327)/*String.sk:141*/
    {
      _out = 1;
      int sLen_s2329 = 0;
      String@meta(sLen_s2329);
      int _pac_sc_s2330 = 0;
      if((obj.__cid) == sLen_s2329)/*String.sk:144*/
      {
        int sLen_s2332 = 0;
        length@String(obj, sLen_s2332);
        _pac_sc_s2330 = sLen_s2332;
      }
      else
      {
        _pac_sc_s2330 = 0;
      }
      int tLen_s2334 = 0;
      String@meta(tLen_s2334);
      int _pac_sc_s2335 = 0;
      if((self.__cid) == tLen_s2334)/*String.sk:145*/
      {
        int tLen_s2337 = 0;
        length@String(self, tLen_s2337);
        _pac_sc_s2335 = tLen_s2337;
      }
      else
      {
        _pac_sc_s2335 = 0;
      }
      if(_pac_sc_s2330 != _pac_sc_s2335)/*String.sk:146*/
      {
        _out = 0;
      }
      for(int i = 0; (i < _pac_sc_s2330) && (_out == 1); i = i + 1)
      {
        if((obj._value_String.A[i]) != (self._value_String.A[i]))/*String.sk:148*/
        {
          _out = 0;
        }
      }
    }
    return;
  }
  /*String.sk:156*/
  
void hashCode (Object self, ref int _out)/*String.sk:156*/
  {
    _out = 0;
    int n;
    int hash;
    int temp;
    n = self._count_String;
    hash = 0;
    if(n == 0)/*String.sk:158*/
    {
      _out = 0;
      return;
    }
    for(int i = 0; i < n; i = i + 1)/*Canonical*/
    {
      int temp_s2339 = 0;
      String@meta(temp_s2339);
      char _pac_sc_s2340 = '\0';
      if((self.__cid) == temp_s2339)/*String.sk:162*/
      {
        char temp_s2342 = '\0';
        charAt_int@String(self, i, temp_s2342);
        _pac_sc_s2340 = temp_s2342;
      }
      else
      {
        _pac_sc_s2340 = '\0';
      }
      temp = _pac_sc_s2340;
      for(int j = 0; j < ((n - 1) - i); j = j + 1)/*Canonical*/
      {
        temp = temp * 31;
      }
      hash = hash + temp;
    }
    _out = hash;
    return;
  }
  /*String.sk:37*/
  
void length (Object self, ref int _out)/*String.sk:37*/
  {
    _out = 0;
    _out = self._count_String;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE TreeSet*/
package TreeSet{
  /*TreeSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__TreeSet_s4810 (ref int INITIAL_CAPACITY__TreeSet_s4809)/*TreeSet.sk:3*/
  {
    INITIAL_CAPACITY__TreeSet_s4809 = 16;
  }
  /*TreeSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__TreeSet_s4850 (ref int RESIZE_FACTOR__TreeSet_s4849)/*TreeSet.sk:7*/
  {
    RESIZE_FACTOR__TreeSet_s4849 = 2;
  }
  /* END PACKAGE TreeSet*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  /*SecretKeySpec.sk:7*/
  
void SecretKeySpec_SecretKeySpec_byte_String (Object self, Array_char key, Object type, ref Object _out)/*SecretKeySpec.sk:7*/
  {
    _out = null;
    self.key_SecretKeySpec = key;
    _out = self;
    return;
  }
  /*SecretKeySpec.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*SecretKeySpec.sk:12*/
  {
    _out = null;
    _out = self.key_SecretKeySpec;
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE List*/
package List{
  /* END PACKAGE List*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE HashSet*/
package HashSet{
  /*HashSet.sk:3*/
  
void glblInit_INITIAL_CAPACITY__HashSet_s4808 (ref int INITIAL_CAPACITY__HashSet_s4807)/*HashSet.sk:3*/
  {
    INITIAL_CAPACITY__HashSet_s4807 = 16;
  }
  /*HashSet.sk:7*/
  
void glblInit_RESIZE_FACTOR__HashSet_s4848 (ref int RESIZE_FACTOR__HashSet_s4847)/*HashSet.sk:7*/
  {
    RESIZE_FACTOR__HashSet_s4847 = 2;
  }
  /* END PACKAGE HashSet*/
}
/* BEGIN PACKAGE OpenSSLCipher*/
package OpenSSLCipher{
  /*OpenSSLCipher.sk:7*/
  
void OpenSSLCipher_OpenSSLCipher_String_String (Object self, Object algorithm, Object transformation, ref Object _out)/*OpenSSLCipher.sk:7*/
  {
    _out = null;
    self.algorithm_OpenSSLCipher = algorithm;
    self.transformation_OpenSSLCipher = transformation;
    _out = self;
    return;
  }
  /*OpenSSLCipher.sk:36*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4715, ref global Object@Object self0__HashMap_Node_s4725)/*OpenSSLCipher.sk:36*/
  {
    _out = null;
    Array_char@array _out_s3457 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 0, data, key, IV, _out_s3457, DEFAULT_INITIAL_CAPACITY__HashMap_s4715, self0__HashMap_Node_s4725);
    _out = _out_s3457;
    return;
  }
  /*OpenSSLCipher.sk:32*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4731, ref global Object@Object self0__HashMap_Node_s4723)/*OpenSSLCipher.sk:32*/
  {
    _out = null;
    Array_char@array _out_s3514 = null;
    translate_boolean_byte_Key_byte@OpenSSLCipher(self, 1, data, key, IV, _out_s3514, DEFAULT_INITIAL_CAPACITY__HashMap_s4731, self0__HashMap_Node_s4723);
    _out = _out_s3514;
    return;
  }
  /*OpenSSLCipher.sk:13*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4741, ref global Object@Object self0__HashMap_Node_s4733)/*OpenSSLCipher.sk:13*/
  {
    _out = null;
    int properties_s3478 = 0;
    Properties@meta(properties_s3478);
    Object@Object properties_s3480 = null;
    Properties_Properties@Properties(new Object@Object(__cid=properties_s3478), properties_s3480, DEFAULT_INITIAL_CAPACITY__HashMap_s4741);
    int _out_s3482 = 0;
    Properties@meta(_out_s3482);
    if((properties_s3480.__cid) == _out_s3482)/*OpenSSLCipher.sk:15*/
    {
      int _out_s3484 = 0;
      String@meta(_out_s3484);
      Object@Object _out_s3486 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s3484), new Array_char@array(length=12, A={'C','L','A','S','S','E','S','_','K','E','Y','\0'}), 0, 11, _out_s3486);
      Object@Object _out_s3488 = null;
      getClassName@CryptoCipherFactory_CipherProvider(_out_s3488);
      setProperty_String_String@Properties(properties_s3480, _out_s3486, _out_s3488, self0__HashMap_Node_s4733);
    }
    Object@Object cipher_s3490 = null;
    getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties_s3480, cipher_s3490);
    _out = cipher_s3490;
    int keyValue_s3492 = 0;
    SecretKeySpec@meta(keyValue_s3492);
    int keyValue_s3494 = 0;
    SecretKeySpec@meta(keyValue_s3494);
    Array_char@array _pac_sc_s3495 = null;
    if((key.__cid) == keyValue_s3494)/*OpenSSLCipher.sk:19*/
    {
      Array_char@array keyValue_s3497 = null;
      getEncoded@SecretKeySpec(key, keyValue_s3497);
      _pac_sc_s3495 = keyValue_s3497;
    }
    else
    {
      int keyValue_s3499 = 0;
      KerberosKey@meta(keyValue_s3499);
      Array_char@array _pac_sc_s3500 = null;
      if((key.__cid) == keyValue_s3499)/*OpenSSLCipher.sk:19*/
      {
        Array_char@array keyValue_s3502 = null;
        getEncoded@KerberosKey(key, keyValue_s3502);
        _pac_sc_s3500 = keyValue_s3502;
      }
      else
      {
        _pac_sc_s3500 = null;
      }
      _pac_sc_s3495 = _pac_sc_s3500;
    }
    Object@Object keyValue_s3504 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s3492), _pac_sc_s3495, self.algorithm_OpenSSLCipher, keyValue_s3504);
    int IVspec_s3506 = 0;
    IvParameterSpec@meta(IVspec_s3506);
    Object@Object IVspec_s3508 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s3506), IV, IVspec_s3508);
    if(isEncryption)/*OpenSSLCipher.sk:21*/
    {
      int _out_s3510 = 0;
      Cipher@meta(_out_s3510);
      if((cipher_s3490.__cid) == _out_s3510)/*OpenSSLCipher.sk:22*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3490, 1, keyValue_s3504, IVspec_s3508);
      }
    }
    else
    {
      int _out_s3512 = 0;
      Cipher@meta(_out_s3512);
      if((cipher_s3490.__cid) == _out_s3512)/*OpenSSLCipher.sk:26*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s3490, 2, keyValue_s3504, IVspec_s3508);
      }
    }
    return;
  }
  /*OpenSSLCipher.sk:40*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4713, ref global Object@Object self0__HashMap_Node_s4734)/*OpenSSLCipher.sk:40*/
  {
    _out = null;
    Array_char@array output = new Array_char@array(length=2 * (data.length));
    Object@Object cipher_s3459 = null;
    getCipher_boolean_Key_byte@OpenSSLCipher(self, isEncryption, key, IV, cipher_s3459, DEFAULT_INITIAL_CAPACITY__HashMap_s4713, self0__HashMap_Node_s4734);
    int updateBytes_s3461 = 0;
    Cipher@meta(updateBytes_s3461);
    int _pac_sc_s3462 = 0;
    if((cipher_s3459.__cid) == updateBytes_s3461)/*OpenSSLCipher.sk:43*/
    {
      int updateBytes_s3464 = 0;
      update_byte_int_int_byte_int@Cipher(cipher_s3459, data, 0, data.length, output, 0, updateBytes_s3464);
      _pac_sc_s3462 = updateBytes_s3464;
    }
    else
    {
      _pac_sc_s3462 = 0;
    }
    int finalBytes_s3466 = 0;
    Cipher@meta(finalBytes_s3466);
    int _pac_sc_s3467 = 0;
    if((cipher_s3459.__cid) == finalBytes_s3466)/*OpenSSLCipher.sk:44*/
    {
      int finalBytes_s3469 = 0;
      doFinal_byte_int_int_byte_int@Cipher(cipher_s3459, data, 0, 0, output, _pac_sc_s3462, finalBytes_s3469);
      _pac_sc_s3467 = finalBytes_s3469;
    }
    else
    {
      _pac_sc_s3467 = 0;
    }
    int output_s3471 = 0;
    Cipher@meta(output_s3471);
    Array_char@array _pac_sc_s3472 = null;
    if((cipher_s3459.__cid) == output_s3471)/*OpenSSLCipher.sk:45*/
    {
      Array_char@array output_s3474 = null;
      doFinal_byte@Cipher(cipher_s3459, data, output_s3474);
      _pac_sc_s3472 = output_s3474;
    }
    else
    {
      _pac_sc_s3472 = null;
    }
    Array_char@array _out_s3476 = null;
    copyOf_byte_int@Arrays(_pac_sc_s3472, _pac_sc_s3462 + _pac_sc_s3467, _out_s3476);
    _out = _out_s3476;
    return;
  }
  /* END PACKAGE OpenSSLCipher*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:216*/
  
void charValue (Object self, ref char _out)/*Character.sk:216*/
  {
    _out = '\0';
    _out = self.value_Character;
    return;
  }
  /*Character.sk:220*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Character.sk:220*/
  {
    _out = 0;
    int _out_s3516 = 0;
    Character@meta(_out_s3516);
    if((obj.__cid) == _out_s3516)/*Character.sk:221*/
    {
      int _out_s3518 = 0;
      Character@meta(_out_s3518);
      char _pac_sc_s3519 = '\0';
      if((obj.__cid) == _out_s3518)/*Character.sk:222*/
      {
        char _out_s3521 = '\0';
        charValue@Character(obj, _out_s3521);
        _pac_sc_s3519 = _out_s3521;
      }
      else
      {
        _pac_sc_s3519 = '\0';
      }
      _out = (self.value_Character) == _pac_sc_s3519;
      return;
    }
    _out = 0;
    return;
  }
  /*Character.sk:43*/
  
void glblInit_COMBINING_SPACING_MARK__Character_s4744 (ref char COMBINING_SPACING_MARK__Character_s4743)/*Character.sk:43*/
  {
    COMBINING_SPACING_MARK__Character_s4743 = 8;
  }
  /*Character.sk:99*/
  
void glblInit_CONNECTOR_PUNCTUATION__Character_s4746 (ref char CONNECTOR_PUNCTUATION__Character_s4745)/*Character.sk:99*/
  {
    CONNECTOR_PUNCTUATION__Character_s4745 = 23;
  }
  /*Character.sk:71*/
  
void glblInit_CONTROL__Character_s4748 (ref char CONTROL__Character_s4747)/*Character.sk:71*/
  {
    CONTROL__Character_s4747 = 15;
  }
  /*Character.sk:111*/
  
void glblInit_CURRENCY_SYMBOL__Character_s4750 (ref char CURRENCY_SYMBOL__Character_s4749)/*Character.sk:111*/
  {
    CURRENCY_SYMBOL__Character_s4749 = 26;
  }
  /*Character.sk:87*/
  
void glblInit_DASH_PUNCTUATION__Character_s4752 (ref char DASH_PUNCTUATION__Character_s4751)/*Character.sk:87*/
  {
    DASH_PUNCTUATION__Character_s4751 = 20;
  }
  /*Character.sk:47*/
  
void glblInit_DECIMAL_DIGIT_NUMBER__Character_s4754 (ref char DECIMAL_DIGIT_NUMBER__Character_s4753)/*Character.sk:47*/
  {
    DECIMAL_DIGIT_NUMBER__Character_s4753 = 9;
  }
  /*Character.sk:155*/
  
void glblInit_DIRECTIONALITY_ARABIC_NUMBER__Character_s4758 (ref char DIRECTIONALITY_ARABIC_NUMBER__Character_s4757)/*Character.sk:155*/
  {
    DIRECTIONALITY_ARABIC_NUMBER__Character_s4757 = 6;
  }
  /*Character.sk:167*/
  
void glblInit_DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4760 (ref char DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4759)/*Character.sk:167*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL__Character_s4759 = 9;
  }
  /*Character.sk:159*/
  
void glblInit_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4762 (ref char DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4761)/*Character.sk:159*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR__Character_s4761 = 7;
  }
  /*Character.sk:147*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4764 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4763)/*Character.sk:147*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR__Character_s4763 = 4;
  }
  /*Character.sk:151*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4766 (ref char DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4765)/*Character.sk:151*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR__Character_s4765 = 5;
  }
  /*Character.sk:143*/
  
void glblInit_DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4768 (ref char DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4767)/*Character.sk:143*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER__Character_s4767 = 3;
  }
  /*Character.sk:187*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4770 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4769)/*Character.sk:187*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING__Character_s4769 = 14;
  }
  /*Character.sk:191*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4772 (ref char DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4771)/*Character.sk:191*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE__Character_s4771 = 15;
  }
  /*Character.sk:131*/
  
void glblInit_DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4774 (ref char DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4773)/*Character.sk:131*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT__Character_s4773 = 0;
  }
  /*Character.sk:163*/
  
void glblInit_DIRECTIONALITY_NONSPACING_MARK__Character_s4776 (ref char DIRECTIONALITY_NONSPACING_MARK__Character_s4775)/*Character.sk:163*/
  {
    DIRECTIONALITY_NONSPACING_MARK__Character_s4775 = 8;
  }
  /*Character.sk:183*/
  
void glblInit_DIRECTIONALITY_OTHER_NEUTRALS__Character_s4778 (ref char DIRECTIONALITY_OTHER_NEUTRALS__Character_s4777)/*Character.sk:183*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS__Character_s4777 = 13;
  }
  /*Character.sk:171*/
  
void glblInit_DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4780 (ref char DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4779)/*Character.sk:171*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR__Character_s4779 = 10;
  }
  /*Character.sk:203*/
  
void glblInit_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4782 (ref char DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4781)/*Character.sk:203*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT__Character_s4781 = 18;
  }
  /*Character.sk:139*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4784 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4783)/*Character.sk:139*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC__Character_s4783 = 2;
  }
  /*Character.sk:195*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4786 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4785)/*Character.sk:195*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING__Character_s4785 = 16;
  }
  /*Character.sk:199*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4788 (ref char DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4787)/*Character.sk:199*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE__Character_s4787 = 17;
  }
  /*Character.sk:135*/
  
void glblInit_DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4790 (ref char DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4789)/*Character.sk:135*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT__Character_s4789 = 1;
  }
  /*Character.sk:175*/
  
void glblInit_DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4792 (ref char DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4791)/*Character.sk:175*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR__Character_s4791 = 11;
  }
  /*Character.sk:127*/
  
void glblInit_DIRECTIONALITY_UNDEFINED__Character_s4794 (ref char DIRECTIONALITY_UNDEFINED__Character_s4793)/*Character.sk:127*/
  {
    DIRECTIONALITY_UNDEFINED__Character_s4793 = -1;
  }
  /*Character.sk:179*/
  
void glblInit_DIRECTIONALITY_WHITESPACE__Character_s4796 (ref char DIRECTIONALITY_WHITESPACE__Character_s4795)/*Character.sk:179*/
  {
    DIRECTIONALITY_WHITESPACE__Character_s4795 = 12;
  }
  /*Character.sk:39*/
  
void glblInit_ENCLOSING_MARK__Character_s4800 (ref char ENCLOSING_MARK__Character_s4799)/*Character.sk:39*/
  {
    ENCLOSING_MARK__Character_s4799 = 7;
  }
  /*Character.sk:95*/
  
void glblInit_END_PUNCTUATION__Character_s4802 (ref char END_PUNCTUATION__Character_s4801)/*Character.sk:95*/
  {
    END_PUNCTUATION__Character_s4801 = 22;
  }
  /*Character.sk:123*/
  
void glblInit_FINAL_QUOTE_PUNCTUATION__Character_s4804 (ref char FINAL_QUOTE_PUNCTUATION__Character_s4803)/*Character.sk:123*/
  {
    FINAL_QUOTE_PUNCTUATION__Character_s4803 = 30;
  }
  /*Character.sk:75*/
  
void glblInit_FORMAT__Character_s4806 (ref char FORMAT__Character_s4805)/*Character.sk:75*/
  {
    FORMAT__Character_s4805 = 16;
  }
  /*Character.sk:51*/
  
void glblInit_LETTER_NUMBER__Character_s4812 (ref char LETTER_NUMBER__Character_s4811)/*Character.sk:51*/
  {
    LETTER_NUMBER__Character_s4811 = 10;
  }
  /*Character.sk:63*/
  
void glblInit_LINE_SEPARATOR__Character_s4814 (ref char LINE_SEPARATOR__Character_s4813)/*Character.sk:63*/
  {
    LINE_SEPARATOR__Character_s4813 = 13;
  }
  /*Character.sk:19*/
  
void glblInit_LOWERCASE_LETTER__Character_s4816 (ref char LOWERCASE_LETTER__Character_s4815)/*Character.sk:19*/
  {
    LOWERCASE_LETTER__Character_s4815 = 2;
  }
  /*Character.sk:107*/
  
void glblInit_MATH_SYMBOL__Character_s4818 (ref char MATH_SYMBOL__Character_s4817)/*Character.sk:107*/
  {
    MATH_SYMBOL__Character_s4817 = 25;
  }
  /*Character.sk:7*/
  
void glblInit_MAX_RADIX__Character_s4822 (ref int MAX_RADIX__Character_s4821)/*Character.sk:7*/
  {
    MAX_RADIX__Character_s4821 = 36;
  }
  /*Character.sk:3*/
  
void glblInit_MIN_RADIX__Character_s4826 (ref int MIN_RADIX__Character_s4825)/*Character.sk:3*/
  {
    MIN_RADIX__Character_s4825 = 2;
  }
  /*Character.sk:27*/
  
void glblInit_MODIFIER_LETTER__Character_s4830 (ref char MODIFIER_LETTER__Character_s4829)/*Character.sk:27*/
  {
    MODIFIER_LETTER__Character_s4829 = 4;
  }
  /*Character.sk:115*/
  
void glblInit_MODIFIER_SYMBOL__Character_s4832 (ref char MODIFIER_SYMBOL__Character_s4831)/*Character.sk:115*/
  {
    MODIFIER_SYMBOL__Character_s4831 = 27;
  }
  /*Character.sk:35*/
  
void glblInit_NON_SPACING_MARK__Character_s4834 (ref char NON_SPACING_MARK__Character_s4833)/*Character.sk:35*/
  {
    NON_SPACING_MARK__Character_s4833 = 6;
  }
  /*Character.sk:31*/
  
void glblInit_OTHER_LETTER__Character_s4836 (ref char OTHER_LETTER__Character_s4835)/*Character.sk:31*/
  {
    OTHER_LETTER__Character_s4835 = 5;
  }
  /*Character.sk:55*/
  
void glblInit_OTHER_NUMBER__Character_s4838 (ref char OTHER_NUMBER__Character_s4837)/*Character.sk:55*/
  {
    OTHER_NUMBER__Character_s4837 = 11;
  }
  /*Character.sk:103*/
  
void glblInit_OTHER_PUNCTUATION__Character_s4840 (ref char OTHER_PUNCTUATION__Character_s4839)/*Character.sk:103*/
  {
    OTHER_PUNCTUATION__Character_s4839 = 24;
  }
  /*Character.sk:119*/
  
void glblInit_OTHER_SYMBOL__Character_s4842 (ref char OTHER_SYMBOL__Character_s4841)/*Character.sk:119*/
  {
    OTHER_SYMBOL__Character_s4841 = 28;
  }
  /*Character.sk:67*/
  
void glblInit_PARAGRAPH_SEPARATOR__Character_s4844 (ref char PARAGRAPH_SEPARATOR__Character_s4843)/*Character.sk:67*/
  {
    PARAGRAPH_SEPARATOR__Character_s4843 = 14;
  }
  /*Character.sk:79*/
  
void glblInit_PRIVATE_USE__Character_s4846 (ref char PRIVATE_USE__Character_s4845)/*Character.sk:79*/
  {
    PRIVATE_USE__Character_s4845 = 18;
  }
  /*Character.sk:59*/
  
void glblInit_SPACE_SEPARATOR__Character_s4852 (ref char SPACE_SEPARATOR__Character_s4851)/*Character.sk:59*/
  {
    SPACE_SEPARATOR__Character_s4851 = 12;
  }
  /*Character.sk:91*/
  
void glblInit_START_PUNCTUATION__Character_s4854 (ref char START_PUNCTUATION__Character_s4853)/*Character.sk:91*/
  {
    START_PUNCTUATION__Character_s4853 = 21;
  }
  /*Character.sk:83*/
  
void glblInit_SURROGATE__Character_s4856 (ref char SURROGATE__Character_s4855)/*Character.sk:83*/
  {
    SURROGATE__Character_s4855 = 19;
  }
  /*Character.sk:23*/
  
void glblInit_TITLECASE_LETTER__Character_s4858 (ref char TITLECASE_LETTER__Character_s4857)/*Character.sk:23*/
  {
    TITLECASE_LETTER__Character_s4857 = 3;
  }
  /*Character.sk:11*/
  
void glblInit_UNASSIGNED__Character_s4860 (ref char UNASSIGNED__Character_s4859)/*Character.sk:11*/
  {
    UNASSIGNED__Character_s4859 = 0;
  }
  /*Character.sk:15*/
  
void glblInit_UPPERCASE_LETTER__Character_s4862 (ref char UPPERCASE_LETTER__Character_s4861)/*Character.sk:15*/
  {
    UPPERCASE_LETTER__Character_s4861 = 1;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE CipherFactory*/
package CipherFactory{
  /* END PACKAGE CipherFactory*/
}
/* BEGIN PACKAGE CryptoCipherFactory*/
package CryptoCipherFactory{
  /* END PACKAGE CryptoCipherFactory*/
}
/* BEGIN PACKAGE HashMap_Node*/
package HashMap_Node{
  /*HashMap_Node.sk:10*/
  
void HashMap_Node_HashMap_Node_HashMap_K_V_int (Object self, Object self_0, Object key, Object value, int hash, ref Object _out, ref global Object@Object self0__HashMap_Node_s4634)/*HashMap_Node.sk:10*/
  {
    _out = null;
    self0__HashMap_Node_s4634 = self_0;
    self.key_HashMap_Node = key;
    self.value_HashMap_Node = value;
    self.hash_HashMap_Node = hash;
    _out = self;
    return;
  }
  /* END PACKAGE HashMap_Node*/
}
/* BEGIN PACKAGE LinkedList*/
package LinkedList{
  /* END PACKAGE LinkedList*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Stack*/
package Stack{
  /* END PACKAGE Stack*/
}
/* BEGIN PACKAGE FileReaderr*/
package FileReaderr{
  /* END PACKAGE FileReaderr*/
}
/* BEGIN PACKAGE Float*/
package Float{
  /*Float.sk:29*/
  
void equals_Object (Object self, Object anotherFloat, ref bit _out)/*Float.sk:29*/
  {
    _out = 0;
    int _out_s3791 = 0;
    Float@meta(_out_s3791);
    if((anotherFloat.__cid) == _out_s3791)/*Float.sk:30*/
    {
      if((anotherFloat.value_Float) == (self.value_Float))/*Float.sk:32*/
      {
        _out = 1;
        return;
      }
    }
    _out = 0;
    return;
  }
  /* END PACKAGE Float*/
}
/* BEGIN PACKAGE Map_Entry*/
package Map_Entry{
  /* END PACKAGE Map_Entry*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE KerberosKey*/
package KerberosKey{
  /*KerberosKey.sk:12*/
  
void getEncoded (Object self, ref Array_char _out)/*KerberosKey.sk:12*/
  {
    _out = null;
    _out = self.key_KerberosKey;
    return;
  }
  /* END PACKAGE KerberosKey*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:4*/
  
void AbstractQueue (ref int _out)/*meta.sk:4*/
  {
    _out = 0;
    _out = 27;
    return;
  }
  /*meta.sk:6*/
  
void ArrayDeque (ref int _out)/*meta.sk:6*/
  {
    _out = 0;
    _out = 14;
    return;
  }
  /*meta.sk:7*/
  
void ArrayDeque_DequeNode (ref int _out)/*meta.sk:7*/
  {
    _out = 0;
    _out = 15;
    return;
  }
  /*meta.sk:8*/
  
void ArrayList (ref int _out)/*meta.sk:8*/
  {
    _out = 0;
    _out = 20;
    return;
  }
  /*meta.sk:9*/
  
void Arrays (ref int _out)/*meta.sk:9*/
  {
    _out = 0;
    _out = 31;
    return;
  }
  /*meta.sk:10*/
  
void Assert (ref int _out)/*meta.sk:10*/
  {
    _out = 0;
    _out = 45;
    return;
  }
  /*meta.sk:11*/
  
void Boolean (ref int _out)/*meta.sk:11*/
  {
    _out = 0;
    _out = 17;
    return;
  }
  /*meta.sk:12*/
  
void BufferedWriter (ref int _out)/*meta.sk:12*/
  {
    _out = 0;
    _out = 38;
    return;
  }
  /*meta.sk:14*/
  
void Character (ref int _out)/*meta.sk:14*/
  {
    _out = 0;
    _out = 21;
    return;
  }
  /*meta.sk:15*/
  
void Cipher (ref int _out)/*meta.sk:15*/
  {
    _out = 0;
    _out = 23;
    return;
  }
  /*meta.sk:16*/
  
void CipherFactory (ref int _out)/*meta.sk:16*/
  {
    _out = 0;
    _out = 5;
    return;
  }
  /*meta.sk:18*/
  
void CryptoCipherFactory (ref int _out)/*meta.sk:18*/
  {
    _out = 0;
    _out = 18;
    return;
  }
  /*meta.sk:19*/
  
void CryptoCipherFactory_CipherProvider (ref int _out)/*meta.sk:19*/
  {
    _out = 0;
    _out = 19;
    return;
  }
  /*meta.sk:21*/
  
void File (ref int _out)/*meta.sk:21*/
  {
    _out = 0;
    _out = 57;
    return;
  }
  /*meta.sk:22*/
  
void FileReaderr (ref int _out)/*meta.sk:22*/
  {
    _out = 0;
    _out = 53;
    return;
  }
  /*meta.sk:23*/
  
void FileWriterr (ref int _out)/*meta.sk:23*/
  {
    _out = 0;
    _out = 48;
    return;
  }
  /*meta.sk:24*/
  
void Float (ref int _out)/*meta.sk:24*/
  {
    _out = 0;
    _out = 11;
    return;
  }
  /*meta.sk:25*/
  
void HashMap (ref int _out)/*meta.sk:25*/
  {
    _out = 0;
    _out = 41;
    return;
  }
  /*meta.sk:26*/
  
void HashMap_Node (ref int _out)/*meta.sk:26*/
  {
    _out = 0;
    _out = 42;
    return;
  }
  /*meta.sk:27*/
  
void HashSet (ref int _out)/*meta.sk:27*/
  {
    _out = 0;
    _out = 29;
    return;
  }
  /*meta.sk:29*/
  
void Integer (ref int _out)/*meta.sk:29*/
  {
    _out = 0;
    _out = 35;
    return;
  }
  /*meta.sk:30*/
  
void IvParameterSpec (ref int _out)/*meta.sk:30*/
  {
    _out = 0;
    _out = 36;
    return;
  }
  /*meta.sk:31*/
  
void JCECipher (ref int _out)/*meta.sk:31*/
  {
    _out = 0;
    _out = 4;
    return;
  }
  /*meta.sk:32*/
  
void KerberosKey (ref int _out)/*meta.sk:32*/
  {
    _out = 0;
    _out = 33;
    return;
  }
  /*meta.sk:34*/
  
void KeyGenerator (ref int _out)/*meta.sk:34*/
  {
    _out = 0;
    _out = 51;
    return;
  }
  /*meta.sk:35*/
  
void KeyStore (ref int _out)/*meta.sk:35*/
  {
    _out = 0;
    _out = 8;
    return;
  }
  /*meta.sk:36*/
  
void LinkedList (ref int _out)/*meta.sk:36*/
  {
    _out = 0;
    _out = 13;
    return;
  }
  /*meta.sk:38*/
  
void Mac (ref int _out)/*meta.sk:38*/
  {
    _out = 0;
    _out = 32;
    return;
  }
  /*meta.sk:41*/
  
void Number (ref int _out)/*meta.sk:41*/
  {
    _out = 0;
    _out = 52;
    return;
  }
  /*meta.sk:42*/
  
void Object (ref int _out)/*meta.sk:42*/
  {
    _out = 0;
    _out = 1;
    return;
  }
  /*meta.sk:43*/
  
void OpenSSLCipher (ref int _out)/*meta.sk:43*/
  {
    _out = 0;
    _out = 6;
    return;
  }
  /*meta.sk:45*/
  
void Properties (ref int _out)/*meta.sk:45*/
  {
    _out = 0;
    _out = 56;
    return;
  }
  /*meta.sk:47*/
  
void Scanner (ref int _out)/*meta.sk:47*/
  {
    _out = 0;
    _out = 7;
    return;
  }
  /*meta.sk:49*/
  
void SecretKeySpec (ref int _out)/*meta.sk:49*/
  {
    _out = 0;
    _out = 50;
    return;
  }
  /*meta.sk:50*/
  
void SecureRandom (ref int _out)/*meta.sk:50*/
  {
    _out = 0;
    _out = 54;
    return;
  }
  /*meta.sk:52*/
  
void Stack (ref int _out)/*meta.sk:52*/
  {
    _out = 0;
    _out = 47;
    return;
  }
  /*meta.sk:53*/
  
void String (ref int _out)/*meta.sk:53*/
  {
    _out = 0;
    _out = 49;
    return;
  }
  /*meta.sk:54*/
  
void StringBuffer (ref int _out)/*meta.sk:54*/
  {
    _out = 0;
    _out = 22;
    return;
  }
  /*meta.sk:55*/
  
void StringBuilder (ref int _out)/*meta.sk:55*/
  {
    _out = 0;
    _out = 30;
    return;
  }
  /*meta.sk:56*/
  
void System (ref int _out)/*meta.sk:56*/
  {
    _out = 0;
    _out = 16;
    return;
  }
  /*meta.sk:57*/
  
void Tester (ref int _out)/*meta.sk:57*/
  {
    _out = 0;
    _out = 2;
    return;
  }
  /*meta.sk:58*/
  
void TreeMap (ref int _out)/*meta.sk:58*/
  {
    _out = 0;
    _out = 24;
    return;
  }
  /*meta.sk:59*/
  
void TreeSet (ref int _out)/*meta.sk:59*/
  {
    _out = 0;
    _out = 46;
    return;
  }
  /*meta.sk:60*/
  
void Utils (ref int _out)/*meta.sk:60*/
  {
    _out = 0;
    _out = 55;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object file_Scanner;
      Object CLASSES_KEY_CryptoCipherFactory;
      Object file_FileReaderr;
      Array_Object elementData_HashMap;
      int numPairs_HashMap;
      int capacity_HashMap;
      float value_Float;
      Object writer_BufferedWriter;
      Array_Object set_HashSet;
      int capacity_HashSet;
      int size_HashSet;
      bit bool_Boolean;
      Array_char _value_String;
      int _count_String;
      Array_Object set_TreeSet;
      int capacity_TreeSet;
      int size_TreeSet;
      Array_char _value_StringBuilder;
      int _count_StringBuilder;
      Array_Object elementData_Stack;
      int size_Stack;
      int capacity_Stack;
      Object currentHead_ArrayDeque;
      Object currentTail_ArrayDeque;
      int size_ArrayDeque;
      Object fname_FileWriterr;
      char value_Character;
      int value_Integer;
      Array_char key_SecretKeySpec;
      Object val_ArrayDeque_DequeNode;
      Object prev_ArrayDeque_DequeNode;
      Object next_ArrayDeque_DequeNode;
      Object type_Cipher;
      Object key_Cipher;
      int mode_Cipher;
      int ENCRYPT_MODE_Cipher;
      int DECRYPT_MODE_Cipher;
      Object instance_KeyStore;
      Array_Object elementData_ArrayList;
      int DEFAULT_CAPACITY_ArrayList;
      int capacity_ArrayList;
      int size_ArrayList;
      Object mode_KeyGenerator;
      Object transformation_JCECipher;
      Object algorithm_JCECipher;
      Object provider_JCECipher;
      Array_Object elementData_AbstractQueue;
      int size_AbstractQueue;
      int capacity_AbstractQueue;
      Object transformation_OpenSSLCipher;
      Object algorithm_OpenSSLCipher;
      Array_char _value_StringBuffer;
      int _count_StringBuffer;
      Object fname_File;
      int size_File;
      Object map_Properties;
      Object key_HashMap_Node;
      Object value_HashMap_Node;
      int hash_HashMap_Node;
      Array_char key_KerberosKey;
      int KEYSIZE_KerberosKey;
  }
  /*Object.sk:7*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:7*/
  {
    _out = null;
    _out = self;
    return;
  }
  /*Object.sk:29*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Object.sk:29*/
  {
    _out = 0;
    _out = self == obj;
    return;
  }
  /*Object.sk:33*/
  
void hashCode (Object self, ref int _out)/*Object.sk:33*/
  {
    _out = 0;
    _out = 0;
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Arrays*/
package Arrays{
  /*Arrays.sk:20*/
  
void arraysEquals_byte_byte (Array_char b1, Array_char b2, ref bit _out)/*Arrays.sk:20*/
  {
    _out = 0;
    if((b1.length) == (b2.length))/*Arrays.sk:21*/
    {
      bit __sa23 = 0 < (b1.length);
      int i = 0;
      while(__sa23)
      {
        {
          {
            {
              if((b1.A[i]) != (b2.A[i]))/*Arrays.sk:23*/
              {
                _out = 0;
                return;
              }
              i = i + 1;
              __sa23 = i < (b1.length);
            }
          }
        }
      }
    }
    else
    {
      _out = 0;
      return;
    }
    _out = 1;
    return;
  }
  /*Arrays.sk:7*/
  
void copyOf_byte_int (Array_char in, int len, ref Array_char _out)/*Arrays.sk:7*/
  {
    _out = null;
    _out = new Array_char@array(length=len);
    for(int i = 0; i < len; i = i + 1)/*Canonical*/
    {
      if(i >= (in.length))/*Arrays.sk:10*/
      {
        _out.A[i] = 0;
      }
      else
      {
        _out.A[i] = in.A[i];
      }
    }
    return;
  }
  /* END PACKAGE Arrays*/
}
/* BEGIN PACKAGE Map*/
package Map{
  /* END PACKAGE Map*/
}
/* BEGIN PACKAGE AlgorithmParameterSpec*/
package AlgorithmParameterSpec{
  /* END PACKAGE AlgorithmParameterSpec*/
}
/* BEGIN PACKAGE File*/
package File{
  /* END PACKAGE File*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
/* BEGIN PACKAGE Scanner*/
package Scanner{
  /* END PACKAGE Scanner*/
}
/* BEGIN PACKAGE JCECipher*/
package JCECipher{
  /*JCECipher.sk:7*/
  
void JCECipher_JCECipher_String_String_String (Object self, Object provider, Object algorithm, Object transformation, ref Object _out)/*JCECipher.sk:7*/
  {
    _out = null;
    self.provider_JCECipher = provider;
    self.algorithm_JCECipher = algorithm;
    self.transformation_JCECipher = transformation;
    _out = self;
    return;
  }
  /*JCECipher.sk:34*/
  
void decrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:34*/
  {
    _out = null;
    Array_char@array _out_s4254 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 0, data, key, IV, _out_s4254);
    _out = _out_s4254;
    return;
  }
  /*JCECipher.sk:30*/
  
void encrypt_byte_Key_byte (Object self, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:30*/
  {
    _out = null;
    Array_char@array _out_s4304 = null;
    translate_boolean_byte_Key_byte@JCECipher(self, 1, data, key, IV, _out_s4304);
    _out = _out_s4304;
    return;
  }
  /*JCECipher.sk:14*/
  
void getCipher_boolean_Key_byte (Object self, bit isEncryption, Object key, Array_char IV, ref Object _out)/*JCECipher.sk:14*/
  {
    _out = null;
    Object@Object cipher_s4280 = null;
    getInstance_String_String@Cipher(self.transformation_JCECipher, self.provider_JCECipher, cipher_s4280);
    _out = cipher_s4280;
    int keyValue_s4282 = 0;
    SecretKeySpec@meta(keyValue_s4282);
    int keyValue_s4284 = 0;
    SecretKeySpec@meta(keyValue_s4284);
    Array_char@array _pac_sc_s4285 = null;
    if((key.__cid) == keyValue_s4284)/*JCECipher.sk:17*/
    {
      Array_char@array keyValue_s4287 = null;
      getEncoded@SecretKeySpec(key, keyValue_s4287);
      _pac_sc_s4285 = keyValue_s4287;
    }
    else
    {
      int keyValue_s4289 = 0;
      KerberosKey@meta(keyValue_s4289);
      Array_char@array _pac_sc_s4290 = null;
      if((key.__cid) == keyValue_s4289)/*JCECipher.sk:17*/
      {
        Array_char@array keyValue_s4292 = null;
        getEncoded@KerberosKey(key, keyValue_s4292);
        _pac_sc_s4290 = keyValue_s4292;
      }
      else
      {
        _pac_sc_s4290 = null;
      }
      _pac_sc_s4285 = _pac_sc_s4290;
    }
    Object@Object keyValue_s4294 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=keyValue_s4282), _pac_sc_s4285, self.algorithm_JCECipher, keyValue_s4294);
    int IVspec_s4296 = 0;
    IvParameterSpec@meta(IVspec_s4296);
    Object@Object IVspec_s4298 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=IVspec_s4296), IV, IVspec_s4298);
    if(isEncryption)/*JCECipher.sk:19*/
    {
      int _out_s4300 = 0;
      Cipher@meta(_out_s4300);
      if((cipher_s4280.__cid) == _out_s4300)/*JCECipher.sk:20*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4280, 1, keyValue_s4294, IVspec_s4298);
      }
    }
    else
    {
      int _out_s4302 = 0;
      Cipher@meta(_out_s4302);
      if((cipher_s4280.__cid) == _out_s4302)/*JCECipher.sk:24*/
      {
        init_int_SecretKey_AlgorithmParameterSpec@Cipher(cipher_s4280, 2, keyValue_s4294, IVspec_s4298);
      }
    }
    return;
  }
  /*JCECipher.sk:38*/
  
void translate_boolean_byte_Key_byte (Object self, bit isEncryption, Array_char data, Object key, Array_char IV, ref Array_char _out)/*JCECipher.sk:38*/
  {
    _out = null;
    Object@Object cipher_s4256 = null;
    getCipher_boolean_Key_byte@JCECipher(self, isEncryption, key, IV, cipher_s4256);
    int output_s4258 = 0;
    Cipher@meta(output_s4258);
    int _pac_sc_s4259 = 0;
    if((cipher_s4256.__cid) == output_s4258)/*JCECipher.sk:40*/
    {
      int output_s4261 = 0;
      getOutputSize_int@Cipher(cipher_s4256, data.length, output_s4261);
      _pac_sc_s4259 = output_s4261;
    }
    else
    {
      _pac_sc_s4259 = 0;
    }
    _out = new Array_char@array(length=_pac_sc_s4259);
    int updateBytes_s4263 = 0;
    Cipher@meta(updateBytes_s4263);
    int _pac_sc_s4264 = 0;
    if((cipher_s4256.__cid) == updateBytes_s4263)/*JCECipher.sk:41*/
    {
      int updateBytes_s4266 = 0;
      update_byte_int_int_byte_int@Cipher(cipher_s4256, data, 0, data.length, _out, 0, updateBytes_s4266);
      _pac_sc_s4264 = updateBytes_s4266;
    }
    else
    {
      _pac_sc_s4264 = 0;
    }
    int finalBytes_s4268 = 0;
    Cipher@meta(finalBytes_s4268);
    int _pac_sc_s4269 = 0;
    if((cipher_s4256.__cid) == finalBytes_s4268)/*JCECipher.sk:42*/
    {
      int finalBytes_s4271 = 0;
      doFinal_byte_int_int_byte_int@Cipher(cipher_s4256, data, 0, 0, _out, _pac_sc_s4264, finalBytes_s4271);
      _pac_sc_s4269 = finalBytes_s4271;
    }
    else
    {
      _pac_sc_s4269 = 0;
    }
    int output_s4273 = 0;
    Cipher@meta(output_s4273);
    Array_char@array _pac_sc_s4274 = null;
    if((cipher_s4256.__cid) == output_s4273)/*JCECipher.sk:43*/
    {
      Array_char@array output_s4276 = null;
      doFinal_byte@Cipher(cipher_s4256, data, output_s4276);
      _pac_sc_s4274 = output_s4276;
    }
    else
    {
      _pac_sc_s4274 = null;
    }
    _out = _pac_sc_s4274;
    if((_pac_sc_s4264 + _pac_sc_s4269) < (_pac_sc_s4274.length))/*JCECipher.sk:44*/
    {
      Array_char@array output_s4278 = null;
      copyOf_byte_int@Arrays(_pac_sc_s4274, _pac_sc_s4264 + _pac_sc_s4269, output_s4278);
      _out = output_s4278;
    }
    return;
  }
  /* END PACKAGE JCECipher*/
}
/* BEGIN PACKAGE Tester*/
package Tester{
  /*Tester.sk:7*/
  
void _main (ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4716, ref global Object@Object self0__HashMap_Node_s4726)/*Tester.sk:7*/
  {
    int self_s4306 = 0;
    Object@meta(self_s4306);
    Object@Object self_s4308 = null;
    Object_Object@Object(new Object@Object(__cid=self_s4306), self_s4308);
    testOpenSSL@Tester(self_s4308, DEFAULT_INITIAL_CAPACITY__HashMap_s4716, self0__HashMap_Node_s4726);
    testJCECipher@Tester(self_s4308);
  }
  /*Tester.sk:7*/
  
void main__Wrapper ()  implements main__WrapperNospec/*Tester.sk:7*/
  {
    global int DEFAULT_INITIAL_CAPACITY__HashMap_s4714 = 0;
    glblInit_DEFAULT_INITIAL_CAPACITY__HashMap_s4756@HashMap(DEFAULT_INITIAL_CAPACITY__HashMap_s4714);
    global Object@Object self0__HashMap_Node_s4728 = null;
    _main(DEFAULT_INITIAL_CAPACITY__HashMap_s4714, self0__HashMap_Node_s4728);
  }
  /*Tester.sk:7*/
  
void main__WrapperNospec ()/*Tester.sk:7*/
  { }
  /*Tester.sk:29*/
  
void testJCECipher (Object self)/*Tester.sk:29*/
  {
    int oc_s4310 = 0;
    JCECipher@meta(oc_s4310);
    int oc_s4312 = 0;
    String@meta(oc_s4312);
    Object@Object oc_s4314 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4312), new Array_char@array(length=9, A={'P','R','O','V','I','D','E','R','\0'}), 0, 8, oc_s4314);
    int oc_s4316 = 0;
    String@meta(oc_s4316);
    Object@Object oc_s4318 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4316), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4318);
    int oc_s4320 = 0;
    String@meta(oc_s4320);
    Object@Object oc_s4322 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4320), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4322);
    Object@Object oc_s4324 = null;
    JCECipher_JCECipher_String_String_String@JCECipher(new Object@Object(__cid=oc_s4310), oc_s4314, oc_s4318, oc_s4322, oc_s4324);
    Array_char@array plaintext = new Array_char@array(length=32);
    Array_char@array IV = new Array_char@array(length=8);
    Array_char@array key = new Array_char@array(length=128);
    for(int i = 0; i < 128; i = i + 1)/*Canonical*/
    {
      key.A[i] = i;
      if(i < 32)/*Tester.sk:36*/
      {
        plaintext.A[i] = i;
      }
      if(i < 8)/*Tester.sk:37*/
      {
        IV.A[i] = i;
      }
    }
    int sk_s4326 = 0;
    SecretKeySpec@meta(sk_s4326);
    int sk_s4328 = 0;
    String@meta(sk_s4328);
    Object@Object sk_s4330 = null;
    String_String_char_int_int@String(new Object@Object(__cid=sk_s4328), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4330);
    Object@Object sk_s4332 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4326), key, sk_s4330, sk_s4332);
    int cipherText_s4334 = 0;
    JCECipher@meta(cipherText_s4334);
    Array_char@array _pac_sc_s4335 = null;
    if((oc_s4324.__cid) == cipherText_s4334)/*Tester.sk:40*/
    {
      Array_char@array cipherText_s4337 = null;
      encrypt_byte_Key_byte@JCECipher(oc_s4324, plaintext, sk_s4332, IV, cipherText_s4337);
      _pac_sc_s4335 = cipherText_s4337;
    }
    else
    {
      _pac_sc_s4335 = null;
    }
    int plaintext2_s4339 = 0;
    JCECipher@meta(plaintext2_s4339);
    Array_char@array _pac_sc_s4340 = null;
    if((oc_s4324.__cid) == plaintext2_s4339)/*Tester.sk:41*/
    {
      Array_char@array plaintext2_s4342 = null;
      decrypt_byte_Key_byte@JCECipher(oc_s4324, _pac_sc_s4335, sk_s4332, IV, plaintext2_s4342);
      _pac_sc_s4340 = plaintext2_s4342;
    }
    else
    {
      _pac_sc_s4340 = null;
    }
    bit _out_s4344 = 0;
    arraysEquals_byte_byte@Arrays(plaintext, _pac_sc_s4340, _out_s4344);
    assert (_out_s4344); //Assert at Tester.sk:42 (0)
  }
  /*Tester.sk:13*/
  
void testOpenSSL (Object self, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4717, ref global Object@Object self0__HashMap_Node_s4720)/*Tester.sk:13*/
  {
    int oc_s4346 = 0;
    OpenSSLCipher@meta(oc_s4346);
    int oc_s4348 = 0;
    String@meta(oc_s4348);
    Object@Object oc_s4350 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4348), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, oc_s4350);
    int oc_s4352 = 0;
    String@meta(oc_s4352);
    Object@Object oc_s4354 = null;
    String_String_char_int_int@String(new Object@Object(__cid=oc_s4352), new Array_char@array(length=15, A={'T','R','A','N','S','F','O','R','M','A','T','I','O','N','\0'}), 0, 14, oc_s4354);
    Object@Object oc_s4356 = null;
    OpenSSLCipher_OpenSSLCipher_String_String@OpenSSLCipher(new Object@Object(__cid=oc_s4346), oc_s4350, oc_s4354, oc_s4356);
    Array_char@array plaintext = new Array_char@array(length=32);
    Array_char@array IV = new Array_char@array(length=8);
    Array_char@array key = new Array_char@array(length=128);
    for(int i = 0; i < 128; i = i + 1)/*Canonical*/
    {
      key.A[i] = i;
      if(i < 32)/*Tester.sk:20*/
      {
        plaintext.A[i] = i;
      }
      if(i < 8)/*Tester.sk:21*/
      {
        IV.A[i] = i;
      }
    }
    int sk_s4358 = 0;
    SecretKeySpec@meta(sk_s4358);
    int sk_s4360 = 0;
    String@meta(sk_s4360);
    Object@Object sk_s4362 = null;
    String_String_char_int_int@String(new Object@Object(__cid=sk_s4360), new Array_char@array(length=4, A={'A','E','S','\0'}), 0, 3, sk_s4362);
    Object@Object sk_s4364 = null;
    SecretKeySpec_SecretKeySpec_byte_String@SecretKeySpec(new Object@Object(__cid=sk_s4358), key, sk_s4362, sk_s4364);
    int cipherText_s4366 = 0;
    OpenSSLCipher@meta(cipherText_s4366);
    Array_char@array _pac_sc_s4367 = null;
    if((oc_s4356.__cid) == cipherText_s4366)/*Tester.sk:24*/
    {
      Array_char@array cipherText_s4369 = null;
      encrypt_byte_Key_byte@OpenSSLCipher(oc_s4356, plaintext, sk_s4364, IV, cipherText_s4369, DEFAULT_INITIAL_CAPACITY__HashMap_s4717, self0__HashMap_Node_s4720);
      _pac_sc_s4367 = cipherText_s4369;
    }
    else
    {
      _pac_sc_s4367 = null;
    }
    int plaintext2_s4371 = 0;
    OpenSSLCipher@meta(plaintext2_s4371);
    Array_char@array _pac_sc_s4372 = null;
    if((oc_s4356.__cid) == plaintext2_s4371)/*Tester.sk:25*/
    {
      Array_char@array plaintext2_s4374 = null;
      decrypt_byte_Key_byte@OpenSSLCipher(oc_s4356, _pac_sc_s4367, sk_s4364, IV, plaintext2_s4374, DEFAULT_INITIAL_CAPACITY__HashMap_s4717, self0__HashMap_Node_s4720);
      _pac_sc_s4372 = plaintext2_s4374;
    }
    else
    {
      _pac_sc_s4372 = null;
    }
    bit _out_s4376 = 0;
    arraysEquals_byte_byte@Arrays(plaintext, _pac_sc_s4372, _out_s4376);
    assert (_out_s4376); //Assert at Tester.sk:26 (0)
  }
  /* END PACKAGE Tester*/
}
/* BEGIN PACKAGE ICipher*/
package ICipher{
  /* END PACKAGE ICipher*/
}
/* BEGIN PACKAGE Set*/
package Set{
  /* END PACKAGE Set*/
}
/* BEGIN PACKAGE StringBuilder*/
package StringBuilder{
  /* END PACKAGE StringBuilder*/
}
/* BEGIN PACKAGE CryptoCipherFactory_CipherProvider*/
package CryptoCipherFactory_CipherProvider{
  /*CryptoC..ovider.sk:10*/
  
void getClassName (ref Object _out)/*CryptoC..ovider.sk:10*/
  {
    _out = null;
    int _out_s4387 = 0;
    String@meta(_out_s4387);
    Object@Object _out_s4389 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s4387), new Array_char@array(length=8, A={'O','P','E','N','S','S','L','\0'}), 0, 7, _out_s4389);
    _out = _out_s4389;
    return;
  }
  /* END PACKAGE CryptoCipherFactory_CipherProvider*/
}
/* BEGIN PACKAGE Properties*/
package Properties{
  /*Properties.sk:3*/
  
void Properties_Properties (Object self, ref Object _out, ref global int DEFAULT_INITIAL_CAPACITY__HashMap_s4742)/*Properties.sk:3*/
  {
    _out = null;
    int _out_s4396 = 0;
    HashMap@meta(_out_s4396);
    Object@Object _out_s4398 = null;
    HashMap_HashMap@HashMap(new Object@Object(__cid=_out_s4396), _out_s4398, DEFAULT_INITIAL_CAPACITY__HashMap_s4742);
    self.map_Properties = _out_s4398;
    _out = self;
    return;
  }
  /*Properties.sk:8*/
  
void setProperty_String_String (Object self, Object key, Object value, ref global Object@Object self0__HashMap_Node_s4719)/*Properties.sk:8*/
  {
    int _out_s4391 = 0;
    HashMap@meta(_out_s4391);
    if((self.map_Properties.__cid) == _out_s4391)/*Properties.sk:9*/
    {
      Object@Object _out_s4394 = null;
      put_K_V@HashMap(self.map_Properties, key, value, _out_s4394, self0__HashMap_Node_s4719);
    }
  }
  /* END PACKAGE Properties*/
}
/* BEGIN PACKAGE ArrayDeque_DequeNode*/
package ArrayDeque_DequeNode{
  /* END PACKAGE ArrayDeque_DequeNode*/
}
/* BEGIN PACKAGE System*/
package System{
  /* END PACKAGE System*/
}
/* BEGIN PACKAGE BufferedWriter*/
package BufferedWriter{
  /* END PACKAGE BufferedWriter*/
}
/* BEGIN PACKAGE AbstractQueue*/
package AbstractQueue{
  /* END PACKAGE AbstractQueue*/
}
/* BEGIN PACKAGE Number*/
package Number{
  /*Number.sk:7*/
  
uninterp void intValue (Object self, ref int _out)/*Number.sk:7*/
  /* END PACKAGE Number*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      int length;
      bit[length] A;
  }
  struct Array_char {
      int length;
      char[length] A;
  }
  struct Array_int {
      int length;
      int[length] A;
  }
  struct Array_float {
      int length;
      float[length] A;
  }
  struct Array_double {
      int length;
      double[length] A;
  }
  struct Array_Object {
      int length;
      Object[length] A;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE Queue*/
package Queue{
  /* END PACKAGE Queue*/
}
/* BEGIN PACKAGE KeyGenerator*/
package KeyGenerator{
  /* END PACKAGE KeyGenerator*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE TreeMap*/
package TreeMap{
  /* END PACKAGE TreeMap*/
}
/* BEGIN PACKAGE KeyStore*/
package KeyStore{
  /* END PACKAGE KeyStore*/
}
/* BEGIN PACKAGE Deque*/
package Deque{
  /* END PACKAGE Deque*/
}
/* BEGIN PACKAGE ArrayDeque*/
package ArrayDeque{
  /* END PACKAGE ArrayDeque*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:32*/
  
void equals_Object (Object self, Object obj, ref bit _out)/*Integer.sk:32*/
  {
    _out = 0;
    int _out_s4517 = 0;
    Integer@meta(_out_s4517);
    if((obj.__cid) == _out_s4517)/*Integer.sk:33*/
    {
      int _out_s4519 = 0;
      Integer@meta(_out_s4519);
      int _pac_sc_s4520 = 0;
      if((obj.__cid) == _out_s4519)/*Integer.sk:34*/
      {
        int _out_s4522 = 0;
        intValue@Integer(obj, _out_s4522);
        _pac_sc_s4520 = _out_s4522;
      }
      else
      {
        _pac_sc_s4520 = 0;
      }
      _out = (self.value_Integer) == _pac_sc_s4520;
      return;
    }
    _out = 0;
    return;
  }
  /*Integer.sk:7*/
  
void glblInit_MAX_VALUE__Integer_s4824 (ref int MAX_VALUE__Integer_s4823)/*Integer.sk:7*/
  {
    MAX_VALUE__Integer_s4823 = 2147483647;
  }
  /*Integer.sk:3*/
  
void glblInit_MIN_VALUE__Integer_s4828 (ref int MIN_VALUE__Integer_s4827)/*Integer.sk:3*/
  {
    MIN_VALUE__Integer_s4827 = -2147483648;
  }
  /*Integer.sk:69*/
  
void hashCode (Object self, ref int _out)/*Integer.sk:69*/
  {
    _out = 0;
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:20*/
  
void intValue (Object self, ref int _out)/*Integer.sk:20*/
  {
    _out = 0;
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE StringBuffer*/
package StringBuffer{
  /* END PACKAGE StringBuffer*/
}
/* BEGIN PACKAGE Utils*/
package Utils{
  /*Utils.sk:7*/
  
void getCipherInstance_String_Properties (Object trans, Object props, ref Object _out)/*Utils.sk:7*/
  {
    _out = null;
    int _out_s4550 = 0;
    Cipher@meta(_out_s4550);
    Object@Object _out_s4552 = null;
    Cipher_Cipher_String@Cipher(new Object@Object(__cid=_out_s4550), trans, _out_s4552);
    _out = _out_s4552;
    return;
  }
  /* END PACKAGE Utils*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Array_char val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = null;
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  /*Cipher.sk:7*/
  
void Cipher_Cipher_String (Object self, Object type, ref Object _out)/*Cipher.sk:7*/
  {
    _out = null;
    self.type_Cipher = type;
    self.ENCRYPT_MODE_Cipher = 1;
    self.DECRYPT_MODE_Cipher = 2;
    _out = self;
    return;
  }
  /*Cipher.sk:37*/
  
void doFinal_byte (Object self, Array_char text, ref Array_char _out)/*Cipher.sk:37*/
  {
    _out = null;
    int k_s4554 = 0;
    SecretKeySpec@meta(k_s4554);
    Array_char@array _pac_sc_s4555 = null;
    if((self.key_Cipher.__cid) == k_s4554)/*Cipher.sk:38*/
    {
      Array_char@array k_s4557 = null;
      getEncoded@SecretKeySpec(self.key_Cipher, k_s4557);
      _pac_sc_s4555 = k_s4557;
    }
    else
    {
      int k_s4559 = 0;
      KerberosKey@meta(k_s4559);
      Array_char@array _pac_sc_s4560 = null;
      if((self.key_Cipher.__cid) == k_s4559)/*Cipher.sk:38*/
      {
        Array_char@array k_s4562 = null;
        getEncoded@KerberosKey(self.key_Cipher, k_s4562);
        _pac_sc_s4560 = k_s4562;
      }
      else
      {
        _pac_sc_s4560 = null;
      }
      _pac_sc_s4555 = _pac_sc_s4560;
    }
    _out = new Array_char@array(length=text.length);
    if((_pac_sc_s4555.length) == 0)/*Cipher.sk:40*/
    {
      return;
    }
    if((self.mode_Cipher) == (self.ENCRYPT_MODE_Cipher))/*Cipher.sk:43*/
    {
      bit __sa27 = 0 < (text.length);
      int i = 0;
      while(__sa27)
      {
        {
          {
            {
              _out.A[i] = (text.A[i]) + (_pac_sc_s4555.A[i % (_pac_sc_s4555.length)]);
              i = i + 1;
              __sa27 = i < (text.length);
            }
          }
        }
      }
    }
    else
    {
      if((self.mode_Cipher) == (self.DECRYPT_MODE_Cipher))/*Cipher.sk:48*/
      {
        bit __sa28 = 0 < (text.length);
        int i_0 = 0;
        while(__sa28)
        {
          {
            {
              {
                _out.A[i_0] = (text.A[i_0]) - (_pac_sc_s4555.A[i_0 % (_pac_sc_s4555.length)]);
                i_0 = i_0 + 1;
                __sa28 = i_0 < (text.length);
              }
            }
          }
        }
      }
    }
    return;
  }
  /*Cipher.sk:64*/
  
void doFinal_byte_int_int_byte_int (Object self, Array_char data, int i, int l, Array_char out_0, int j, ref int _out)/*Cipher.sk:64*/
  {
    _out = 0;
    Array_char@array out_s4564 = null;
    doFinal_byte@Cipher(self, data, out_s4564);
    _out = data.length;
    return;
  }
  /*Cipher.sk:18*/
  
void getInstance_String_String (Object type, Object extra, ref Object _out)/*Cipher.sk:18*/
  {
    _out = null;
    int _out_s4566 = 0;
    Cipher@meta(_out_s4566);
    Object@Object _out_s4568 = null;
    Cipher_Cipher_String(new Object@Object(__cid=_out_s4566), type, _out_s4568);
    _out = _out_s4568;
    return;
  }
  /*Cipher.sk:56*/
  
void getOutputSize_int (Object self, int length, ref int _out)/*Cipher.sk:56*/
  {
    _out = 0;
    _out = length;
    return;
  }
  /*Cipher.sk:32*/
  
void init_int_SecretKey_AlgorithmParameterSpec (Object self, int opmode, Object key, Object i)/*Cipher.sk:32*/
  {
    self.key_Cipher = key;
    self.mode_Cipher = opmode;
  }
  /*Cipher.sk:60*/
  
void update_byte_int_int_byte_int (Object self, Array_char data, int i, int l, Array_char out, int j, ref int _out)/*Cipher.sk:60*/
  {
    _out = 0;
    _out = 0;
    return;
  }
  /* END PACKAGE Cipher*/
}
[SKETCH] DONE
Total time = 5813
