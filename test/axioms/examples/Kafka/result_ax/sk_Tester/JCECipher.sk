package JCECipher;

Object JCECipher_JCECipher(Object self) {
    return self;
}

Object JCECipher_JCECipher_String_String_String(Object self, Object provider, Object algorithm, Object transformation) {
  self.provider_JCECipher = provider;
  self.algorithm_JCECipher = algorithm;
  self.transformation_JCECipher = transformation;
  return self;
}

Object getCipher_boolean_SecretKeySpec_byte(Object self, Object isEncryption, Object key, Object IV) {
  Object cipher;
  cipher = getInstance_String_String@Cipher(self.transformation_JCECipher, self.provider_JCECipher);
  Object keyValue = SecretKeySpec_Object_byte_String((key.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? getEncoded_Object@SecretKeySpec(key) : null), self.algorithm_JCECipher);
  Object IVspec = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), IV);
  if (isEncryption._bit) {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=1)), keyValue, IVspec); }
    else { 0; }; cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? initb_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=1)), keyValue, IVspec) : null);
  }
  else {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=2)), keyValue, IVspec); }
    else { 0; }; cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? initb_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=2)), keyValue, IVspec) : null);
  }
  return cipher;
}

Object encrypt_byte_SecretKeySpec_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_SecretKeySpec_byte@JCECipher(self, (new Object(__cid=-4, _bit=true)), data, key, IV);
}

Object decrypt_byte_SecretKeySpec_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_SecretKeySpec_byte@JCECipher(self, (new Object(__cid=-4, _bit=false)), data, key, IV);
}

Object translate_boolean_byte_SecretKeySpec_byte(Object self, Object isEncryption, Object data, Object key, Object IV) {
  Object cipher = getCipher_boolean_SecretKeySpec_byte@JCECipher(self, isEncryption, key, IV);
  Object output = Wrap_Array_char(new Array_char(length=(cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? getOutputSize_Object_int@Cipher(cipher, data._array_object.length) : null)));
  Object updateBytes = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? update_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), data._array_object.length, output, (new Object(__cid=-2, _int=0))) : null); cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? updateb_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), data._array_object.length, output, (new Object(__cid=-2, _int=0))) : null);
  Object finalBytes = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), (new Object(__cid=-2, _int=0)), output, updateBytes) : null); cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinalb_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=0)), (new Object(__cid=-2, _int=0)), output, updateBytes) : null);
  output = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_Object_byte@Cipher(cipher, data) : null); cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinalb_Object_byte@Cipher(cipher, data) : null);
  if (updateBytes._int + finalBytes._int < output._array_object.length._int) {
    output = ;
  }
  return output;
}

