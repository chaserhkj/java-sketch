package OpenSSLCipher;

Object OpenSSLCipher_OpenSSLCipher(Object self) {
    return self;
}

Object OpenSSLCipher_OpenSSLCipher_String_String(Object self, Object algorithm, Object transformation) {
  self.algorithm_OpenSSLCipher = algorithm;
  self.transformation_OpenSSLCipher = transformation;
  return self;
}

Object getCipher_boolean_SecretKeySpec_byte(Object self, Object isEncryption, Object key, Object IV) {
  Object properties = Properties_Properties(new Object(__cid=Properties()));
  if (properties.__cid == (new Object(__cid=-2, _int=Properties()))._int) { setProperty_String_String@Properties(properties, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=11+1), A="CLASSES_KEY")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=11)), getClassName@CryptoCipherFactory_CipherProvider()); }
  else { 0; };
  Object cipher;
  cipher = getCipherInstance_String_Properties@Utils(self.transformation_OpenSSLCipher, properties);
  Object keyValue = SecretKeySpec_SecretKeySpec();
  Object IVspec = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), IV);
  if (isEncryption._bit) {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=??)), keyValue, IVspec); }
    else { 0; }; cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? initb_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=??)), keyValue, IVspec) : null);
  }
  else {
    if (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=??)), keyValue, IVspec); }
    else { 0; }; cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? initb_Object_int_SecretKeySpec_AlgorithmParameterSpec@Cipher(cipher, (new Object(__cid=-2, _int=??)), keyValue, IVspec) : null);
  }
  return cipher;
}

Object encrypt_byte_SecretKeySpec_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_SecretKeySpec_byte@OpenSSLCipher(self, (new Object(__cid=-4, _bit=true)), data, key, IV);
}

Object decrypt_byte_SecretKeySpec_byte(Object self, Object data, Object key, Object IV) {
  return translate_boolean_byte_SecretKeySpec_byte@OpenSSLCipher(self, (new Object(__cid=-4, _bit=false)), data, key, IV);
}

generator Object genCipherText_byte_boolean_SecretKeySpec_byte(Object self, Object data, Object isEncryption, Object key, Object IV) {
  Object cipherText;
  Object updateBytes = (new Object(__cid=-2, _int=0));
  Object finalBytes = (new Object(__cid=-2, _int=0));
  Object cipher;

  if ((new Object(__cid=-4, _bit=??))._bit) {
    cipher = getCipher_boolean_SecretKeySpec_byte@JCECipher(self, isEncryption, key, IV);
  }
  if ((new Object(__cid=-4, _bit=??))._bit) {
    updateBytes = xform_update_Cipher_byte_int_int_byte_int(cipher._cipher, data, (new Object(__cid=-2, _int=??)), new Object(__cid=-2, _int=??), cipherText, (new Object(__cid=-2, _int=??)));
    cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? updateb_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=??)), new Object(__cid=-2, _int=??), cipherText, (new Object(__cid=-2, _int=??))) : null);
  }
  if ((new Object(__cid=-4, _bit=??))._bit) {
    finalBytes = xform_doFinale_Cipher_byte_int_int_byte_int(cipher._cipher, data, (new Object(__cid=-2, _int=??)), (new Object(__cid=-2, _int=??)), cipherText, updateBytes);
    cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinaleb_Object_byte_int_int_byte_int@Cipher(cipher, data, (new Object(__cid=-2, _int=??)), (new Object(__cid=-2, _int=??)), cipherText, updateBytes) : null);
  }
  if ((new Object(__cid=-4, _bit=??))._bit) {
    if (isEncryption._bit) {
      cipherText = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_Object_Object@Cipher(cipher, data) : null);
      cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinalb_Object_Object@Cipher(cipher, data) : null);
    } else {
      cipherText = xform_doFinal_Cipher_Object(cipher._cipher, data);
      cipher = (cipher.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinalb_Object_Object@Cipher(cipher, data) : null);
    }
  }
  if ((new Object(__cid=-4, _bit=??))._bit) {
    if (!isEncryption._bit) {
      cipherText = copyOf_byte_int@Arrays(cipherText, (new Object(__cid=-2, _int=updateBytes._int + finalBytes._int)));
    }
  }
  if ((new Object(__cid=-4, _bit=??))._bit) {
    cipherText = genCipherText_byte_boolean_SecretKeySpec_byte@JCECipher(self, cipherText, isEncryption, key, IV);
  }
  
  return cipherText;
}


Object translate_boolean_byte_SecretKeySpec_byte(Object self, Object isEncryption, Object data, Object key, Object IV) {
  return genCipherText_byte_boolean_SecretKeySpec_byte@OpenSSLCipher(self, data, isEncryption, key, IV);
}

