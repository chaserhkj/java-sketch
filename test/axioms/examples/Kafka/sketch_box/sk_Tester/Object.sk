package Object;

Object Object_Object(Object self) {
    return self;
}

Object equals_Object_Object(Object a, Object b) {
  if (a == null) {
    if (b == null) {
      return (new Object(__cid=-4, _bit=true));
    }
    return (new Object(__cid=-4, _bit=false));
  }
  return (a.__cid == (new Object(__cid=-2, _int=Byte()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=CryptoCipherFactory_CipherProvider()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=OpenSSLCipher()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Character()))._int ? equals_Object@Character(a, b) : a.__cid == (new Object(__cid=-2, _int=Assert()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Mac()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Properties()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=IvParameterSpec()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=CryptoCipherFactory()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(a, b) : a.__cid == (new Object(__cid=-2, _int=SecretKeySpec()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=CipherFactory()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Tester()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=JCECipher()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(a, b) : a.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Boolean()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Utils()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Arrays()))._int ? equals_Object@Object(a, b) : a.__cid == (new Object(__cid=-2, _int=Object()))._int ? equals_Object@Object(a, b) : null);
}

Object equals_Object(Object self, Object obj) {
  return (new Object(__cid=-4, _bit=self == obj));
}

Object hashCode(Object self) {
  return (new Object(__cid=-2, _int=0));
}

struct Object {
  int            __cid;
  Object         bool_Boolean;
  Object         value_Integer;
  Object         transformation_JCECipher;
  Object         algorithm_JCECipher;
  Object         provider_JCECipher;
  Object         _value_String;
  Object         _count_String;
  Object         CLASSES_KEY_CryptoCipherFactory;
  Object         map_Properties;
  Object         value_Character;
  Object         transformation_OpenSSLCipher;
  Object         algorithm_OpenSSLCipher;
  Object         b_Byte;
  Cipher         _cipher;
  HashMap        _hashmap;
  ArrayList      _arraylist;
  SecretKeySpec  _secretkeyspec;
  SecureRandom   _securerandom;
  Mac            _mac;
  Array_bit      _array_bit;
  Array_char     _array_char;
  Array_int      _array_int;
  Array_float    _array_float;
  Array_double   _array_double;
  Array_Object   _array_object;
  bit            _bit;
  char           _char;
  int            _int;
  float          _float;
  double         _double;
}
