package PQueue;

Object PQueue_PQueue(Object self) {
  PQueue_PQueue_int(self, (new Object(__cid=-2, _int=1)));
  return self;
}

Object PQueue_PQueue_int(Object self, Object sz) {
  self.heap_PQueue = (sz);
  self.map_PQueue = HashMap_HashMap();
  self.heapSize_PQueue = (new Object(__cid=-2, _int=0));
  self.heapCapacity_PQueue = (new Object(__cid=-2, _int=0));
  return self;
}

Object size(Object self) {
  return self.heapSize_PQueue;
}

Object isEmpty(Object self) {
  return (new Object(__cid=-4, _bit=self.heapSize_PQueue._int == (new Object(__cid=-2, _int=0))._int));
}

void mapAdd_Integer_int(Object self, Object value, Object index) {
  Object indexTmp = Integer_Integer_int(new Object(__cid=Integer()), index);
  Object set = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.map_PQueue, value) : null);
  if (set == null) {
    set = TreeSet_TreeSet();
    (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Integer@TreeSet(set, indexTmp) : null); set = (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Integer@TreeSet(set, indexTmp) : null);
    (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? put_Object_Object_Object@HashMap(self.map_PQueue, value, set) : null); self.map_PQueue = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? putb_Object_Object_Object@HashMap(self.map_PQueue, value, set) : null);
  }
  else
    (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Integer@TreeSet(set, indexTmp) : null); set = (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Integer@TreeSet(set, indexTmp) : null);
}

void mapRemove_Integer_int(Object self, Object value, Object index) {
  Object indexTmp = Integer_Integer_int(new Object(__cid=Integer()), index);
  Object set = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.map_PQueue, value) : null);
  (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? remove_Object_Integer@TreeSet(set, indexTmp) : null); set = (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? removeb_Object_Integer@TreeSet(set, indexTmp) : null);
  if ((set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? size_Object@TreeSet(set) : null)._int == (new Object(__cid=-2, _int=0))._int) (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? remove_Object_Object@HashMap(self.map_PQueue, value) : null); self.map_PQueue = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? removeb_Object_Object@HashMap(self.map_PQueue, value) : null);
}

Object mapGet_Integer(Object self, Object value) {
  Object set = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.map_PQueue, value) : null);
  if (set != null) return (set.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? last_Object@TreeSet(set) : null);
  return null;
}

Object remove_Integer(Object self, Object element) {
  if (element == null) return (new Object(__cid=-4, _bit=false));
  Object index = mapGet_Integer@PQueue(self, element);
  Object indexTmp = (index.__cid == (new Object(__cid=-2, _int=Integer()))._int ? intValue@Integer(index) : null);
  if (index != null) removeAt_int@PQueue(self, indexTmp);
  return (new Object(__cid=-4, _bit=index != null));
}

Object less_int_int(Object self, Object i, Object j) {
  Object node1 = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, i) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, i) : null);
  Object node2 = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, j) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, j) : null);
  return (new Object(__cid=-2, _int=(node1.__cid == (new Object(__cid=-2, _int=Integer()))._int ? compareTo_Integer@Integer(node1, node2) : null)._int <= (new Object(__cid=-2, _int=0))._int));
}

void sink_int(Object self, Object k) {
  while ((new Object(__cid=-4, _bit=true))._bit) {
    Object left = (new Object(__cid=-2, _int=(new Object(__cid=-2, _int=2))._int * k._int + (new Object(__cid=-2, _int=1))._int));
    Object right = (new Object(__cid=-2, _int=(new Object(__cid=-2, _int=2))._int * k._int + (new Object(__cid=-2, _int=2))._int));
    Object smallest = left;
    if (right._int < self.heapSize_PQueue._int && less_int_int@PQueue(self, right, left)._bit) smallest = right;
    if (left._int >= self.heapSize_PQueue._int || less_int_int@PQueue(self, k, smallest)._bit) return;
    swap_int_int@PQueue(self, smallest, k);
    k = smallest;
  }
}

void mapSwap_Integer_Integer_int_int(Object self, Object val1, Object val2, Object val1Index, Object val2Index) {
  Object set1 = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.map_PQueue, val1) : null);
  Object set2 = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.map_PQueue, val2) : null);
  Object val1IndexTmp = Integer_Integer_int(new Object(__cid=Integer()), val1Index);
  Object val2IndexTmp = Integer_Integer_int(new Object(__cid=Integer()), val2Index);
  (set1.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? remove_Object_Integer@TreeSet(set1, val1IndexTmp) : null); set1 = (set1.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? removeb_Object_Integer@TreeSet(set1, val1IndexTmp) : null);
  (set2.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? remove_Object_Integer@TreeSet(set2, val2IndexTmp) : null); set2 = (set2.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? removeb_Object_Integer@TreeSet(set2, val2IndexTmp) : null);
  (set1.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Integer@TreeSet(set1, val2IndexTmp) : null); set1 = (set1.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Integer@TreeSet(set1, val2IndexTmp) : null);
  (set2.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Integer@TreeSet(set2, val1IndexTmp) : null); set2 = (set2.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Integer@TreeSet(set2, val1IndexTmp) : null);
}

void swap_int_int(Object self, Object i, Object j) {
  Object i_elem = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, i) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, i) : null);
  Object j_elem = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, j) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, j) : null);
  (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? set_Object_int_Object@ArrayList(self.heap_PQueue, i, j_elem) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? setb_Object_int_Object@ArrayList(self.heap_PQueue, i, j_elem) : null);
  (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? set_Object_int_Object@ArrayList(self.heap_PQueue, j, i_elem) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? setb_Object_int_Object@ArrayList(self.heap_PQueue, j, i_elem) : null);
  mapSwap_Integer_Integer_int_int@PQueue(self, i_elem, j_elem, i, j);
}

void swim_int(Object self, Object k) {
  Object parent = (new Object(__cid=-2, _int=(k._int - (new Object(__cid=-2, _int=1))._int) / (new Object(__cid=-2, _int=2))._int));
  while (k._int > (new Object(__cid=-2, _int=0))._int && less_int_int@PQueue(self, k, parent)._bit) {
    swap_int_int@PQueue(self, parent, k);
    k = parent;
    parent = (new Object(__cid=-2, _int=(k._int - (new Object(__cid=-2, _int=1))._int) / (new Object(__cid=-2, _int=2))._int));
  }
}

Object removeAt_int(Object self, Object i) {
  if (isEmpty@PQueue(self)._bit) return null;
  self.heapSize_PQueue = new Object(__cid=-2, _int=self.heapSize_PQueue._int - 1);
  Object removed_data = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, i) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, i) : null);
  swap_int_int@PQueue(self, i, self.heapSize_PQueue);
  (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? set_Object_int_Object@ArrayList(self.heap_PQueue, self.heapSize_PQueue, null) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? setb_Object_int_Object@ArrayList(self.heap_PQueue, self.heapSize_PQueue, null) : null);
  mapRemove_Integer_int@PQueue(self, removed_data, self.heapSize_PQueue);
  if (i._int == self.heapSize_PQueue._int) return removed_data;
  Object elem = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, i) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, i) : null);
  sink_int@PQueue(self, i);
  Object res = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, i) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, i) : null);
  Object b = (res.__cid == (new Object(__cid=-2, _int=Integer()))._int ? equals_Object@Integer(res, elem) : null);
  if ({|(b | (new Object(__cid=-4, _bit=res == elem)))|}._bit) swim_int@PQueue(self, i);
  return removed_data;
}

void clear(Object self) {
  for (Object i = (new Object(__cid=-2, _int=??)); i._int < self.heapCapacity_PQueue._int; i = new Object(__cid=-2, _int=i._int + 1)) (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? set_Object_int_Object@ArrayList(self.heap_PQueue, i, null) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? setb_Object_int_Object@ArrayList(self.heap_PQueue, i, null) : null);
  self.heapSize_PQueue = (new Object(__cid=-2, _int=0));
  (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? clear_Object@HashMap(self.map_PQueue) : null); self.map_PQueue = (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? clearb_Object@HashMap(self.map_PQueue) : null);
}

Object peek(Object self) {
  if (isEmpty@PQueue(self)._bit) return null;
  return (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_Object_int@ArrayList(self.heap_PQueue, (new Object(__cid=-2, _int=0))) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? getb_Object_int@ArrayList(self.heap_PQueue, (new Object(__cid=-2, _int=0))) : null);
}

Object poll(Object self) {
  return removeAt_int@PQueue(self, (new Object(__cid=-2, _int=0)));
}

Object contains_Integer(Object self, Object elem) {
  if (elem == null) return (new Object(__cid=-4, _bit=false));
  return (self.map_PQueue.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? containsKey_Object_Object@HashMap(self.map_PQueue, elem) : null);
}

void add_Integer(Object self, Object elem) {
  if (elem == null) return;
  if (self.heapSize_PQueue._int < self.heapCapacity_PQueue._int) {
    (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? set_Object_int_Object@ArrayList(self.heap_PQueue, self.heapSize_PQueue, elem) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? setb_Object_int_Object@ArrayList(self.heap_PQueue, self.heapSize_PQueue, elem) : null);
  }
  else {
    (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? add_Object_Object@ArrayList(self.heap_PQueue, elem) : null); self.heap_PQueue = (self.heap_PQueue.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? addb_Object_Object@ArrayList(self.heap_PQueue, elem) : null);
    self.heapCapacity_PQueue = new Object(__cid=-2, _int=self.heapCapacity_PQueue._int + 1);
  }
  mapAdd_Integer_int@PQueue(self, elem, self.heapSize_PQueue);
  swim_int@PQueue(self, self.heapSize_PQueue);
  self.heapSize_PQueue = new Object(__cid=-2, _int=self.heapSize_PQueue._int + 1);
}

Object isMinHeap_int(Object self, Object k) {
  if (k._int >= self.heapSize_PQueue._int) return (new Object(__cid=-4, _bit=true));
  Object left = (new Object(__cid=-2, _int=(new Object(__cid=-2, _int=2))._int * k._int + (new Object(__cid=-2, _int=1))._int));
  Object right = (new Object(__cid=-2, _int=(new Object(__cid=-2, _int=2))._int * k._int + (new Object(__cid=-2, _int=2))._int));
  if (left._int < self.heapSize_PQueue._int && !less_int_int@PQueue(self, k, left)._bit) return (new Object(__cid=-4, _bit=false));
  if (right._int < self.heapSize_PQueue._int && !less_int_int@PQueue(self, k, right)._bit) return (new Object(__cid=-4, _bit=false));
  return (new Object(__cid=-4, _bit=isMinHeap_int@PQueue(self, left)._bit && isMinHeap_int@PQueue(self, right)._bit));
}

harness void m() {
  Object self = Object_Object(new Object(__cid=Object()));
  Object LOOPS = (new Object(__cid=-2, _int=1000));
  Object MAX_SZ = (new Object(__cid=-2, _int=100));
  testEmpty@PQueue(self);
  testHeapProperty@PQueue(self);
  testClear@PQueue(self);
  testContainment@PQueue(self);
  testRemovingDuplicates@PQueue(self);
}

void testEmpty(Object self) {
  Object q = PQueue_PQueue(new Object(__cid=PQueue()));
  ;
  assert ((q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? isEmpty@PQueue(q) : null))._bit;
  assert (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(q) : null) == null;
  assert (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? peek@PQueue(q) : null) == null;
}

void testHeapProperty(Object self) {
  Object q = PQueue_PQueue(new Object(__cid=PQueue()));
  Object nums = Wrap_Array_Object(new Array_Object(length=new Object(__cid=-2, _int=9))); nums._array_object.A[0] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=3))); nums._array_object.A[1] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=2))); nums._array_object.A[2] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=5))); nums._array_object.A[3] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=6))); nums._array_object.A[4] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=7))); nums._array_object.A[5] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=9))); nums._array_object.A[6] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=4))); nums._array_object.A[7] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=8))); nums._array_object.A[8] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=1)));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int <= (new Object(__cid=-2, _int=8))._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { add_Integer@PQueue(q, nums._array_object.A[i._int]); }
    else { 0; };
  }
  for (Object i = (new Object(__cid=-2, _int=1)); i._int <= (new Object(__cid=-2, _int=9))._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    Object ii = (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(q) : null);
    assert (i._int == (ii.__cid == (new Object(__cid=-2, _int=Integer()))._int ? intValue@Integer(ii) : null)._int)._bit;
  }
}

void testClear(Object self) {
  Object q = PQueue_PQueue(new Object(__cid=PQueue()));
  Object nums = Wrap_Array_Object(new Array_Object(length=new Object(__cid=-2, _int=5))); nums._array_object.A[0] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=11))); nums._array_object.A[1] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=22))); nums._array_object.A[2] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=33))); nums._array_object.A[3] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=44))); nums._array_object.A[4] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=55)));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < (new Object(__cid=-2, _int=5))._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { add_Integer@PQueue(q, nums._array_object.A[i._int]); }
    else { 0; };
  }
  if (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { clear@PQueue(q); }
  else { 0; };
  ;
  ;
}

void testContainment(Object self) {
  Object nums = Wrap_Array_Object(new Array_Object(length=new Object(__cid=-2, _int=5))); nums._array_object.A[0] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=11))); nums._array_object.A[1] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=22))); nums._array_object.A[2] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=33))); nums._array_object.A[3] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=44))); nums._array_object.A[4] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=55)));
  Object q = PQueue_PQueue(new Object(__cid=PQueue()));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < (new Object(__cid=-2, _int=5))._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { add_Integer@PQueue(q, nums._array_object.A[i._int]); }
    else { 0; };
  }
  (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? remove_Integer@PQueue(q, Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=11)))) : null);
  ;
  (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? remove_Integer@PQueue(q, Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=22)))) : null);
  ;
  (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? remove_Integer@PQueue(q, Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=33)))) : null);
  ;
  (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? remove_Integer@PQueue(q, Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=44)))) : null);
  ;
  if (q.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { clear@PQueue(q); }
  else { 0; };
  ;
}

void testRemovingDuplicates(Object self) {
  Object in = Wrap_Array_Object(new Array_Object(length=new Object(__cid=-2, _int=7))); in._array_object.A[0] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=2))); in._array_object.A[1] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=7))); in._array_object.A[2] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=2))); in._array_object.A[3] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=11))); in._array_object.A[4] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=7))); in._array_object.A[5] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=13))); in._array_object.A[6] = Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=2)));
  Object pq = PQueue_PQueue(new Object(__cid=PQueue()));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < (new Object(__cid=-2, _int=7))._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { add_Integer@PQueue(pq, in._array_object.A[i._int]); }
    else { 0; };
  }
  Object tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? peek@PQueue(pq) : null);
  ;
  if (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int) { add_Integer@PQueue(pq, Integer_Integer_int(new Object(__cid=Integer()), (new Object(__cid=-2, _int=3)))); }
  else { 0; };
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
  tmp = (pq.__cid == (new Object(__cid=-2, _int=PQueue()))._int ? poll@PQueue(pq) : null);
  ;
}

