package CsvDocument;

Object CsvDocument_CsvDocument(Object self) {
    return self;
}

Object CsvDocument_CsvDocument_List(Object self, Object csvRows) {
  self.csvRows_CsvDocument = csvRows;
  return self;
}

Object getCsvRows(Object self) {
  return self.csvRows_CsvDocument;
}

Object isEmpty(Object self) {
  return (new Object(__cid=-4, _bit=(self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? size@LinkedList(self.csvRows_CsvDocument) : self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? size@ArrayList(self.csvRows_CsvDocument) : null)._int == (new Object(__cid=-2, _int=0))._int));
}

Object toString(Object self) {
  Object sb = StringBuilder_StringBuilder(new Object(__cid=StringBuilder()));
  Object size = (self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? size@LinkedList(self.csvRows_CsvDocument) : self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? size@ArrayList(self.csvRows_CsvDocument) : null);
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < size._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    Object row = (self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? get_int@LinkedList(self.csvRows_CsvDocument, i) : self.csvRows_CsvDocument.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_int@ArrayList(self.csvRows_CsvDocument, i) : null);
    if (sb.__cid == (new Object(__cid=-2, _int=StringBuilder()))._int) { append_String@StringBuilder(sb, (row.__cid == (new Object(__cid=-2, _int=CsvRow()))._int ? toString@CsvRow(row) : null)); }
    else { 0; };
  }
  return (sb.__cid == (new Object(__cid=-2, _int=StringBuilder()))._int ? toString@StringBuilder(sb) : null);
}

Object read_String(Object filePath) {
  Object defaultConfiguration = CsvConfiguration_CsvConfiguration(new Object(__cid=CsvConfiguration()));
  return read_String_CsvConfiguration(filePath, defaultConfiguration);
}

Object read_String_CsvConfiguration(Object filePath, Object csvConfiguration) {
  Object bufferedReader = BufferedReader_BufferedReader_FileReaderr(new Object(__cid=BufferedReader()), FileReaderr_FileReaderr_String(new Object(__cid=FileReaderr()), filePath));
  if ((csvConfiguration.__cid == (new Object(__cid=-2, _int=CsvConfiguration()))._int ? skipHeader@CsvConfiguration(csvConfiguration) : null)._bit) {
    (bufferedReader.__cid == (new Object(__cid=-2, _int=BufferedReader()))._int ? readLine@BufferedReader(bufferedReader) : null);
  }
  Object csvLine = (bufferedReader.__cid == (new Object(__cid=-2, _int=BufferedReader()))._int ? readLine@BufferedReader(bufferedReader) : null);
  Object parsedCsvRows = ArrayList_ArrayList(new Object(__cid=ArrayList()));
  while (csvLine != null) {
    Object row = parseCsvRow_CsvConfiguration_String(csvConfiguration, csvLine);
    (parsedCsvRows.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? add_E@LinkedList(parsedCsvRows, row) : parsedCsvRows.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? add_E@ArrayList(parsedCsvRows, row) : null);
    csvLine = (bufferedReader.__cid == (new Object(__cid=-2, _int=BufferedReader()))._int ? readLine@BufferedReader(bufferedReader) : null);
  }
  Object parsedDocument = CsvDocument_CsvDocument_List(new Object(__cid=CsvDocument()), parsedCsvRows);
  return parsedDocument;
}

Object tryWriteToFile_CsvDocument_String(Object document, Object savePath) {
  Object out = PrintStream_PrintStream_FileOutputStream(new Object(__cid=PrintStream()), FileOutputStream_FileOutputStream_String(new Object(__cid=FileOutputStream()), savePath));
  if (out.__cid == (new Object(__cid=-2, _int=PrintStream()))._int) { print_String@PrintStream(out, (document.__cid == (new Object(__cid=-2, _int=CsvDocument()))._int ? toString@CsvDocument(document) : null)); }
  else { 0; };
  if (out.__cid == (new Object(__cid=-2, _int=PrintStream()))._int) { close@PrintStream(out); }
  else { 0; };
  return (new Object(__cid=-4, _bit=true));
}

Object parseCsvRow_CsvConfiguration_String(Object csvConfiguration, Object csvLine) {
  Object COMA_SEPARATOR = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=1+1), A=",")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=1));
  Object columns = (csvLine.__cid == (new Object(__cid=-2, _int=String()))._int ? split_String@String(csvLine, COMA_SEPARATOR) : null);
  Object csvColumns = ArrayList_ArrayList(new Object(__cid=ArrayList()));
  if ((csvConfiguration.__cid == (new Object(__cid=-2, _int=CsvConfiguration()))._int ? parseAllColumns@CsvConfiguration(csvConfiguration) : null)._bit) {
    for (Object i = (new Object(__cid=-2, _int=0)); i._int < columns._array_object.length._int; i = new Object(__cid=-2, _int=i._int + 1)) {
      (csvColumns.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? add_E@LinkedList(csvColumns, CsvColumn_CsvColumn_String(new Object(__cid=CsvColumn()), columns._array_object.A[i._int])) : csvColumns.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? add_E@ArrayList(csvColumns, CsvColumn_CsvColumn_String(new Object(__cid=CsvColumn()), columns._array_object.A[i._int])) : null);
    }
  }
  else {
    Object colInds = (csvConfiguration.__cid == (new Object(__cid=-2, _int=CsvConfiguration()))._int ? getColumnIndexesToParse@CsvConfiguration(csvConfiguration) : null);
    for (Object i = (new Object(__cid=-2, _int=0)); i._int < (colInds.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? size@LinkedList(colInds) : colInds.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? size@ArrayList(colInds) : null)._int; i = new Object(__cid=-2, _int=i._int + 1)) {
      Object columnIndex = (colInds.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? get_int@LinkedList(colInds, i) : colInds.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? get_int@ArrayList(colInds, i) : null);
      (csvColumns.__cid == (new Object(__cid=-2, _int=LinkedList()))._int ? add_E@LinkedList(csvColumns, CsvColumn_CsvColumn_String(new Object(__cid=CsvColumn()), columns._array_object.A[columnIndex._int])) : csvColumns.__cid == (new Object(__cid=-2, _int=ArrayList()))._int ? add_E@ArrayList(csvColumns, CsvColumn_CsvColumn_String(new Object(__cid=CsvColumn()), columns._array_object.A[columnIndex._int])) : null);
    }
  }
  return CsvRow_CsvRow_List(new Object(__cid=CsvRow()), csvColumns);
}

