package SuffixArray;

Object SuffixArray_SuffixArray(Object self) {
    return self;
}

Object SuffixArray_SuffixArray_String(Object self, Object text) {
  SuffixArray_SuffixArray_int(self, toIntArray_String(text));
  return self;
}

Object SuffixArray_SuffixArray_int(Object self, Object text) {
  self.T_SuffixArray = clone_int@SuffixArray(self, text);
  self.N_SuffixArray = text._array_int.length;
  construct@SuffixArray(self);
  kasai@SuffixArray(self);
  return self;
}

Object clone_int(Object self, Object arr) {
  Object l = arr._array_int.length;
  Object arr_cp = Wrap_Array_int(new Array_int(length=l));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < l._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    arr_cp._array_int.A[i._int] = arr._array_int.A[i._int];
  }
  return arr_cp;
}

Object intArrToString_int(Object text) {
  Object tmp = Wrap_Array_char(new Array_char(length=text._array_int.length));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < text._array_int.length._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    tmp._array_char.A[i._int] = (new Object(__cid=-3, _char=((char)text._array_int.A[i._int])))._char;
  }
  return String_String_char_int_int(new Object(__cid=String()), tmp, (new Object(__cid=-2, _int=0)), text._array_int.length);
}

Object toIntArray_String(Object s) {
  Object text = Wrap_Array_int(new Array_int(length=(s.__cid == (new Object(__cid=-2, _int=String()))._int ? length@String(s) : null)));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < (s.__cid == (new Object(__cid=-2, _int=String()))._int ? length@String(s) : null)._int; i = new Object(__cid=-2, _int=i._int + 1)) text._array_int.A[i._int] = (s.__cid == (new Object(__cid=-2, _int=String()))._int ? charAt_int@String(s, i) : null)._char;
  return text;
}

void construct(Object self) {
  self.sa_SuffixArray = Wrap_Array_int(new Array_int(length=self.N_SuffixArray));
  Object suffixRanks = TwoDArray_TwoDArray_int_int(new Object(__cid=TwoDArray()), (new Object(__cid=-2, _int=2)), self.N_SuffixArray);
  Object ranks = Wrap_Array_Object(new Array_Object(length=self.N_SuffixArray));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int) { set_int_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=0)), i, (new Object(__cid=-2, _int=self.T_SuffixArray._array_int.A[i._int]))); }
    else { 0; };
    ranks._array_object.A[i._int] = SuffixRankTuple_SuffixRankTuple(new Object(__cid=SuffixRankTuple()));
  }
  for (Object pos = (new Object(__cid=-2, _int=1)); pos._int < self.N_SuffixArray._int; pos = (new Object(__cid=-2, _int=pos._int * (new Object(__cid=-2, _int=2))._int))) {
    for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) {
      Object suffixRank = ranks._array_object.A[i._int];
      suffixRank.firstHalf_SuffixRankTuple = (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int ? get_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=0)), i) : null);
      suffixRank.secondHalf_SuffixRankTuple = (i._int + pos._int < self.N_SuffixArray._int ? (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int ? get_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=0)), (new Object(__cid=-2, _int=i._int + pos._int))) : null) : (new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1))._int)));
      suffixRank.originalIndex_SuffixRankTuple = i;
    }
    ranks = sort_SuffixRankTuple_int@Arrays(ranks, ranks._array_object.length);
    Object newRank = (new Object(__cid=-2, _int=0));
    if (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int) { set_int_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=1)), ranks._array_object.A[(new Object(__cid=-2, _int=0))._int].originalIndex_SuffixRankTuple, (new Object(__cid=-2, _int=0))); }
    else { 0; };
    for (Object i = (new Object(__cid=-2, _int=1)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) {
      Object lastSuffixRank = ranks._array_object.A[i._int - (new Object(__cid=-2, _int=1))._int];
      Object currSuffixRank = ranks._array_object.A[i._int];
      if (currSuffixRank.firstHalf_SuffixRankTuple._int != lastSuffixRank.firstHalf_SuffixRankTuple._int || currSuffixRank.secondHalf_SuffixRankTuple._int != lastSuffixRank.secondHalf_SuffixRankTuple._int) newRank = new Object(__cid=-2, _int=newRank._int + 1);
      if (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int) { set_int_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=1)), currSuffixRank.originalIndex_SuffixRankTuple, newRank); }
      else { 0; };
    }
    if (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int) { setRow_int_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=0)), (suffixRanks.__cid == (new Object(__cid=-2, _int=TwoDArray()))._int ? getRow_int@TwoDArray(suffixRanks, (new Object(__cid=-2, _int=1))) : null)); }
    else { 0; };
    if (newRank._int == self.N_SuffixArray._int - (new Object(__cid=-2, _int=1))._int) pos = self.N_SuffixArray;
  }
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    self.sa_SuffixArray._array_int.A[i._int] = ranks._array_object.A[i._int].originalIndex_SuffixRankTuple._int;
    ranks._array_object.A[i._int] = null;
  }
  suffixRanks = null;
  suffixRanks = null;
  ranks = null;
}

void kasai(Object self) {
  self.lcp_SuffixArray = Wrap_Array_int(new Array_int(length=self.N_SuffixArray));
  Object inv = Wrap_Array_int(new Array_int(length=self.N_SuffixArray));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) inv._array_int.A[self.sa_SuffixArray._array_int.A[i._int]] = i._int;
  Object len = (new Object(__cid=-2, _int=0));
  for (Object i = (new Object(__cid=-2, _int=0)); i._int < self.N_SuffixArray._int; i = new Object(__cid=-2, _int=i._int + 1)) {
    if (inv._array_int.A[i._int] > (new Object(__cid=-2, _int=0))._int) {
      Object k = (new Object(__cid=-2, _int=self.sa_SuffixArray._array_int.A[inv._array_int.A[i._int] - (new Object(__cid=-2, _int=1))._int]));
      while ((i._int + len._int < self.N_SuffixArray._int) && (k._int + len._int < self.N_SuffixArray._int) && self.T_SuffixArray._array_int.A[i._int + len._int] == self.T_SuffixArray._array_int.A[k._int + len._int]) len = new Object(__cid=-2, _int=len._int + 1);
      self.lcp_SuffixArray._array_int.A[inv._array_int.A[i._int] - (new Object(__cid=-2, _int=1))._int] = len._int;
      if (len._int > (new Object(__cid=-2, _int=0))._int) len = new Object(__cid=-2, _int=len._int - 1);
    }
  }
}

Object lrs(Object self) {
  Object max_len = (new Object(__cid=-2, _int=??));
  /* Object max_len = (new Object(__cid=-2, _int=0)); */
  Object lrss = TreeSet_TreeSet();
  Object tmp = Wrap_Array_char(new Array_char(length=self.T_SuffixArray._array_int.length));
  /* Object g1 = {|(self.T_SuffixArray._array_int.length | self.N_SuffixArray | max_len)|};   */
  /* for (Object i = (new Object(__cid=-2, _int=??)); i._int < g1._int; i = new Object(__cid=-2, _int=i._int + 1)) { */
  Object g1_o = {|(self.T_SuffixArray._array_int.length | self.N_SuffixArray | max_len)|};  
  int g1 = g1_o._int;
  for (int i = ??; i < g1; i++) {
  /* Object g1 = self.N_SuffixArray; */
  /* for (Object i = (new Object(__cid=-2, _int=0)); i._int < g1._int; i = new Object(__cid=-2, _int=i._int + 1)) { */
    /* tmp._array_char.A[i._int] = (new Object(__cid=-3, _char=((char)self.T_SuffixArray._array_int.A[i._int])))._char; */
    tmp._array_char.A[i] = (new Object(__cid=-3, _char=((char)self.T_SuffixArray._array_int.A[i])))._char;
  }
  /* Object g2 = {|(self.T_SuffixArray._array_int.length | self.N_SuffixArray | max_len)|}; */
  /* for (Object i = (new Object(__cid=-2, _int=??)); i._int < g2._int; i = new Object(__cid=-2, _int=i._int + 1)) { */
  Object g2_o = {|(self.T_SuffixArray._array_int.length | self.N_SuffixArray | max_len)|};
  int g2 = g2_o._int;
  for (int i = ??; i < g2; i++) {
  /* Object g2 = self.N_SuffixArray; */
  /* for (Object i = (new Object(__cid=-2, _int=0)); i._int < g2._int; i = new Object(__cid=-2, _int=i._int + 1)) { */
    /* if (self.lcp_SuffixArray._array_int.A[i._int] > (new Object(__cid=-2, _int=??))._int && self.lcp_SuffixArray._array_int.A[i._int] >= max_len._int) { */
    if (self.lcp_SuffixArray._array_int.A[i] > (new Object(__cid=-2, _int=??))._int && self.lcp_SuffixArray._array_int.A[i] >= max_len._int) {
    /* if (self.lcp_SuffixArray._array_int.A[i._int] > (new Object(__cid=-2, _int=0))._int && self.lcp_SuffixArray._array_int.A[i._int] >= max_len._int) { */
      /* if (self.lcp_SuffixArray._array_int.A[i._int] > max_len._int) { */
      if (self.lcp_SuffixArray._array_int.A[i] > max_len._int) {
        (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? clear_Object@TreeSet(lrss) : null); lrss = (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? clearb_Object@TreeSet(lrss) : null);
      }
      /* max_len = (new Object(__cid=-2, _int=self.lcp_SuffixArray._array_int.A[i._int])); */
      max_len = (new Object(__cid=-2, _int=self.lcp_SuffixArray._array_int.A[i]));
      /* (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Object@TreeSet(lrss, String_String_char_int_int(new Object(__cid=String()), tmp, (new Object(__cid=-2, _int=self.sa_SuffixArray._array_int.A[i._int])), max_len)) : null); lrss = (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Object@TreeSet(lrss, String_String_char_int_int(new Object(__cid=String()), tmp, (new Object(__cid=-2, _int=self.sa_SuffixArray._array_int.A[i._int])), max_len)) : null); */
      (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? add_Object_Object@TreeSet(lrss, String_String_char_int_int(new Object(__cid=String()), tmp, (new Object(__cid=-2, _int=self.sa_SuffixArray._array_int.A[i])), max_len)) : null); lrss = (lrss.__cid == (new Object(__cid=-2, _int=TreeSet()))._int ? addb_Object_Object@TreeSet(lrss, String_String_char_int_int(new Object(__cid=String()), tmp, (new Object(__cid=-2, _int=self.sa_SuffixArray._array_int.A[i])), max_len)) : null);
    }
  }
  return lrss;
}

