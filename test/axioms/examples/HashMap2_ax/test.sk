package test;

Object test_test(Object self) {
    return self;
}

bit testBucketing() {
  bit ok = true;
  Object ht1 = Bucketing_Bucketing(new Object(__cid=Bucketing()));
  Object i0 = Integer_Integer_int(new Object(__cid=Integer()), 2);
  Object i1 = Integer_Integer_int(new Object(__cid=Integer()), 4);
  Object i2 = Integer_Integer_int(new Object(__cid=Integer()), 6);
  Object i3 = Integer_Integer_int(new Object(__cid=Integer()), 8);
  Object i4 = Integer_Integer_int(new Object(__cid=Integer()), 10);
  Object s0 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="0"), 0, 1);
  Object s1 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="1"), 0, 1);
  Object s2 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="2"), 0, 1);
  Object s3 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="3"), 0, 1);
  Object s4 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=1+1, A="4"), 0, 1);
  if (ht1.__cid == Bucketing()) { put_K_V@Bucketing(ht1, i0, s0); }
  else { 0; };
  if (ht1.__cid == Bucketing()) { put_K_V@Bucketing(ht1, i1, s1); }
  else { 0; };
  if (ht1.__cid == Bucketing()) { put_K_V@Bucketing(ht1, i2, s2); }
  else { 0; };
  if (ht1.__cid == Bucketing()) { put_K_V@Bucketing(ht1, i3, s3); }
  else { 0; };
  if (ht1.__cid == Bucketing()) { put_K_V@Bucketing(ht1, i4, s4); }
  else { 0; };
  Object gs0 = (ht1.__cid == Bucketing() ? get_K@Bucketing(ht1, i0) : null);
  Object gs1 = (ht1.__cid == Bucketing() ? get_K@Bucketing(ht1, i1) : null);
  Object gs2 = (ht1.__cid == Bucketing() ? get_K@Bucketing(ht1, i2) : null);
  Object gs3 = (ht1.__cid == Bucketing() ? get_K@Bucketing(ht1, i3) : null);
  Object gs4 = (ht1.__cid == Bucketing() ? get_K@Bucketing(ht1, i4) : null);

  assertTrue_boolean@Assert(equals_Object@String(gs0,s0));
  assertTrue_boolean@Assert(equals_Object@String(gs1,s1));
  assertTrue_boolean@Assert(equals_Object@String(gs2,s2));
  assertTrue_boolean@Assert(equals_Object@String(gs3,s3));
  assertTrue_boolean@Assert(equals_Object@String(gs4,s4));  

  // assertTrue_boolean@Assert(ok);
  return ok;
}

harness void main() {
  Object self = Object_Object(new Object(__cid=Object()));
  assert testBucketing();
}

