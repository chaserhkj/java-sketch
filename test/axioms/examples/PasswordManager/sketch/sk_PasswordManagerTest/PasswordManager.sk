package PasswordManager;

Object passManager;
Object passManager_g() { return passManager; }
void passManager_s(Object passManager_s) { passManager = passManager_s; }

Object PasswordManager_PasswordManager(Object self) {
    return self;
}

Object PasswordManager_PasswordManager_String(Object self, Object masterPassword) {
  self.cryptographer_PasswordManager = Cryptographer_Cryptographer(new Object(__cid=Cryptographer()));
  self.passMap_PasswordManager = PasswordMap_PasswordMap(new Object(__cid=PasswordMap()));
  return self;
}

Object getPassManager_String(Object masterPassword) {
  if (passManager != null) return passManager;
  passManager = PasswordManager_PasswordManager_String(new Object(__cid=PasswordManager()), masterPassword);
  return passManager;
}

void addPassword_String_String(Object self, Object domain, Object passWord) {
  Object PassEncryption = (self.cryptographer_PasswordManager.__cid == (new Object(__cid=-2, _int=Cryptographer()))._int ? encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord) : null);
  Object domainHash = domain;
  if (self.passMap_PasswordManager.__cid == (new Object(__cid=-2, _int=PasswordMap()))._int) { add_String_String@PasswordMap(self.passMap_PasswordManager, domainHash, PassEncryption); }
  else { 0; };
}

Object getPass_String(Object self, Object domain) {
  Object domainHash = domain;
  Object PassEncryption = (self.passMap_PasswordManager.__cid == (new Object(__cid=-2, _int=PasswordMap()))._int ? get_String@PasswordMap(self.passMap_PasswordManager, domainHash) : null);
  return (self.cryptographer_PasswordManager.__cid == (new Object(__cid=-2, _int=Cryptographer()))._int ? decrypt_String@Cryptographer(self.cryptographer_PasswordManager, PassEncryption) : null);
}


