package Object;

Object Object_Object(Object self) {
    return self;
}

bit equals_Object_Object(Object a, Object b) {
  if (a == null) {
    if (b == null) {
      return true;
    }
    return false;
  }
  return (a.__cid == PasswordMap() ? equals_Object@Object(a, b) : a.__cid == Cryptographer() ? equals_Object@Object(a, b) : a.__cid == SecureRandom() ? equals_Object@Object(a, b) : a.__cid == Character() ? equals_Object@Character(a, b) : a.__cid == Assert() ? equals_Object@Object(a, b) : a.__cid == Cipher() ? equals_Object@Object(a, b) : a.__cid == Mac() ? equals_Object@Object(a, b) : a.__cid == ArrayList() ? equals_Object@Object(a, b) : a.__cid == PasswordManager() ? equals_Object@Object(a, b) : a.__cid == Byte() ? equals_Object@Object(a, b) : a.__cid == SecretKeySpec() ? equals_Object@Object(a, b) : a.__cid == HashMap() ? equals_Object@Object(a, b) : a.__cid == Integer() ? equals_Object@Integer(a, b) : a.__cid == String() ? equals_Object@String(a, b) : a.__cid == Boolean() ? equals_Object@Object(a, b) : a.__cid == PasswordManagerTest() ? equals_Object@Object(a, b) : a.__cid == IvParameterSpec() ? equals_Object@Object(a, b) : a.__cid == Object() ? equals_Object@Object(a, b) : 0);
}

bit equals_Object(Object self, Object obj) {
  return self == obj;
}

int hashCode(Object self) {
  return 0;
}

struct Object {
  int            __cid;
  bit            bool_Boolean;
  Array_char     _value_String;
  int            _count_String;
  int            value_Integer;
  char           b_Byte;
  Object         cryptographer_PasswordManager;
  Object         passMap_PasswordManager;
  char           value_Character;
  Object         GCMSecretKey_Cryptographer;
  Object         Hash_secret_key_Cryptographer;
  Object         sha256_HMAC_Cryptographer;
  Object         myCypherOut_Cryptographer;
  Array_char     randomIv_Cryptographer;
  Object         ivParameterSpec_Cryptographer;
  int            MAX_LENGTH_PASSWORD_Cryptographer;
  Object         passMap_PasswordMap;
  Object         masterHash_PasswordMap;
  HashMap        _hashmap;
  SecretKeySpec  _secretkeyspec;
  ArrayList      _arraylist;
  Mac            _mac;
  Cipher         _cipher;
  SecureRandom   _securerandom;
}
