/* BEGIN PACKAGE Cryptographer*/
package Cryptographer{
  /*Cryptographer.sk:3*/
  
Object Cryptographer_Cryptographer (Object self)/*Cryptographer.sk:3*/
  {
    Object random = SecureRandom_SecureRandom();
    Object randomKey = Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=16)));
    ((random.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? nextBytes_Object_Object@SecureRandom(random, randomKey) : null);
    self.GCMSecretKey_Cryptographer = SecretKeySpec_SecretKeySpec();
    self.randomIv_Cryptographer = Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=16)));
    ((random.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? nextBytes_Object_Object@SecureRandom(random, self.randomIv_Cryptographer) : null);
    self.ivParameterSpec_Cryptographer = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), self.randomIv_Cryptographer);
    self.myCypherOut_Cryptographer = Cipher_Cipher();
    if((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int))/*Cryptographer.sk:12*/
    {
      {
        init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer) : null);
    Object secret = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=7), A={'s','e','c','r','e','t','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=6));
    self.sha256_HMAC_Cryptographer = Mac_Mac();
    self.Hash_secret_key_Cryptographer = SecretKeySpec_SecretKeySpec();
    if((self.sha256_HMAC_Cryptographer.__cid) == (new Object(__cid=-2, _int=Mac())._int))/*Cryptographer.sk:17*/
    {
      {
        init_Object_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    self.sha256_HMAC_Cryptographer = ((self.sha256_HMAC_Cryptographer.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? initb_Object_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer) : null);
    self.MAX_LENGTH_PASSWORD_Cryptographer = new Object(__cid=-2, _int=16);
    return self;
  }
  /*Cryptographer.sk:43*/
  
Object decrypt_String (Object self, Object cipherText)/*Cryptographer.sk:43*/
  {
    if((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int))/*Cryptographer.sk:44*/
    {
      {
        init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer) : null);
    Object plainText = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinal_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((cipherText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(cipherText) : null)) : null);
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinalb_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((cipherText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(cipherText) : null)) : null);
    Object decryptText = String_String_byte(new Object(__cid=String()), plainText);
    return decryptText;
  }
  /*Cryptographer.sk:36*/
  
Object encrypt_String (Object self, Object plainText)/*Cryptographer.sk:36*/
  {
    if((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int))/*Cryptographer.sk:37*/
    {
      {
        init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=1), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=1), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer) : null);
    Object cipherText = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinal_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((plainText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(plainText) : null)) : null);
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinalb_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((plainText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(plainText) : null)) : null);
    return String_String_byte(new Object(__cid=String()), cipherText);
  }
  /*Cryptographer.sk:27*/
  
generator Object genCipherText_String (Object self, Object plainText)/*Cryptographer.sk:27*/
  {
    Object cipherText;
    if(new Object(__cid=-4, _bit=??/* H__0bit:1 */)._bit)/*Cryptographer.sk:29*/
    {
      if((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int))/*Cryptographer.sk:29*/
      {
        {
          init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=??/* H__1int:7 */), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer);
        }
      }
      else
      {
        {
          0;
        }
      }
    }
    { }
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object(__cid=-2, _int=??/* H__2int:7 */), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer) : null);
    if(new Object(__cid=-4, _bit=??/* H__3bit:1 */)._bit)/*Cryptographer.sk:31*/
    {
      cipherText = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinal_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((plainText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(plainText) : null)) : null);
    }
    self.myCypherOut_Cryptographer = ((self.myCypherOut_Cryptographer.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? doFinalb_Object_Object@Cipher(self.myCypherOut_Cryptographer, ((plainText.__cid) == (new Object(__cid=-2, _int=String())._int) ? getBytes@String(plainText) : null)) : null);
    if(new Object(__cid=-4, _bit=??/* H__4bit:1 */)._bit)/*Cryptographer.sk:32*/
    {
      cipherText = genCipherText_String@Cryptographer(self, plainText);
    }
    return cipherText;
  }
  /*Cryptographer.sk:23*/
  
Object hash_String (Object self, Object plainTxt)/*Cryptographer.sk:23*/
  {
    return ((self.sha256_HMAC_Cryptographer.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? doFinal_Object_Object@Mac(self.sha256_HMAC_Cryptographer, plainTxt) : null);
  }
  /* END PACKAGE Cryptographer*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE Character*/
package Character{
  Object MIN_RADIX=new Object(__cid=-2, _int=2);
  Object MAX_RADIX=new Object(__cid=-2, _int=36);
  Object UNASSIGNED=new Object(__cid=-2, _int=0);
  Object UPPERCASE_LETTER=new Object(__cid=-2, _int=1);
  Object LOWERCASE_LETTER=new Object(__cid=-2, _int=2);
  Object TITLECASE_LETTER=new Object(__cid=-2, _int=3);
  Object MODIFIER_LETTER=new Object(__cid=-2, _int=4);
  Object OTHER_LETTER=new Object(__cid=-2, _int=5);
  Object NON_SPACING_MARK=new Object(__cid=-2, _int=6);
  Object ENCLOSING_MARK=new Object(__cid=-2, _int=7);
  Object COMBINING_SPACING_MARK=new Object(__cid=-2, _int=8);
  Object DECIMAL_DIGIT_NUMBER=new Object(__cid=-2, _int=9);
  Object LETTER_NUMBER=new Object(__cid=-2, _int=10);
  Object OTHER_NUMBER=new Object(__cid=-2, _int=11);
  Object SPACE_SEPARATOR=new Object(__cid=-2, _int=12);
  Object LINE_SEPARATOR=new Object(__cid=-2, _int=13);
  Object PARAGRAPH_SEPARATOR=new Object(__cid=-2, _int=14);
  Object CONTROL=new Object(__cid=-2, _int=15);
  Object FORMAT=new Object(__cid=-2, _int=16);
  Object PRIVATE_USE=new Object(__cid=-2, _int=18);
  Object SURROGATE=new Object(__cid=-2, _int=19);
  Object DASH_PUNCTUATION=new Object(__cid=-2, _int=20);
  Object START_PUNCTUATION=new Object(__cid=-2, _int=21);
  Object END_PUNCTUATION=new Object(__cid=-2, _int=22);
  Object CONNECTOR_PUNCTUATION=new Object(__cid=-2, _int=23);
  Object OTHER_PUNCTUATION=new Object(__cid=-2, _int=24);
  Object MATH_SYMBOL=new Object(__cid=-2, _int=25);
  Object CURRENCY_SYMBOL=new Object(__cid=-2, _int=26);
  Object MODIFIER_SYMBOL=new Object(__cid=-2, _int=27);
  Object OTHER_SYMBOL=new Object(__cid=-2, _int=28);
  Object FINAL_QUOTE_PUNCTUATION=new Object(__cid=-2, _int=30);
  Object DIRECTIONALITY_UNDEFINED=-(new Object(__cid=-2, _int=1)._int);
  Object DIRECTIONALITY_LEFT_TO_RIGHT=new Object(__cid=-2, _int=0);
  Object DIRECTIONALITY_RIGHT_TO_LEFT=new Object(__cid=-2, _int=1);
  Object DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC=new Object(__cid=-2, _int=2);
  Object DIRECTIONALITY_EUROPEAN_NUMBER=new Object(__cid=-2, _int=3);
  Object DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR=new Object(__cid=-2, _int=4);
  Object DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR=new Object(__cid=-2, _int=5);
  Object DIRECTIONALITY_ARABIC_NUMBER=new Object(__cid=-2, _int=6);
  Object DIRECTIONALITY_COMMON_NUMBER_SEPARATOR=new Object(__cid=-2, _int=7);
  Object DIRECTIONALITY_NONSPACING_MARK=new Object(__cid=-2, _int=8);
  Object DIRECTIONALITY_BOUNDARY_NEUTRAL=new Object(__cid=-2, _int=9);
  Object DIRECTIONALITY_PARAGRAPH_SEPARATOR=new Object(__cid=-2, _int=10);
  Object DIRECTIONALITY_SEGMENT_SEPARATOR=new Object(__cid=-2, _int=11);
  Object DIRECTIONALITY_WHITESPACE=new Object(__cid=-2, _int=12);
  Object DIRECTIONALITY_OTHER_NEUTRALS=new Object(__cid=-2, _int=13);
  Object DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING=new Object(__cid=-2, _int=14);
  Object DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE=new Object(__cid=-2, _int=15);
  Object DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING=new Object(__cid=-2, _int=16);
  Object DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE=new Object(__cid=-2, _int=17);
  Object DIRECTIONALITY_POP_DIRECTIONAL_FORMAT=new Object(__cid=-2, _int=18);
  /*Character.sk:44*/
  
Object COMBINING_SPACING_MARK_g ()/*Character.sk:44*/
  {
    return COMBINING_SPACING_MARK;
  }
  /*Character.sk:45*/
  
void COMBINING_SPACING_MARK_s (Object COMBINING_SPACING_MARK_s)/*Character.sk:45*/
  {
    COMBINING_SPACING_MARK = COMBINING_SPACING_MARK_s;
  }
  /*Character.sk:100*/
  
Object CONNECTOR_PUNCTUATION_g ()/*Character.sk:100*/
  {
    return CONNECTOR_PUNCTUATION;
  }
  /*Character.sk:101*/
  
void CONNECTOR_PUNCTUATION_s (Object CONNECTOR_PUNCTUATION_s)/*Character.sk:101*/
  {
    CONNECTOR_PUNCTUATION = CONNECTOR_PUNCTUATION_s;
  }
  /*Character.sk:72*/
  
Object CONTROL_g ()/*Character.sk:72*/
  {
    return CONTROL;
  }
  /*Character.sk:73*/
  
void CONTROL_s (Object CONTROL_s)/*Character.sk:73*/
  {
    CONTROL = CONTROL_s;
  }
  /*Character.sk:112*/
  
Object CURRENCY_SYMBOL_g ()/*Character.sk:112*/
  {
    return CURRENCY_SYMBOL;
  }
  /*Character.sk:113*/
  
void CURRENCY_SYMBOL_s (Object CURRENCY_SYMBOL_s)/*Character.sk:113*/
  {
    CURRENCY_SYMBOL = CURRENCY_SYMBOL_s;
  }
  /*Character.sk:207*/
  
Object Character_Character (Object self)/*Character.sk:207*/
  {
    return self;
  }
  /*Character.sk:211*/
  
Object Character_Character_char (Object self, Object value)/*Character.sk:211*/
  {
    self.value_Character = value;
    return self;
  }
  /*Character.sk:88*/
  
Object DASH_PUNCTUATION_g ()/*Character.sk:88*/
  {
    return DASH_PUNCTUATION;
  }
  /*Character.sk:89*/
  
void DASH_PUNCTUATION_s (Object DASH_PUNCTUATION_s)/*Character.sk:89*/
  {
    DASH_PUNCTUATION = DASH_PUNCTUATION_s;
  }
  /*Character.sk:48*/
  
Object DECIMAL_DIGIT_NUMBER_g ()/*Character.sk:48*/
  {
    return DECIMAL_DIGIT_NUMBER;
  }
  /*Character.sk:49*/
  
void DECIMAL_DIGIT_NUMBER_s (Object DECIMAL_DIGIT_NUMBER_s)/*Character.sk:49*/
  {
    DECIMAL_DIGIT_NUMBER = DECIMAL_DIGIT_NUMBER_s;
  }
  /*Character.sk:156*/
  
Object DIRECTIONALITY_ARABIC_NUMBER_g ()/*Character.sk:156*/
  {
    return DIRECTIONALITY_ARABIC_NUMBER;
  }
  /*Character.sk:157*/
  
void DIRECTIONALITY_ARABIC_NUMBER_s (Object DIRECTIONALITY_ARABIC_NUMBER_s)/*Character.sk:157*/
  {
    DIRECTIONALITY_ARABIC_NUMBER = DIRECTIONALITY_ARABIC_NUMBER_s;
  }
  /*Character.sk:168*/
  
Object DIRECTIONALITY_BOUNDARY_NEUTRAL_g ()/*Character.sk:168*/
  {
    return DIRECTIONALITY_BOUNDARY_NEUTRAL;
  }
  /*Character.sk:169*/
  
void DIRECTIONALITY_BOUNDARY_NEUTRAL_s (Object DIRECTIONALITY_BOUNDARY_NEUTRAL_s)/*Character.sk:169*/
  {
    DIRECTIONALITY_BOUNDARY_NEUTRAL = DIRECTIONALITY_BOUNDARY_NEUTRAL_s;
  }
  /*Character.sk:160*/
  
Object DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_g ()/*Character.sk:160*/
  {
    return DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
  }
  /*Character.sk:161*/
  
void DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_s (Object DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_s)/*Character.sk:161*/
  {
    DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_s;
  }
  /*Character.sk:148*/
  
Object DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_g ()/*Character.sk:148*/
  {
    return DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
  }
  /*Character.sk:149*/
  
void DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_s (Object DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_s)/*Character.sk:149*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_s;
  }
  /*Character.sk:152*/
  
Object DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_g ()/*Character.sk:152*/
  {
    return DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
  }
  /*Character.sk:153*/
  
void DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_s (Object DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_s)/*Character.sk:153*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_s;
  }
  /*Character.sk:144*/
  
Object DIRECTIONALITY_EUROPEAN_NUMBER_g ()/*Character.sk:144*/
  {
    return DIRECTIONALITY_EUROPEAN_NUMBER;
  }
  /*Character.sk:145*/
  
void DIRECTIONALITY_EUROPEAN_NUMBER_s (Object DIRECTIONALITY_EUROPEAN_NUMBER_s)/*Character.sk:145*/
  {
    DIRECTIONALITY_EUROPEAN_NUMBER = DIRECTIONALITY_EUROPEAN_NUMBER_s;
  }
  /*Character.sk:188*/
  
Object DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_g ()/*Character.sk:188*/
  {
    return DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
  }
  /*Character.sk:189*/
  
void DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_s (Object DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_s)/*Character.sk:189*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_s;
  }
  /*Character.sk:192*/
  
Object DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_g ()/*Character.sk:192*/
  {
    return DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
  }
  /*Character.sk:193*/
  
void DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_s (Object DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_s)/*Character.sk:193*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_s;
  }
  /*Character.sk:132*/
  
Object DIRECTIONALITY_LEFT_TO_RIGHT_g ()/*Character.sk:132*/
  {
    return DIRECTIONALITY_LEFT_TO_RIGHT;
  }
  /*Character.sk:133*/
  
void DIRECTIONALITY_LEFT_TO_RIGHT_s (Object DIRECTIONALITY_LEFT_TO_RIGHT_s)/*Character.sk:133*/
  {
    DIRECTIONALITY_LEFT_TO_RIGHT = DIRECTIONALITY_LEFT_TO_RIGHT_s;
  }
  /*Character.sk:164*/
  
Object DIRECTIONALITY_NONSPACING_MARK_g ()/*Character.sk:164*/
  {
    return DIRECTIONALITY_NONSPACING_MARK;
  }
  /*Character.sk:165*/
  
void DIRECTIONALITY_NONSPACING_MARK_s (Object DIRECTIONALITY_NONSPACING_MARK_s)/*Character.sk:165*/
  {
    DIRECTIONALITY_NONSPACING_MARK = DIRECTIONALITY_NONSPACING_MARK_s;
  }
  /*Character.sk:184*/
  
Object DIRECTIONALITY_OTHER_NEUTRALS_g ()/*Character.sk:184*/
  {
    return DIRECTIONALITY_OTHER_NEUTRALS;
  }
  /*Character.sk:185*/
  
void DIRECTIONALITY_OTHER_NEUTRALS_s (Object DIRECTIONALITY_OTHER_NEUTRALS_s)/*Character.sk:185*/
  {
    DIRECTIONALITY_OTHER_NEUTRALS = DIRECTIONALITY_OTHER_NEUTRALS_s;
  }
  /*Character.sk:172*/
  
Object DIRECTIONALITY_PARAGRAPH_SEPARATOR_g ()/*Character.sk:172*/
  {
    return DIRECTIONALITY_PARAGRAPH_SEPARATOR;
  }
  /*Character.sk:173*/
  
void DIRECTIONALITY_PARAGRAPH_SEPARATOR_s (Object DIRECTIONALITY_PARAGRAPH_SEPARATOR_s)/*Character.sk:173*/
  {
    DIRECTIONALITY_PARAGRAPH_SEPARATOR = DIRECTIONALITY_PARAGRAPH_SEPARATOR_s;
  }
  /*Character.sk:204*/
  
Object DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_g ()/*Character.sk:204*/
  {
    return DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
  }
  /*Character.sk:205*/
  
void DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_s (Object DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_s)/*Character.sk:205*/
  {
    DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_s;
  }
  /*Character.sk:140*/
  
Object DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_g ()/*Character.sk:140*/
  {
    return DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
  }
  /*Character.sk:141*/
  
void DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_s (Object DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_s)/*Character.sk:141*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_s;
  }
  /*Character.sk:196*/
  
Object DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_g ()/*Character.sk:196*/
  {
    return DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
  }
  /*Character.sk:197*/
  
void DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_s (Object DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_s)/*Character.sk:197*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_s;
  }
  /*Character.sk:200*/
  
Object DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_g ()/*Character.sk:200*/
  {
    return DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
  }
  /*Character.sk:201*/
  
void DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_s (Object DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_s)/*Character.sk:201*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_s;
  }
  /*Character.sk:136*/
  
Object DIRECTIONALITY_RIGHT_TO_LEFT_g ()/*Character.sk:136*/
  {
    return DIRECTIONALITY_RIGHT_TO_LEFT;
  }
  /*Character.sk:137*/
  
void DIRECTIONALITY_RIGHT_TO_LEFT_s (Object DIRECTIONALITY_RIGHT_TO_LEFT_s)/*Character.sk:137*/
  {
    DIRECTIONALITY_RIGHT_TO_LEFT = DIRECTIONALITY_RIGHT_TO_LEFT_s;
  }
  /*Character.sk:176*/
  
Object DIRECTIONALITY_SEGMENT_SEPARATOR_g ()/*Character.sk:176*/
  {
    return DIRECTIONALITY_SEGMENT_SEPARATOR;
  }
  /*Character.sk:177*/
  
void DIRECTIONALITY_SEGMENT_SEPARATOR_s (Object DIRECTIONALITY_SEGMENT_SEPARATOR_s)/*Character.sk:177*/
  {
    DIRECTIONALITY_SEGMENT_SEPARATOR = DIRECTIONALITY_SEGMENT_SEPARATOR_s;
  }
  /*Character.sk:128*/
  
Object DIRECTIONALITY_UNDEFINED_g ()/*Character.sk:128*/
  {
    return DIRECTIONALITY_UNDEFINED;
  }
  /*Character.sk:129*/
  
void DIRECTIONALITY_UNDEFINED_s (Object DIRECTIONALITY_UNDEFINED_s)/*Character.sk:129*/
  {
    DIRECTIONALITY_UNDEFINED = DIRECTIONALITY_UNDEFINED_s;
  }
  /*Character.sk:180*/
  
Object DIRECTIONALITY_WHITESPACE_g ()/*Character.sk:180*/
  {
    return DIRECTIONALITY_WHITESPACE;
  }
  /*Character.sk:181*/
  
void DIRECTIONALITY_WHITESPACE_s (Object DIRECTIONALITY_WHITESPACE_s)/*Character.sk:181*/
  {
    DIRECTIONALITY_WHITESPACE = DIRECTIONALITY_WHITESPACE_s;
  }
  /*Character.sk:40*/
  
Object ENCLOSING_MARK_g ()/*Character.sk:40*/
  {
    return ENCLOSING_MARK;
  }
  /*Character.sk:41*/
  
void ENCLOSING_MARK_s (Object ENCLOSING_MARK_s)/*Character.sk:41*/
  {
    ENCLOSING_MARK = ENCLOSING_MARK_s;
  }
  /*Character.sk:96*/
  
Object END_PUNCTUATION_g ()/*Character.sk:96*/
  {
    return END_PUNCTUATION;
  }
  /*Character.sk:97*/
  
void END_PUNCTUATION_s (Object END_PUNCTUATION_s)/*Character.sk:97*/
  {
    END_PUNCTUATION = END_PUNCTUATION_s;
  }
  /*Character.sk:124*/
  
Object FINAL_QUOTE_PUNCTUATION_g ()/*Character.sk:124*/
  {
    return FINAL_QUOTE_PUNCTUATION;
  }
  /*Character.sk:125*/
  
void FINAL_QUOTE_PUNCTUATION_s (Object FINAL_QUOTE_PUNCTUATION_s)/*Character.sk:125*/
  {
    FINAL_QUOTE_PUNCTUATION = FINAL_QUOTE_PUNCTUATION_s;
  }
  /*Character.sk:76*/
  
Object FORMAT_g ()/*Character.sk:76*/
  {
    return FORMAT;
  }
  /*Character.sk:77*/
  
void FORMAT_s (Object FORMAT_s)/*Character.sk:77*/
  {
    FORMAT = FORMAT_s;
  }
  /*Character.sk:52*/
  
Object LETTER_NUMBER_g ()/*Character.sk:52*/
  {
    return LETTER_NUMBER;
  }
  /*Character.sk:53*/
  
void LETTER_NUMBER_s (Object LETTER_NUMBER_s)/*Character.sk:53*/
  {
    LETTER_NUMBER = LETTER_NUMBER_s;
  }
  /*Character.sk:64*/
  
Object LINE_SEPARATOR_g ()/*Character.sk:64*/
  {
    return LINE_SEPARATOR;
  }
  /*Character.sk:65*/
  
void LINE_SEPARATOR_s (Object LINE_SEPARATOR_s)/*Character.sk:65*/
  {
    LINE_SEPARATOR = LINE_SEPARATOR_s;
  }
  /*Character.sk:20*/
  
Object LOWERCASE_LETTER_g ()/*Character.sk:20*/
  {
    return LOWERCASE_LETTER;
  }
  /*Character.sk:21*/
  
void LOWERCASE_LETTER_s (Object LOWERCASE_LETTER_s)/*Character.sk:21*/
  {
    LOWERCASE_LETTER = LOWERCASE_LETTER_s;
  }
  /*Character.sk:108*/
  
Object MATH_SYMBOL_g ()/*Character.sk:108*/
  {
    return MATH_SYMBOL;
  }
  /*Character.sk:109*/
  
void MATH_SYMBOL_s (Object MATH_SYMBOL_s)/*Character.sk:109*/
  {
    MATH_SYMBOL = MATH_SYMBOL_s;
  }
  /*Character.sk:8*/
  
Object MAX_RADIX_g ()/*Character.sk:8*/
  {
    return MAX_RADIX;
  }
  /*Character.sk:9*/
  
void MAX_RADIX_s (Object MAX_RADIX_s)/*Character.sk:9*/
  {
    MAX_RADIX = MAX_RADIX_s;
  }
  /*Character.sk:4*/
  
Object MIN_RADIX_g ()/*Character.sk:4*/
  {
    return MIN_RADIX;
  }
  /*Character.sk:5*/
  
void MIN_RADIX_s (Object MIN_RADIX_s)/*Character.sk:5*/
  {
    MIN_RADIX = MIN_RADIX_s;
  }
  /*Character.sk:28*/
  
Object MODIFIER_LETTER_g ()/*Character.sk:28*/
  {
    return MODIFIER_LETTER;
  }
  /*Character.sk:29*/
  
void MODIFIER_LETTER_s (Object MODIFIER_LETTER_s)/*Character.sk:29*/
  {
    MODIFIER_LETTER = MODIFIER_LETTER_s;
  }
  /*Character.sk:116*/
  
Object MODIFIER_SYMBOL_g ()/*Character.sk:116*/
  {
    return MODIFIER_SYMBOL;
  }
  /*Character.sk:117*/
  
void MODIFIER_SYMBOL_s (Object MODIFIER_SYMBOL_s)/*Character.sk:117*/
  {
    MODIFIER_SYMBOL = MODIFIER_SYMBOL_s;
  }
  /*Character.sk:36*/
  
Object NON_SPACING_MARK_g ()/*Character.sk:36*/
  {
    return NON_SPACING_MARK;
  }
  /*Character.sk:37*/
  
void NON_SPACING_MARK_s (Object NON_SPACING_MARK_s)/*Character.sk:37*/
  {
    NON_SPACING_MARK = NON_SPACING_MARK_s;
  }
  /*Character.sk:32*/
  
Object OTHER_LETTER_g ()/*Character.sk:32*/
  {
    return OTHER_LETTER;
  }
  /*Character.sk:33*/
  
void OTHER_LETTER_s (Object OTHER_LETTER_s)/*Character.sk:33*/
  {
    OTHER_LETTER = OTHER_LETTER_s;
  }
  /*Character.sk:56*/
  
Object OTHER_NUMBER_g ()/*Character.sk:56*/
  {
    return OTHER_NUMBER;
  }
  /*Character.sk:57*/
  
void OTHER_NUMBER_s (Object OTHER_NUMBER_s)/*Character.sk:57*/
  {
    OTHER_NUMBER = OTHER_NUMBER_s;
  }
  /*Character.sk:104*/
  
Object OTHER_PUNCTUATION_g ()/*Character.sk:104*/
  {
    return OTHER_PUNCTUATION;
  }
  /*Character.sk:105*/
  
void OTHER_PUNCTUATION_s (Object OTHER_PUNCTUATION_s)/*Character.sk:105*/
  {
    OTHER_PUNCTUATION = OTHER_PUNCTUATION_s;
  }
  /*Character.sk:120*/
  
Object OTHER_SYMBOL_g ()/*Character.sk:120*/
  {
    return OTHER_SYMBOL;
  }
  /*Character.sk:121*/
  
void OTHER_SYMBOL_s (Object OTHER_SYMBOL_s)/*Character.sk:121*/
  {
    OTHER_SYMBOL = OTHER_SYMBOL_s;
  }
  /*Character.sk:68*/
  
Object PARAGRAPH_SEPARATOR_g ()/*Character.sk:68*/
  {
    return PARAGRAPH_SEPARATOR;
  }
  /*Character.sk:69*/
  
void PARAGRAPH_SEPARATOR_s (Object PARAGRAPH_SEPARATOR_s)/*Character.sk:69*/
  {
    PARAGRAPH_SEPARATOR = PARAGRAPH_SEPARATOR_s;
  }
  /*Character.sk:80*/
  
Object PRIVATE_USE_g ()/*Character.sk:80*/
  {
    return PRIVATE_USE;
  }
  /*Character.sk:81*/
  
void PRIVATE_USE_s (Object PRIVATE_USE_s)/*Character.sk:81*/
  {
    PRIVATE_USE = PRIVATE_USE_s;
  }
  /*Character.sk:60*/
  
Object SPACE_SEPARATOR_g ()/*Character.sk:60*/
  {
    return SPACE_SEPARATOR;
  }
  /*Character.sk:61*/
  
void SPACE_SEPARATOR_s (Object SPACE_SEPARATOR_s)/*Character.sk:61*/
  {
    SPACE_SEPARATOR = SPACE_SEPARATOR_s;
  }
  /*Character.sk:92*/
  
Object START_PUNCTUATION_g ()/*Character.sk:92*/
  {
    return START_PUNCTUATION;
  }
  /*Character.sk:93*/
  
void START_PUNCTUATION_s (Object START_PUNCTUATION_s)/*Character.sk:93*/
  {
    START_PUNCTUATION = START_PUNCTUATION_s;
  }
  /*Character.sk:84*/
  
Object SURROGATE_g ()/*Character.sk:84*/
  {
    return SURROGATE;
  }
  /*Character.sk:85*/
  
void SURROGATE_s (Object SURROGATE_s)/*Character.sk:85*/
  {
    SURROGATE = SURROGATE_s;
  }
  /*Character.sk:24*/
  
Object TITLECASE_LETTER_g ()/*Character.sk:24*/
  {
    return TITLECASE_LETTER;
  }
  /*Character.sk:25*/
  
void TITLECASE_LETTER_s (Object TITLECASE_LETTER_s)/*Character.sk:25*/
  {
    TITLECASE_LETTER = TITLECASE_LETTER_s;
  }
  /*Character.sk:12*/
  
Object UNASSIGNED_g ()/*Character.sk:12*/
  {
    return UNASSIGNED;
  }
  /*Character.sk:13*/
  
void UNASSIGNED_s (Object UNASSIGNED_s)/*Character.sk:13*/
  {
    UNASSIGNED = UNASSIGNED_s;
  }
  /*Character.sk:16*/
  
Object UPPERCASE_LETTER_g ()/*Character.sk:16*/
  {
    return UPPERCASE_LETTER;
  }
  /*Character.sk:17*/
  
void UPPERCASE_LETTER_s (Object UPPERCASE_LETTER_s)/*Character.sk:17*/
  {
    UPPERCASE_LETTER = UPPERCASE_LETTER_s;
  }
  /*Character.sk:216*/
  
Object charValue (Object self)/*Character.sk:216*/
  {
    return self.value_Character;
  }
  /*Character.sk:220*/
  
Object equals_Object (Object self, Object obj)/*Character.sk:220*/
  {
    if((obj.__cid) == (Character()))/*Character.sk:221*/
    {
      {
        return new Object(__cid=-4, _bit=(self.value_Character._char) == (((obj.__cid) == (new Object(__cid=-2, _int=Character())._int) ? charValue@Character(obj) : null)._char));
      }
    }
    return new Object(__cid=-4, _bit=0);
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE PasswordManagerTest*/
package PasswordManagerTest{
  /*Passwor..erTest.sk:3*/
  
Object PasswordManagerTest_PasswordManagerTest (Object self)/*Passwor..erTest.sk:3*/
  {
    return self;
  }
  /*Passwor..erTest.sk:7*/
  
harness void main ()/*Passwor..erTest.sk:7*/
  {
    Object self = Object_Object(new Object(__cid=Object()));
    Object pasman = PasswordManager_PasswordManager_String(new Object(__cid=PasswordManager()), String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=5), A={'1','2','3','4','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=4)));
    if((pasman.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int))/*Passwor..erTest.sk:10*/
    {
      {
        addPassword_String_String@PasswordManager(pasman, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=6), A={'y','a','h','o','o','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=5)), String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=6), A={'1','2','3','4','5','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=5)));
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    if((pasman.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int))/*Passwor..erTest.sk:12*/
    {
      {
        addPassword_String_String@PasswordManager(pasman, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=7), A={'g','o','o','g','l','e','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=6)), String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=8), A={'5','4','4','1','9','4','4','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=7)));
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
    Object pass1 = ((pasman.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? getPass_String@PasswordManager(pasman, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=7), A={'g','o','o','g','l','e','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=6))) : null);
    assert (((pass1.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(pass1, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=8), A={'5','4','4','1','9','4','4','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=7))) : null)._bit); //Assert at Passwor..erTest.sk:15 (0)
  }
  /* END PACKAGE PasswordManagerTest*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  @Immutable()
  struct HashMap {
      @Immutable()
  }
  @Immutable()
  struct Hashmap extends HashMap@HashMap {
      @Immutable()
  }
  @Immutable()
  struct Put extends HashMap@HashMap {
      HashMap self;
      Object k;
      Object v;
      @Immutable()
  }
  @Immutable()
  struct Putb extends HashMap@HashMap {
      HashMap self;
      Object k;
      Object v;
      @Immutable()
  }
  @Immutable()
  struct Removeb extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  @Immutable()
  struct Remove extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  @Immutable()
  struct Get extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  @Immutable()
  struct Containskey extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  /*HashMap.sk:13*/
  
Object HashMap_HashMap ()/*HashMap.sk:13*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Hashmap());
  }
  /*HashMap.sk:37*/
  
Object containsKey_Object_Object (Object self, Object k)/*HashMap.sk:37*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Containskey(self=self._hashmap, k=k));
  }
  /*HashMap.sk:33*/
  
Object get_Object_Object (Object self, Object k)/*HashMap.sk:33*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Get(self=self._hashmap, k=k));
  }
  /*HashMap.sk:17*/
  
Object put_Object_Object_Object (Object self, Object k, Object v)/*HashMap.sk:17*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Put(self=self._hashmap, k=k, v=v));
  }
  /*HashMap.sk:21*/
  
Object putb_Object_Object_Object (Object self, Object k, Object v)/*HashMap.sk:21*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Putb(self=self._hashmap, k=k, v=v));
  }
  /*HashMap.sk:29*/
  
Object remove_Object_Object (Object self, Object k)/*HashMap.sk:29*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Remove(self=self._hashmap, k=k));
  }
  /*HashMap.sk:25*/
  
Object removeb_Object_Object (Object self, Object k)/*HashMap.sk:25*/
  {
    return new Object(__cid=HashMap(), _hashmap=new Removeb(self=self._hashmap, k=k));
  }
  /*HashMap.sk:41*/
  
Object xform_HashMap (HashMap self)/*HashMap.sk:41*/
  {
    switch(self){/*HashMap.sk:42*/
      case Hashmap:
      {
        {
          return xform_hashmap_HashMap(self);
        }
      }
      case Put:
      {
        {
          return xform_put_HashMap_Object_Object(self.self, self.k, self.v);
        }
      }
      case Putb:
      {
        {
          return xform_putb_HashMap_Object_Object(self.self, self.k, self.v);
        }
      }
      case Removeb:
      {
        {
          return xform_removeb_HashMap_Object(self.self, self.k);
        }
      }
      case Remove:
      {
        {
          return xform_remove_HashMap_Object(self.self, self.k);
        }
      }
      case Get:
      {
        {
          return xform_get_HashMap_Object(self.self, self.k);
        }
      }
      case Containskey:
      {
        {
          return xform_containsKey_HashMap_Object(self.self, self.k);
        }
      }
    }
    return null;
  }
  /*HashMap.sk:139*/
  
Object xform_containsKey_HashMap_Object (HashMap self, Object k)/*HashMap.sk:139*/
  {
    switch(self){/*HashMap.sk:140*/
      case Hashmap:
      {
        {
          return new Object(__cid=-4, _bit=0);
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:144 (0)
        }
      }
      case Putb:
      {
        {
          return (((self.k.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(self.k, k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(self.k, k) : null))))))))))))))))))._bit ? new Object(__cid=-4, _bit=1) : xform_containsKey_HashMap_Object(self.self, k));
        }
      }
      case Removeb:
      {
        {
          return (((k.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(k, self.k) : null))))))))))))))))))._bit ? new Object(__cid=-4, _bit=0) : xform_containsKey_HashMap_Object(self.self, k));
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:151 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:152 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:153 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:107*/
  
Object xform_get_HashMap_Object (HashMap self, Object k)/*HashMap.sk:107*/
  {
    switch(self){/*HashMap.sk:108*/
      case Hashmap:
      {
        {
          return null;
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:112 (0)
        }
      }
      case Putb:
      {
        {
          return (((k.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(k, self.k) : null))))))))))))))))))._bit ? self.v : xform_get_HashMap_Object(self.self, k));
        }
      }
      case Removeb:
      {
        {
          return (((k.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(k, self.k) : ((k.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(k, self.k) : null))))))))))))))))))._bit ? null : xform_get_HashMap_Object(self.self, k));
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:119 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:120 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:121 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:158*/
  
Object xform_hashmap_HashMap (HashMap self)/*HashMap.sk:158*/
  {
    switch(self){/*HashMap.sk:159*/
      case Hashmap:
      {
        {
          assert (0); //Assert at HashMap.sk:160 (0)
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:161 (0)
        }
      }
      case Putb:
      {
        {
          assert (0); //Assert at HashMap.sk:162 (0)
        }
      }
      case Removeb:
      {
        {
          assert (0); //Assert at HashMap.sk:163 (0)
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:164 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:165 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:166 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:94*/
  
Object xform_put_HashMap_Object_Object (HashMap self, Object k, Object v)/*HashMap.sk:94*/
  {
    switch(self){/*HashMap.sk:95*/
      case Hashmap:
      {
        {
          assert (0); //Assert at HashMap.sk:96 (0)
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:97 (0)
        }
      }
      case Putb:
      {
        {
          assert (0); //Assert at HashMap.sk:98 (0)
        }
      }
      case Removeb:
      {
        {
          assert (0); //Assert at HashMap.sk:99 (0)
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:100 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:101 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:102 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:81*/
  
Object xform_putb_HashMap_Object_Object (HashMap self, Object k, Object v)/*HashMap.sk:81*/
  {
    switch(self){/*HashMap.sk:82*/
      case Hashmap:
      {
        {
          assert (0); //Assert at HashMap.sk:83 (0)
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:84 (0)
        }
      }
      case Putb:
      {
        {
          assert (0); //Assert at HashMap.sk:85 (0)
        }
      }
      case Removeb:
      {
        {
          assert (0); //Assert at HashMap.sk:86 (0)
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:87 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:88 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:89 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:126*/
  
Object xform_remove_HashMap_Object (HashMap self, Object k)/*HashMap.sk:126*/
  {
    switch(self){/*HashMap.sk:127*/
      case Hashmap:
      {
        {
          assert (0); //Assert at HashMap.sk:128 (0)
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:129 (0)
        }
      }
      case Putb:
      {
        {
          assert (0); //Assert at HashMap.sk:130 (0)
        }
      }
      case Removeb:
      {
        {
          assert (0); //Assert at HashMap.sk:131 (0)
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:132 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:133 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:134 (0)
        }
      }
    }
    return null;
  }
  /*HashMap.sk:68*/
  
Object xform_removeb_HashMap_Object (HashMap self, Object k)/*HashMap.sk:68*/
  {
    switch(self){/*HashMap.sk:69*/
      case Hashmap:
      {
        {
          assert (0); //Assert at HashMap.sk:70 (0)
        }
      }
      case Put:
      {
        {
          assert (0); //Assert at HashMap.sk:71 (0)
        }
      }
      case Putb:
      {
        {
          assert (0); //Assert at HashMap.sk:72 (0)
        }
      }
      case Removeb:
      {
        {
          assert (0); //Assert at HashMap.sk:73 (0)
        }
      }
      case Remove:
      {
        {
          assert (0); //Assert at HashMap.sk:74 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at HashMap.sk:75 (0)
        }
      }
      case Containskey:
      {
        {
          assert (0); //Assert at HashMap.sk:76 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /*CharSequence.sk:3*/
  
Object CharSequence_CharSequence (Object self)/*CharSequence.sk:3*/
  {
    return self;
  }
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  @Immutable()
  struct ArrayList {
      @Immutable()
  }
  @Immutable()
  struct Arraylist extends ArrayList@ArrayList {
      @Immutable()
  }
  @Immutable()
  struct Add extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  @Immutable()
  struct Addb extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  @Immutable()
  struct Getb extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  @Immutable()
  struct Setb extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  @Immutable()
  struct Get extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  @Immutable()
  struct Set extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  @Immutable()
  struct Ensurecapacity extends ArrayList@ArrayList {
      ArrayList self;
      Object n;
      @Immutable()
  }
  @Immutable()
  struct Size extends ArrayList@ArrayList {
      ArrayList self;
      @Immutable()
  }
  /*ArrayList.sk:15*/
  
Object ArrayList_ArrayList ()/*ArrayList.sk:15*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Arraylist());
  }
  /*ArrayList.sk:19*/
  
Object add_Object_Object (Object self, Object e)/*ArrayList.sk:19*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Add(self=self._arraylist, e=e));
  }
  /*ArrayList.sk:23*/
  
Object addb_Object_Object (Object self, Object e)/*ArrayList.sk:23*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Addb(self=self._arraylist, e=e));
  }
  /*ArrayList.sk:43*/
  
Object ensureCapacity_Object_int (Object self, Object n)/*ArrayList.sk:43*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Ensurecapacity(self=self._arraylist, n=n));
  }
  /*ArrayList.sk:35*/
  
Object get_Object_int (Object self, Object i)/*ArrayList.sk:35*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Get(self=self._arraylist, i=i));
  }
  /*ArrayList.sk:27*/
  
Object getb_Object_int (Object self, Object i)/*ArrayList.sk:27*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Getb(self=self._arraylist, i=i));
  }
  /*ArrayList.sk:39*/
  
Object set_Object_int_Object (Object self, Object i, Object e)/*ArrayList.sk:39*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Set(self=self._arraylist, i=i, e=e));
  }
  /*ArrayList.sk:31*/
  
Object setb_Object_int_Object (Object self, Object i, Object e)/*ArrayList.sk:31*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Setb(self=self._arraylist, i=i, e=e));
  }
  /*ArrayList.sk:47*/
  
Object size_Object (Object self)/*ArrayList.sk:47*/
  {
    return new Object(__cid=ArrayList(), _arraylist=new Size(self=self._arraylist));
  }
  /*ArrayList.sk:51*/
  
Object xform_ArrayList (ArrayList self)/*ArrayList.sk:51*/
  {
    switch(self){/*ArrayList.sk:52*/
      case Arraylist:
      {
        {
          return xform_arraylist_ArrayList(self);
        }
      }
      case Add:
      {
        {
          return xform_add_ArrayList_Object(self.self, self.e);
        }
      }
      case Addb:
      {
        {
          return xform_addb_ArrayList_Object(self.self, self.e);
        }
      }
      case Getb:
      {
        {
          return xform_getb_ArrayList_int(self.self, self.i);
        }
      }
      case Setb:
      {
        {
          return xform_setb_ArrayList_int_Object(self.self, self.i, self.e);
        }
      }
      case Get:
      {
        {
          return xform_get_ArrayList_int(self.self, self.i);
        }
      }
      case Set:
      {
        {
          return xform_set_ArrayList_int_Object(self.self, self.i, self.e);
        }
      }
      case Ensurecapacity:
      {
        {
          return xform_ensureCapacity_ArrayList_int(self.self, self.n);
        }
      }
      case Size:
      {
        {
          return xform_size_ArrayList(self.self);
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:186*/
  
Object xform_add_ArrayList_Object (ArrayList self, Object e)/*ArrayList.sk:186*/
  {
    switch(self){/*ArrayList.sk:187*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:188 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:189 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:190 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:191 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:192 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:193 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:194 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:195 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:196 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:201*/
  
Object xform_addb_ArrayList_Object (ArrayList self, Object e)/*ArrayList.sk:201*/
  {
    switch(self){/*ArrayList.sk:202*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:203 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:204 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:205 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:206 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:207 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:208 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:209 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:210 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:211 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:216*/
  
Object xform_arraylist_ArrayList (ArrayList self)/*ArrayList.sk:216*/
  {
    switch(self){/*ArrayList.sk:217*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:218 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:219 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:220 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:221 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:222 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:223 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:224 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:225 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:226 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:84*/
  
Object xform_ensureCapacity_ArrayList_int (ArrayList self, Object n)/*ArrayList.sk:84*/
  {
    switch(self){/*ArrayList.sk:85*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:86 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:87 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:88 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:89 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:90 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:91 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:92 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:93 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:94 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:150*/
  
Object xform_get_ArrayList_int (ArrayList self, Object i)/*ArrayList.sk:150*/
  {
    switch(self){/*ArrayList.sk:151*/
      case Arraylist:
      {
        {
          return null;
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:155 (0)
        }
      }
      case Addb:
      {
        {
          return ((xform_size_ArrayList(self.self)._int) == ((i._int) - (new Object(__cid=-2, _int=1)._int)) ? self.e : xform_get_ArrayList_int(self.self, i));
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:159 (0)
        }
      }
      case Setb:
      {
        {
          return ((i._int) == (self.i._int) ? self.e : xform_get_ArrayList_int(self.self, i));
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:163 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:164 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:165 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:166 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:135*/
  
Object xform_getb_ArrayList_int (ArrayList self, Object i)/*ArrayList.sk:135*/
  {
    switch(self){/*ArrayList.sk:136*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:137 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:138 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:139 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:140 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:141 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:142 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:143 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:144 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:145 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:120*/
  
Object xform_set_ArrayList_int_Object (ArrayList self, Object i, Object e)/*ArrayList.sk:120*/
  {
    switch(self){/*ArrayList.sk:121*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:122 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:123 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:124 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:125 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:126 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:127 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:128 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:129 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:130 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:171*/
  
Object xform_setb_ArrayList_int_Object (ArrayList self, Object i, Object e)/*ArrayList.sk:171*/
  {
    switch(self){/*ArrayList.sk:172*/
      case Arraylist:
      {
        {
          assert (0); //Assert at ArrayList.sk:173 (0)
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:174 (0)
        }
      }
      case Addb:
      {
        {
          assert (0); //Assert at ArrayList.sk:175 (0)
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:176 (0)
        }
      }
      case Setb:
      {
        {
          assert (0); //Assert at ArrayList.sk:177 (0)
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:178 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:179 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:180 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:181 (0)
        }
      }
    }
    return null;
  }
  /*ArrayList.sk:99*/
  
Object xform_size_ArrayList (ArrayList self)/*ArrayList.sk:99*/
  {
    switch(self){/*ArrayList.sk:100*/
      case Arraylist:
      {
        {
          return new Object(__cid=-2, _int=0);
        }
      }
      case Add:
      {
        {
          assert (0); //Assert at ArrayList.sk:104 (0)
        }
      }
      case Addb:
      {
        {
          return new Object(__cid=-2, _int=(xform_size_ArrayList(self.self)._int) + (new Object(__cid=-2, _int=1)._int));
        }
      }
      case Getb:
      {
        {
          assert (0); //Assert at ArrayList.sk:108 (0)
        }
      }
      case Setb:
      {
        {
          return xform_size_ArrayList(self.self);
        }
      }
      case Get:
      {
        {
          assert (0); //Assert at ArrayList.sk:112 (0)
        }
      }
      case Set:
      {
        {
          assert (0); //Assert at ArrayList.sk:113 (0)
        }
      }
      case Ensurecapacity:
      {
        {
          assert (0); //Assert at ArrayList.sk:114 (0)
        }
      }
      case Size:
      {
        {
          assert (0); //Assert at ArrayList.sk:115 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE PasswordManager*/
package PasswordManager{
  Object passManager;
  /*Passwor..anager.sk:7*/
  
Object PasswordManager_PasswordManager (Object self)/*Passwor..anager.sk:7*/
  {
    return self;
  }
  /*Passwor..anager.sk:11*/
  
Object PasswordManager_PasswordManager_String (Object self, Object masterPassword)/*Passwor..anager.sk:11*/
  {
    self.cryptographer_PasswordManager = Cryptographer_Cryptographer(new Object(__cid=Cryptographer()));
    self.passMap_PasswordManager = PasswordMap_PasswordMap(new Object(__cid=PasswordMap()));
    return self;
  }
  /*Passwor..anager.sk:29*/
  
void addPassword_String_String (Object self, Object domain, Object passWord)/*Passwor..anager.sk:29*/
  {
    Object PassEncryption = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord) : null);
    Object domainHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, domain) : null);
    if((self.passMap_PasswordManager.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int))/*Passwor..anager.sk:32*/
    {
      {
        add_String_String@PasswordMap(self.passMap_PasswordManager, domainHash, PassEncryption);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
  }
  /*Passwor..anager.sk:58*/
  
void changeMaster_String (Object self, Object newMaster)/*Passwor..anager.sk:58*/
  {
    Object passHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, newMaster) : null);
    self.passMap_PasswordManager.masterHash_PasswordMap = passHash;
  }
  /*Passwor..anager.sk:23*/
  
Object checkMasterPassword_String (Object self, Object masterPassword)/*Passwor..anager.sk:23*/
  {
    Object passHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, masterPassword) : null);
    if(((passHash.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(passHash, self.passMap_PasswordManager.masterHash_PasswordMap) : null)._bit)/*Passwor..anager.sk:25*/
    {
      return new Object(__cid=-4, _bit=1);
    }
    return new Object(__cid=-4, _bit=0);
  }
  /*Passwor..anager.sk:55*/
  
void close (Object self)/*Passwor..anager.sk:55*/
  {
  }
  /*Passwor..anager.sk:43*/
  
void deletePassword_String (Object self, Object domain)/*Passwor..anager.sk:43*/
  {
    Object domainHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, domain) : null);
    if((self.passMap_PasswordManager.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int))/*Passwor..anager.sk:45*/
    {
      {
        remove_String@PasswordMap(self.passMap_PasswordManager, domainHash);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
  }
  /*Passwor..anager.sk:17*/
  
Object getPassManager_String (Object masterPassword)/*Passwor..anager.sk:17*/
  {
    if(passManager != (null))/*Passwor..anager.sk:18*/
    {
      return passManager;
    }
    passManager = PasswordManager_PasswordManager_String(new Object(__cid=PasswordManager()), masterPassword);
    return passManager;
  }
  /*Passwor..anager.sk:49*/
  
Object getPass_String (Object self, Object domain)/*Passwor..anager.sk:49*/
  {
    Object domainHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, domain) : null);
    Object PassEncryption = ((self.passMap_PasswordManager.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? get_String@PasswordMap(self.passMap_PasswordManager, domainHash) : null);
    return ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? decrypt_String@Cryptographer(self.cryptographer_PasswordManager, PassEncryption) : null);
  }
  /*Passwor..anager.sk:36*/
  
void modifyPassword_String_String (Object self, Object domain, Object passWord)/*Passwor..anager.sk:36*/
  {
    Object PassEncryption = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord) : null);
    Object domainHash = ((self.cryptographer_PasswordManager.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? hash_String@Cryptographer(self.cryptographer_PasswordManager, domain) : null);
    if((self.passMap_PasswordManager.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int))/*Passwor..anager.sk:39*/
    {
      {
        add_String_String@PasswordMap(self.passMap_PasswordManager, domainHash, PassEncryption);
      }
    }
    else
    {
      {
        0;
      }
    }
    { }
  }
  /*Passwor..anager.sk:4*/
  
Object passManager_g ()/*Passwor..anager.sk:4*/
  {
    return passManager;
  }
  /*Passwor..anager.sk:5*/
  
void passManager_s (Object passManager_s)/*Passwor..anager.sk:5*/
  {
    passManager = passManager_s;
  }
  /* END PACKAGE PasswordManager*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  @Immutable()
  struct SecureRandom {
      @Immutable()
  }
  @Immutable()
  struct Securerandom extends SecureRandom@SecureRandom {
      @Immutable()
  }
  @Immutable()
  struct Nextbytes extends SecureRandom@SecureRandom {
      SecureRandom self;
      Object k;
      @Immutable()
  }
  /*SecureRandom.sk:8*/
  
Object SecureRandom_SecureRandom ()/*SecureRandom.sk:8*/
  {
    return new Object(__cid=SecureRandom(), _securerandom=new Securerandom());
  }
  /*SecureRandom.sk:12*/
  
Object nextBytes_Object_Object (Object self, Object k)/*SecureRandom.sk:12*/
  {
    return new Object(__cid=SecureRandom(), _securerandom=new Nextbytes(self=self._securerandom, k=k));
  }
  /*SecureRandom.sk:16*/
  
Object xform_SecureRandom (SecureRandom self)/*SecureRandom.sk:16*/
  {
    switch(self){/*SecureRandom.sk:17*/
      case Securerandom:
      {
        {
          return xform_securerandom_SecureRandom(self);
        }
      }
      case Nextbytes:
      {
        {
          return xform_nextBytes_SecureRandom_Object(self.self, self.k);
        }
      }
    }
    return null;
  }
  /*SecureRandom.sk:28*/
  
Object xform_nextBytes_SecureRandom_Object (SecureRandom self, Object k)/*SecureRandom.sk:28*/
  {
    switch(self){/*SecureRandom.sk:29*/
      case Securerandom:
      {
        {
          {
            SecureRandom k_k;
            k_k = k._securerandom;
            switch(k_k){/*SecureRandom.sk:34*/
              case Securerandom:
              {
                {
                  return Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=16)));
                }
              }
              case Nextbytes:
              {
                {
                  assert (0); //Assert at SecureRandom.sk:38 (0)
                }
              }
            }
          }
        }
      }
      case Nextbytes:
      {
        {
          assert (0); //Assert at SecureRandom.sk:43 (0)
        }
      }
    }
    return null;
  }
  /*SecureRandom.sk:48*/
  
Object xform_securerandom_SecureRandom (SecureRandom self)/*SecureRandom.sk:48*/
  {
    switch(self){/*SecureRandom.sk:49*/
      case Securerandom:
      {
        {
          assert (0); //Assert at SecureRandom.sk:50 (0)
        }
      }
      case Nextbytes:
      {
        {
          assert (0); //Assert at SecureRandom.sk:51 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:3*/
  
Object String_String (Object self)/*String.sk:3*/
  {
    return self;
  }
  /*String.sk:22*/
  
Object String_String_byte (Object self, Object bytes)/*String.sk:22*/
  {
    Object len = bytes._array_object.length;
    self._value_String = Wrap_Array_char(new Array_char(length=len));
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa1 = (i._int) < (len._int);
      while(__sa1)
      {
        {
          {
            self._value_String._array_char.A[i._int] = new Object(__cid=-3, _char=((char)bytes._array_char.A[i._int]))._char;
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa1 = (i._int) < (len._int);
      }
    }
    self._count_String = len;
    return self;
  }
  /*String.sk:7*/
  
Object String_String_char_int_int (Object self, Object ca, Object offset, Object count)/*String.sk:7*/
  {
    if(((offset._int) > (new Object(__cid=-2, _int=0)._int)) && ((offset._int) < (ca._array_object.length._int)))/*String.sk:8*/
    {
      {
        Object tmp = Wrap_Array_char(new Array_char(length=count));
        {
          Object i = new Object(__cid=-2, _int=0);
          bit __sa0 = (i._int) < (count._int);
          while(__sa0)
          {
            {
              {
                tmp._array_char.A[i._int] = ca._array_char.A[(i._int) + (offset._int)];
              }
            }
            i = new Object(__cid=-2, _int=(i._int) + 1);
            __sa0 = (i._int) < (count._int);
          }
        }
        self._value_String = tmp;
      }
    }
    else
    {
      {
        self._value_String = ca;
      }
    }
    self._count_String = count;
    return self;
  }
  /*String.sk:43*/
  
Object charAt_int (Object self, Object index)/*String.sk:43*/
  {
    if(((new Object(__cid=-2, _int=0)._int) <= (index._int)) && ((index._int) < (self._count_String._int)))/*String.sk:44*/
    {
      return new Object(__cid=-3, _char=self._value_String._array_char.A[index._int]);
    }
    return new Object(__cid=-3, _char='\0');
  }
  /*String.sk:108*/
  
Object compareTo_String (Object self, Object str)/*String.sk:108*/
  {
    return compare_String_String(((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? toString@String(self) : null), str);
  }
  /*String.sk:112*/
  
Object compare_String_String (Object s1, Object s2)/*String.sk:112*/
  {
    Object l1 = ((s1.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(s1) : null);
    Object l2 = ((s2.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(s2) : null);
    Object lendiff = new Object(__cid=-2, _int=(l1._int) - (l2._int));
    Object smaller = l1;
    if((l1._int) > (l2._int))/*String.sk:117*/
    {
      {
        smaller = l2;
      }
    }
    else
    {
      {
        {
          Object i = new Object(__cid=-2, _int=0);
          bit __sa5 = (i._int) < (smaller._int);
          while(__sa5)
          {
            {
              {
                Object c1 = ((s1.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(s1, i) : null);
                Object c2 = ((s2.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(s2, i) : null);
                if((c1._char) != (c2._char))/*String.sk:124*/
                {
                  {
                    return new Object(__cid=-3, _char=(c1._char) - (c2._char));
                  }
                }
              }
            }
            i = new Object(__cid=-2, _int=(i._int) + 1);
            __sa5 = (i._int) < (smaller._int);
          }
        }
        if((lendiff._int) != (new Object(__cid=-2, _int=0)._int))/*String.sk:128*/
        {
          return lendiff;
        }
        return new Object(__cid=-2, _int=0);
      }
    }
  }
  /*String.sk:133*/
  
Object concat_String (Object self, Object str)/*String.sk:133*/
  {
    Object otherLen = ((str.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(str) : null);
    if((otherLen._int) == (new Object(__cid=-2, _int=0)._int))/*String.sk:135*/
    {
      {
        return self;
      }
    }
    Object thisLen = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null);
    Object totalLen = new Object(__cid=-2, _int=(((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null)._int) + (otherLen._int));
    Object ret = Wrap_Array_char(new Array_char(length=totalLen));
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa6 = (i._int) < (thisLen._int);
      while(__sa6)
      {
        {
          {
            ret._array_char.A[i._int] = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(self, i) : null)._char;
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa6 = (i._int) < (thisLen._int);
      }
    }
    {
      Object i = thisLen;
      bit __sa7 = (i._int) < (totalLen._int);
      while(__sa7)
      {
        {
          {
            ret._array_char.A[i._int] = ((str.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(str, new Object(__cid=-2, _int=(i._int) - (thisLen._int))) : null)._char;
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa7 = (i._int) < (totalLen._int);
      }
    }
    return String_String_char_int_int(new Object(__cid=String()), ret, new Object(__cid=-2, _int=0), totalLen);
  }
  /*String.sk:150*/
  
Object equalsIgnoreCase_Object (Object self, Object obj)/*String.sk:150*/
  {
    return equals_Object@String(self, obj);
  }
  /*String.sk:154*/
  
Object equals_Object (Object self, Object obj)/*String.sk:154*/
  {
    Object isEqual = new Object(__cid=-4, _bit=0);
    if((obj.__cid) == (String()))/*String.sk:156*/
    {
      {
        isEqual = new Object(__cid=-4, _bit=1);
        Object s = obj;
        Object sLen = ((s.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(s) : null);
        Object tLen = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null);
        if((sLen._int) != (tLen._int))/*String.sk:161*/
        {
          isEqual = new Object(__cid=-4, _bit=0);
        }
        {
          Object i = new Object(__cid=-2, _int=0);
          bit __sa8 = ((i._int) < (sLen._int)) && ((isEqual._bit) == (new Object(__cid=-4, _bit=1)._bit));
          while(__sa8)
          {
            {
              {
                if((s._value_String._array_char.A[i._int]) != (self._value_String._array_char.A[i._int]))/*String.sk:163*/
                {
                  {
                    isEqual = new Object(__cid=-4, _bit=0);
                  }
                }
              }
            }
            i = new Object(__cid=-2, _int=(i._int) + 1);
            __sa8 = ((i._int) < (sLen._int)) && ((isEqual._bit) == (new Object(__cid=-4, _bit=1)._bit));
          }
        }
      }
    }
    return isEqual;
  }
  /*String.sk:214*/
  
Object getBytes (Object self)/*String.sk:214*/
  {
    return getBytes_String(((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? toString@String(self) : null));
  }
  /*String.sk:218*/
  
Object getBytes_String (Object str)/*String.sk:218*/
  {
    Object len = ((str.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(str) : null);
    Object bytes = Wrap_Array_char(new Array_char(length=len));
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa14 = (i._int) < (len._int);
      while(__sa14)
      {
        {
          {
            bytes._array_char.A[i._int] = ((char)((str.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(str, i) : null));
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa14 = (i._int) < (len._int);
      }
    }
    return bytes;
  }
  /*String.sk:171*/
  
Object hashCode (Object self)/*String.sk:171*/
  {
    Object n = self._count_String;
    Object hash = new Object(__cid=-2, _int=0);
    Object temp = new Object(__cid=-2, _int=0);
    if((n._int) == (new Object(__cid=-2, _int=0)._int))/*String.sk:173*/
    {
      {
        return new Object(__cid=-2, _int=0);
      }
    }
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa9 = (i._int) < (n._int);
      while(__sa9)
      {
        {
          {
            temp = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(self, i) : null);
            {
              Object j = new Object(__cid=-2, _int=0);
              bit __sa10 = (j._int) < (((n._int) - (new Object(__cid=-2, _int=1)._int)) - (i._int));
              while(__sa10)
              {
                {
                  {
                    temp = new Object(__cid=-2, _int=(temp._int) * (new Object(__cid=-2, _int=31)._int));
                  }
                }
                j = new Object(__cid=-2, _int=(j._int) + 1);
                __sa10 = (j._int) < (((n._int) - (new Object(__cid=-2, _int=1)._int)) - (i._int));
              }
            }
            hash = new Object(__cid=-2, _int=(hash._int) + (temp._int));
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa9 = (i._int) < (n._int);
      }
    }
    return hash;
  }
  /*String.sk:60*/
  
Object indexOf_String (Object self, Object s)/*String.sk:60*/
  {
    return indexOf_String_int@String(self, s, new Object(__cid=-2, _int=0));
  }
  /*String.sk:64*/
  
Object indexOf_String_int (Object self, Object s, Object i)/*String.sk:64*/
  {
    Object tLen = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null);
    Object sLen = ((s.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(s) : null);
    Object index = i;
    Object mLen = new Object(__cid=-2, _int=0);
    Object j;
    if((((i._int) >= (tLen._int)) || ((i._int) < (new Object(__cid=-2, _int=0)._int))) || ((sLen._int) == (new Object(__cid=-2, _int=0)._int)))/*String.sk:70*/
    {
      {
        return new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
      }
    }
    {
      j = i;
      bit __sa3 = (((j._int) < (tLen._int)) && ((mLen._int) < (sLen._int))) && (((j._int) - (index._int)) < (sLen._int));
      while(__sa3)
      {
        {
          {
            if((((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(self, j) : null)._char) != (((s.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(s, new Object(__cid=-2, _int=(j._int) - (index._int))) : null)._char))/*String.sk:74*/
            {
              {
                mLen = new Object(__cid=-2, _int=0);
                index = new Object(__cid=-2, _int=(index._int) + 1);
                j = index;
              }
            }
            else
            {
              {
                mLen = new Object(__cid=-2, _int=(mLen._int) + 1);
                j = new Object(__cid=-2, _int=(j._int) + 1);
              }
            }
          }
        }
        { }
        __sa3 = (((j._int) < (tLen._int)) && ((mLen._int) < (sLen._int))) && (((j._int) - (index._int)) < (sLen._int));
      }
    }
    if((mLen._int) != (sLen._int))/*String.sk:84*/
    {
      {
        index = new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
      }
    }
    return index;
  }
  /*String.sk:90*/
  
Object indexOf_char (Object self, Object c)/*String.sk:90*/
  {
    return indexOf_char_int@String(self, c, new Object(__cid=-2, _int=0));
  }
  /*String.sk:94*/
  
Object indexOf_char_int (Object self, Object c, Object i)/*String.sk:94*/
  {
    Object len = ((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null);
    Object index = new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
    if(((i._int) >= (len._int)) || ((i._int) < (new Object(__cid=-2, _int=0)._int)))/*String.sk:97*/
    {
      {
        return index;
      }
    }
    {
      Object j = i;
      bit __sa4 = (j._int) < (len._int);
      while(__sa4)
      {
        {
          {
            if((((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(self, j) : null)._char) == (c._char))/*String.sk:101*/
            {
              {
                return j;
              }
            }
          }
        }
        j = new Object(__cid=-2, _int=(j._int) + 1);
        __sa4 = (j._int) < (len._int);
      }
    }
    return index;
  }
  /*String.sk:48*/
  
Object length (Object self)/*String.sk:48*/
  {
    return self._count_String;
  }
  /*String.sk:186*/
  
Object replace_char_char (Object self, Object oldChar, Object newChar)/*String.sk:186*/
  {
    if((oldChar._char) != (newChar._char))/*String.sk:187*/
    {
      {
        Object len = self._count_String;
        Object i = new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
        Object stop = new Object(__cid=-2, _int=0);
        Object val = self._value_String;
        {
          bit __sa11 = (i._int) < (len._int);
          while(__sa11)
          {
            {
              {
                i = new Object(__cid=-2, _int=(i._int) + (new Object(__cid=-2, _int=1)._int));
                if(((val._array_char.A[i._int]) == (oldChar._char)) && ((stop._int) == (new Object(__cid=-2, _int=0)._int)))/*String.sk:194*/
                {
                  {
                    stop = i;
                  }
                }
              }
            }
            __sa11 = (i._int) < (len._int);
          }
        }
        if((stop._int) < (len._int))/*String.sk:198*/
        {
          {
            Object buf = Wrap_Array_char(new Array_char(length=len));
            {
              Object j = new Object(__cid=-2, _int=0);
              bit __sa12 = (j._int) < (stop._int);
              while(__sa12)
              {
                {
                  {
                    buf._array_char.A[j._int] = val._array_char.A[j._int];
                  }
                }
                j = new Object(__cid=-2, _int=(j._int) + 1);
                __sa12 = (j._int) < (stop._int);
              }
            }
            {
              bit __sa13 = (stop._int) < (len._int);
              while(__sa13)
              {
                {
                  {
                    Object c = new Object(__cid=-3, _char=val._array_char.A[stop._int]);
                    buf._array_char.A[stop._int] = ((c._char) == (oldChar._char) ? newChar : c)._char;
                    stop = new Object(__cid=-2, _int=(stop._int) + 1);
                  }
                }
                __sa13 = (stop._int) < (len._int);
              }
            }
            return String_String_char_int_int(new Object(__cid=String()), buf, new Object(__cid=-2, _int=0), len);
          }
        }
      }
    }
    return self;
  }
  /*String.sk:56*/
  
void setCharAt_int_char (Object self, Object i, Object c)/*String.sk:56*/
  {
    self._value_String._array_char.A[i._int] = c._char;
  }
  /*String.sk:240*/
  
Object split_String (Object self, Object regex)/*String.sk:240*/
  {
    return split_String_int@String(self, regex, new Object(__cid=-2, _int=0));
  }
  /*String.sk:244*/
  
Object split_String_int (Object self, Object regex, Object limit)/*String.sk:244*/
  {
    Object off = new Object(__cid=-2, _int=0);
    Object ch = ((regex.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(regex, new Object(__cid=-2, _int=0)) : null);
    Object next = indexOf_char_int@String(self, ch, off);
    Object limited = new Object(__cid=-2, _int=(limit._int) > (new Object(__cid=-2, _int=0)._int));
    Object size = new Object(__cid=-2, _int=0);
    {
      bit __sa15 = (next._int) != (-(new Object(__cid=-2, _int=1)._int));
      while(__sa15)
      {
        {
          {
            if((!(limited._bit)) || ((size._int) < ((limit._int) - (new Object(__cid=-2, _int=1)._int))))/*String.sk:251*/
            {
              {
                off = new Object(__cid=-2, _int=(next._int) + (new Object(__cid=-2, _int=1)._int));
                next = indexOf_char_int@String(self, ch, off);
              }
            }
            else
            {
              {
                off = self._value_String._array_object.length;
                next = new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
              }
            }
            size = new Object(__cid=-2, _int=(size._int) + 1);
          }
        }
        __sa15 = (next._int) != (-(new Object(__cid=-2, _int=1)._int));
      }
    }
    off = new Object(__cid=-2, _int=0);
    ch = ((regex.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(regex, new Object(__cid=-2, _int=0)) : null);
    next = indexOf_char_int@String(self, ch, off);
    limited = new Object(__cid=-2, _int=(limit._int) > (new Object(__cid=-2, _int=0)._int));
    Object list = Wrap_Array_Object(new Array_Object(length=size));
    size = new Object(__cid=-2, _int=0);
    {
      bit __sa16 = (next._int) != (-(new Object(__cid=-2, _int=1)._int));
      while(__sa16)
      {
        {
          {
            if((!(limited._bit)) || ((size._int) < ((limit._int) - (new Object(__cid=-2, _int=1)._int))))/*String.sk:268*/
            {
              {
                list._array_object.A[size._int] = substring_int_int@String(self, off, next);
                off = new Object(__cid=-2, _int=(next._int) + (new Object(__cid=-2, _int=1)._int));
                next = indexOf_char_int@String(self, ch, off);
              }
            }
            else
            {
              {
                list._array_object.A[size._int] = substring_int_int@String(self, off, self._count_String);
                off = self._value_String._array_object.length;
                next = new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int));
              }
            }
            size = new Object(__cid=-2, _int=(size._int) + 1);
          }
        }
        __sa16 = (next._int) != (-(new Object(__cid=-2, _int=1)._int));
      }
    }
    if((off._int) == (new Object(__cid=-2, _int=0)._int))/*String.sk:280*/
    {
      {
        Object res = Wrap_Array_Object(new Array_Object(length=new Object(__cid=-2, _int=1)));
        res._array_object.A[0] = self;
        return res;
      }
    }
    if((!(limited._bit)) || ((size._int) < (limit._int)))/*String.sk:284*/
    {
      {
        list._array_object.A[size._int] = substring_int_int@String(self, off, self._count_String);
        size = new Object(__cid=-2, _int=(size._int) + 1);
      }
    }
    Object resultSize = list._array_object.length;
    if((limit._int) == (new Object(__cid=-2, _int=0)._int))/*String.sk:289*/
    {
      {
        Object tmp = list._array_object.A[(resultSize._int) - (new Object(__cid=-2, _int=1)._int)];
        {
          bit __sa17 = ((resultSize._int) > (new Object(__cid=-2, _int=0)._int)) && ((((tmp.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(tmp) : null)._int) == (new Object(__cid=-2, _int=0)._int));
          while(__sa17)
          {
            {
              {
                resultSize = new Object(__cid=-2, _int=(resultSize._int) - 1);
              }
            }
            __sa17 = ((resultSize._int) > (new Object(__cid=-2, _int=0)._int)) && ((((tmp.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(tmp) : null)._int) == (new Object(__cid=-2, _int=0)._int));
          }
        }
      }
    }
    Object result = Wrap_Array_Object(new Array_Object(length=resultSize));
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa18 = (i._int) < (resultSize._int);
      while(__sa18)
      {
        {
          {
            result._array_object.A[i._int] = list._array_object.A[i._int];
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa18 = (i._int) < (resultSize._int);
      }
    }
    return result;
  }
  /*String.sk:32*/
  
Object startsWith_String (Object self, Object suffix)/*String.sk:32*/
  {
    Object len = ((suffix.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(suffix) : null);
    if((len._int) > (((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? length@String(self) : null)._int))/*String.sk:34*/
    {
      return new Object(__cid=-4, _bit=0);
    }
    {
      Object i = new Object(__cid=-2, _int=0);
      bit __sa2 = (i._int) < (len._int);
      while(__sa2)
      {
        {
          {
            if((((self.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(self, i) : null)._char) != (((suffix.__cid) == (new Object(__cid=-2, _int=String())._int) ? charAt_int@String(suffix, i) : null)._char))/*String.sk:36*/
            {
              {
                return new Object(__cid=-4, _bit=0);
              }
            }
          }
        }
        i = new Object(__cid=-2, _int=(i._int) + 1);
        __sa2 = (i._int) < (len._int);
      }
    }
    return new Object(__cid=-4, _bit=1);
  }
  /*String.sk:227*/
  
Object substring_int (Object self, Object beginIndex)/*String.sk:227*/
  {
    Object subLen = new Object(__cid=-2, _int=(self._count_String._int) - (beginIndex._int));
    assert ((subLen._int) > (new Object(__cid=-2, _int=0)._int)); //Assert at String.sk:229 (0)
    return ((beginIndex._int) == (new Object(__cid=-2, _int=0)._int) ? self : String_String_char_int_int(new Object(__cid=String()), self._value_String, beginIndex, subLen));
  }
  /*String.sk:233*/
  
Object substring_int_int (Object self, Object beginIndex, Object endIndex)/*String.sk:233*/
  {
    assert (((beginIndex._int) >= (new Object(__cid=-2, _int=0)._int)) && ((endIndex._int) <= (self._value_String._array_object.length._int))); //Assert at String.sk:234 (0)
    Object subLen = new Object(__cid=-2, _int=(endIndex._int) - (beginIndex._int));
    assert ((subLen._int) > (new Object(__cid=-2, _int=0)._int)); //Assert at String.sk:236 (0)
    return (((beginIndex._int) == (new Object(__cid=-2, _int=0)._int)) && ((endIndex._int) == (self._count_String._int)) ? self : String_String_char_int_int(new Object(__cid=String()), self._value_String, beginIndex, subLen));
  }
  /*String.sk:52*/
  
Object toString (Object self)/*String.sk:52*/
  {
    return self;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  @Immutable()
  struct Mac {
      @Immutable()
  }
  @Immutable()
  struct Mac_empty extends Mac@Mac {
      @Immutable()
  }
  @Immutable()
  struct Init extends Mac@Mac {
      Mac self;
      Object key;
      @Immutable()
  }
  @Immutable()
  struct Initb extends Mac@Mac {
      Mac self;
      Object key;
      @Immutable()
  }
  @Immutable()
  struct Dofinal extends Mac@Mac {
      Mac self;
      Object text;
      @Immutable()
  }
  /*Mac.sk:10*/
  
Object Mac_Mac ()/*Mac.sk:10*/
  {
    return new Object(__cid=Mac(), _mac=new Mac_empty());
  }
  /*Mac.sk:22*/
  
Object doFinal_Object_Object (Object self, Object text)/*Mac.sk:22*/
  {
    return new Object(__cid=Mac(), _mac=new Dofinal(self=self._mac, text=text));
  }
  /*Mac.sk:14*/
  
Object init_Object_SecretKeySpec (Object self, Object key)/*Mac.sk:14*/
  {
    return new Object(__cid=Mac(), _mac=new Init(self=self._mac, key=key));
  }
  /*Mac.sk:18*/
  
Object initb_Object_SecretKeySpec (Object self, Object key)/*Mac.sk:18*/
  {
    return new Object(__cid=Mac(), _mac=new Initb(self=self._mac, key=key));
  }
  /*Mac.sk:26*/
  
Object xform_Mac (Mac self)/*Mac.sk:26*/
  {
    switch(self){/*Mac.sk:27*/
      case Mac_empty:
      {
        {
          return xform_mac_Empty_Mac(self);
        }
      }
      case Init:
      {
        {
          return xform_init_Mac_SecretKeySpec(self.self, self.key);
        }
      }
      case Initb:
      {
        {
          return xform_initb_Mac_SecretKeySpec(self.self, self.key);
        }
      }
      case Dofinal:
      {
        {
          return xform_doFinal_Mac_Object(self.self, self.text);
        }
      }
    }
    return null;
  }
  /*Mac.sk:44*/
  
Object xform_doFinal_Mac_Object (Mac self, Object text)/*Mac.sk:44*/
  {
    switch(self){/*Mac.sk:45*/
      case Mac_empty:
      {
        {
          assert (0); //Assert at Mac.sk:46 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Mac.sk:47 (0)
        }
      }
      case Initb:
      {
        {
          return text;
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Mac.sk:51 (0)
        }
      }
    }
    return null;
  }
  /*Mac.sk:66*/
  
Object xform_init_Mac_SecretKeySpec (Mac self, Object key)/*Mac.sk:66*/
  {
    switch(self){/*Mac.sk:67*/
      case Mac_empty:
      {
        {
          assert (0); //Assert at Mac.sk:68 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Mac.sk:69 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Mac.sk:70 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Mac.sk:71 (0)
        }
      }
    }
    return null;
  }
  /*Mac.sk:56*/
  
Object xform_initb_Mac_SecretKeySpec (Mac self, Object key)/*Mac.sk:56*/
  {
    switch(self){/*Mac.sk:57*/
      case Mac_empty:
      {
        {
          assert (0); //Assert at Mac.sk:58 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Mac.sk:59 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Mac.sk:60 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Mac.sk:61 (0)
        }
      }
    }
    return null;
  }
  /*Mac.sk:76*/
  
Object xform_mac_Empty_Mac (Mac self)/*Mac.sk:76*/
  {
    switch(self){/*Mac.sk:77*/
      case Mac_empty:
      {
        {
          assert (0); //Assert at Mac.sk:78 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Mac.sk:79 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Mac.sk:80 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Mac.sk:81 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:3*/
  
Object Integer_Integer (Object self)/*Integer.sk:3*/
  {
    return self;
  }
  /*Integer.sk:7*/
  
Object Integer_Integer_int (Object self, Object value)/*Integer.sk:7*/
  {
    self.value_Integer = value;
    return self;
  }
  /*Integer.sk:16*/
  
Object compareTo_Integer (Object self, Object anotherInteger)/*Integer.sk:16*/
  {
    return compare_int_int(self.value_Integer, ((anotherInteger.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? intValue@Integer(anotherInteger) : null));
  }
  /*Integer.sk:20*/
  
Object compare_int_int (Object x, Object y)/*Integer.sk:20*/
  {
    return ((x._int) < (y._int) ? new Object(__cid=-2, _int=-(new Object(__cid=-2, _int=1)._int)) : ((x._int) == (y._int) ? new Object(__cid=-2, _int=0) : new Object(__cid=-2, _int=1)));
  }
  /*Integer.sk:24*/
  
Object equals_Object (Object self, Object obj)/*Integer.sk:24*/
  {
    if((obj.__cid) == (Integer()))/*Integer.sk:25*/
    {
      {
        return new Object(__cid=-4, _bit=(self.value_Integer._int) == (((obj.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? intValue@Integer(obj) : null)._int));
      }
    }
    return new Object(__cid=-4, _bit=0);
  }
  /*Integer.sk:31*/
  
Object hashCode (Object self)/*Integer.sk:31*/
  {
    return self.value_Integer;
  }
  /*Integer.sk:12*/
  
Object intValue (Object self)/*Integer.sk:12*/
  {
    return self.value_Integer;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /*SecretKey.sk:3*/
  
Object SecretKey_SecretKey (Object self)/*SecretKey.sk:3*/
  {
    return self;
  }
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /*Assert.sk:3*/
  
Object Assert_Assert (Object self)/*Assert.sk:3*/
  {
    return self;
  }
  /*Assert.sk:45*/
  
void assertEquals_Object_Object (Object expected, Object actual)/*Assert.sk:45*/
  {
    assertEquals_String_Object_Object(null, expected, actual);
  }
  /*Assert.sk:30*/
  
void assertEquals_String_Object_Object (Object message, Object expected, Object actual)/*Assert.sk:30*/
  {
    assert (((expected.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(expected, actual) : null))))))))))))))))))._bit); //Assert at Assert.sk:31 (0)
  }
  /*Assert.sk:49*/
  
void assertEquals_int_int (Object expected, Object actual)/*Assert.sk:49*/
  {
    assert ((expected._int) == (actual._int)); //Assert at Assert.sk:50 (0)
  }
  /*Assert.sk:15*/
  
void assertFalse_String_boolean (Object message, Object condition)/*Assert.sk:15*/
  {
    assertTrue_String_boolean(message, new Object(__cid=-4, _bit=!(condition._bit)));
  }
  /*Assert.sk:19*/
  
void assertFalse_boolean (Object condition)/*Assert.sk:19*/
  {
    assertFalse_String_boolean(String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=1), A={'\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=0)), condition);
  }
  /*Assert.sk:60*/
  
void assertNull_Object (Object object)/*Assert.sk:60*/
  {
    assertNull_String_Object(null, object);
  }
  /*Assert.sk:53*/
  
void assertNull_String_Object (Object message, Object object)/*Assert.sk:53*/
  {
    if(object == (null))/*Assert.sk:54*/
    {
      {
        return;
      }
    }
    failNotNull_String_Object(message, object);
  }
  /*Assert.sk:7*/
  
void assertTrue_String_boolean (Object message, Object condition)/*Assert.sk:7*/
  {
    assert (condition._bit); //Assert at Assert.sk:8 (0)
  }
  /*Assert.sk:11*/
  
void assertTrue_boolean (Object condition)/*Assert.sk:11*/
  {
    assertTrue_String_boolean(String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=1), A={'\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=0)), condition);
  }
  /*Assert.sk:34*/
  
Object equalsRegardingNull_Object_Object (Object expected, Object actual)/*Assert.sk:34*/
  {
    if(expected == (null))/*Assert.sk:35*/
    {
      {
        return new Object(__cid=-4, _bit=actual == (null));
      }
    }
    return isEquals_Object_Object(expected, actual);
  }
  /*Assert.sk:68*/
  
void failNotEquals_String_Object_Object (Object message, Object expected, Object actual)/*Assert.sk:68*/
  {
    fail_String(format_String_Object_Object(message, expected, actual));
  }
  /*Assert.sk:64*/
  
void failNotNull_String_Object (Object message, Object actual)/*Assert.sk:64*/
  {
    assert (new Object(__cid=-4, _bit=0)._bit); //Assert at Assert.sk:65 (0)
  }
  /*Assert.sk:23*/
  
void fail_String (Object message)/*Assert.sk:23*/
  {
    if(message == (null))/*Assert.sk:24*/
    {
      {
      }
    }
  }
  /*Assert.sk:72*/
  
Object format_String_Object_Object (Object message, Object expected, Object actual)/*Assert.sk:72*/
  {
    return String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=1), A={'\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=0));
  }
  /*Assert.sk:41*/
  
Object isEquals_Object_Object (Object expected, Object actual)/*Assert.sk:41*/
  {
    return ((expected.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(expected, actual) : ((expected.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(expected, actual) : null))))))))))))))))));
  }
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE PasswordMap*/
package PasswordMap{
  /*PasswordMap.sk:3*/
  
Object PasswordMap_PasswordMap (Object self)/*PasswordMap.sk:3*/
  {
    self.passMap_PasswordMap = HashMap_HashMap();
    self.masterHash_PasswordMap = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=16), A={'S','e','c','r','e','t',' ','P','a','s','s','w','o','r','d','\0'})), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=15));
    return self;
  }
  /*PasswordMap.sk:9*/
  
void add_String_String (Object self, Object tag, Object passEncryption)/*PasswordMap.sk:9*/
  {
    ((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? put_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null);
    self.passMap_PasswordMap = ((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? putb_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null);
  }
  /*PasswordMap.sk:17*/
  
Object get_String (Object self, Object domainHash)/*PasswordMap.sk:17*/
  {
    return ((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? get_Object_Object@HashMap(self.passMap_PasswordMap, domainHash) : null);
  }
  /*PasswordMap.sk:13*/
  
void remove_String (Object self, Object tag)/*PasswordMap.sk:13*/
  {
    if(((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? containsKey_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null)._bit)/*PasswordMap.sk:14*/
    {
      ((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? remove_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null);
    }
    self.passMap_PasswordMap = ((self.passMap_PasswordMap.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? removeb_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null);
  }
  /* END PACKAGE PasswordMap*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      Object length;
      bit[length._int] A;
  }
  struct Array_char {
      Object length;
      char[length._int] A;
  }
  struct Array_int {
      Object length;
      int[length._int] A;
  }
  struct Array_float {
      Object length;
      float[length._int] A;
  }
  struct Array_double {
      Object length;
      double[length._int] A;
  }
  struct Array_Object {
      Object length;
      Object[length._int] A;
  }
  /*array.sk:53*/
  
Object Wrap_Array_Object (Array_Object arr)/*array.sk:53*/
  {
    return new Object(__cid=Array(), _array_object=arr);
  }
  /*array.sk:33*/
  
Object Wrap_Array_bit (Array_bit arr)/*array.sk:33*/
  {
    return new Object(__cid=Array(), _array_bit=arr);
  }
  /*array.sk:37*/
  
Object Wrap_Array_char (Array_char arr)/*array.sk:37*/
  {
    return new Object(__cid=Array(), _array_char=arr);
  }
  /*array.sk:49*/
  
Object Wrap_Array_double (Array_double arr)/*array.sk:49*/
  {
    return new Object(__cid=Array(), _array_double=arr);
  }
  /*array.sk:45*/
  
Object Wrap_Array_float (Array_float arr)/*array.sk:45*/
  {
    return new Object(__cid=Array(), _array_float=arr);
  }
  /*array.sk:41*/
  
Object Wrap_Array_int (Array_int arr)/*array.sk:41*/
  {
    return new Object(__cid=Array(), _array_int=arr);
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:25*/
  
int Array ()/*meta.sk:25*/
  {
    return -1;
  }
  /*meta.sk:4*/
  
int ArrayList ()/*meta.sk:4*/
  {
    return 9;
  }
  /*meta.sk:5*/
  
int Assert ()/*meta.sk:5*/
  {
    return 11;
  }
  /*meta.sk:6*/
  
int Boolean ()/*meta.sk:6*/
  {
    return 7;
  }
  /*meta.sk:7*/
  
int Byte ()/*meta.sk:7*/
  {
    return 13;
  }
  /*meta.sk:8*/
  
int CharSequence ()/*meta.sk:8*/
  {
    return 6;
  }
  /*meta.sk:9*/
  
int Character ()/*meta.sk:9*/
  {
    return 10;
  }
  /*meta.sk:10*/
  
int Cipher ()/*meta.sk:10*/
  {
    return 19;
  }
  /*meta.sk:11*/
  
int Cryptographer ()/*meta.sk:11*/
  {
    return 5;
  }
  /*meta.sk:12*/
  
int HashMap ()/*meta.sk:12*/
  {
    return 14;
  }
  /*meta.sk:13*/
  
int Integer ()/*meta.sk:13*/
  {
    return 15;
  }
  /*meta.sk:14*/
  
int IvParameterSpec ()/*meta.sk:14*/
  {
    return 20;
  }
  /*meta.sk:15*/
  
int Key ()/*meta.sk:15*/
  {
    return 18;
  }
  /*meta.sk:16*/
  
int Mac ()/*meta.sk:16*/
  {
    return 16;
  }
  /*meta.sk:17*/
  
int Object ()/*meta.sk:17*/
  {
    return 1;
  }
  /*meta.sk:18*/
  
int PasswordManager ()/*meta.sk:18*/
  {
    return 3;
  }
  /*meta.sk:19*/
  
int PasswordManagerTest ()/*meta.sk:19*/
  {
    return 2;
  }
  /*meta.sk:20*/
  
int PasswordMap ()/*meta.sk:20*/
  {
    return 4;
  }
  /*meta.sk:21*/
  
int SecretKey ()/*meta.sk:21*/
  {
    return 21;
  }
  /*meta.sk:22*/
  
int SecretKeySpec ()/*meta.sk:22*/
  {
    return 17;
  }
  /*meta.sk:23*/
  
int SecureRandom ()/*meta.sk:23*/
  {
    return 8;
  }
  /*meta.sk:24*/
  
int String ()/*meta.sk:24*/
  {
    return 12;
  }
  /*meta.sk:28*/
  
int _bit ()/*meta.sk:28*/
  {
    return -4;
  }
  /*meta.sk:27*/
  
int _char ()/*meta.sk:27*/
  {
    return -3;
  }
  /*meta.sk:30*/
  
int _double ()/*meta.sk:30*/
  {
    return -6;
  }
  /*meta.sk:29*/
  
int _float ()/*meta.sk:29*/
  {
    return -5;
  }
  /*meta.sk:26*/
  
int _int ()/*meta.sk:26*/
  {
    return -2;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  @Immutable()
  struct SecretKeySpec {
      @Immutable()
  }
  @Immutable()
  struct Secretkeyspec extends SecretKeySpec@SecretKeySpec {
      @Immutable()
  }
  @Immutable()
  struct Getencoded extends SecretKeySpec@SecretKeySpec {
      SecretKeySpec self;
      @Immutable()
  }
  /*SecretKeySpec.sk:8*/
  
Object SecretKeySpec_SecretKeySpec ()/*SecretKeySpec.sk:8*/
  {
    return new Object(__cid=SecretKeySpec(), _secretkeyspec=new Secretkeyspec());
  }
  /*SecretKeySpec.sk:12*/
  
Object getEncoded_Object (Object self)/*SecretKeySpec.sk:12*/
  {
    return new Object(__cid=SecretKeySpec(), _secretkeyspec=new Getencoded(self=self._secretkeyspec));
  }
  /*SecretKeySpec.sk:16*/
  
Object xform_SecretKeySpec (SecretKeySpec self)/*SecretKeySpec.sk:16*/
  {
    switch(self){/*SecretKeySpec.sk:17*/
      case Secretkeyspec:
      {
        {
          return xform_secretkeyspec_SecretKeySpec(self);
        }
      }
      case Getencoded:
      {
        {
          return xform_getEncoded_SecretKeySpec(self.self);
        }
      }
    }
    return null;
  }
  /*SecretKeySpec.sk:28*/
  
Object xform_getEncoded_SecretKeySpec (SecretKeySpec self)/*SecretKeySpec.sk:28*/
  {
    switch(self){/*SecretKeySpec.sk:29*/
      case Secretkeyspec:
      {
        {
          assert (0); //Assert at SecretKeySpec.sk:30 (0)
        }
      }
      case Getencoded:
      {
        {
          assert (0); //Assert at SecretKeySpec.sk:31 (0)
        }
      }
    }
    return null;
  }
  /*SecretKeySpec.sk:36*/
  
Object xform_secretkeyspec_SecretKeySpec (SecretKeySpec self)/*SecretKeySpec.sk:36*/
  {
    switch(self){/*SecretKeySpec.sk:37*/
      case Secretkeyspec:
      {
        {
          assert (0); //Assert at SecretKeySpec.sk:38 (0)
        }
      }
      case Getencoded:
      {
        {
          assert (0); //Assert at SecretKeySpec.sk:39 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE Byte*/
package Byte{
  /*Byte.sk:3*/
  
Object Byte_Byte (Object self)/*Byte.sk:3*/
  {
    return self;
  }
  /*Byte.sk:7*/
  
Object Byte_Byte_byte (Object self, Object b)/*Byte.sk:7*/
  {
    self.b_Byte = b;
    return self;
  }
  /*Byte.sk:12*/
  
Object byteValue (Object self)/*Byte.sk:12*/
  {
    return self.b_Byte;
  }
  /* END PACKAGE Byte*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object cryptographer_PasswordManager;
      Object passMap_PasswordManager;
      Object _value_String;
      Object _count_String;
      Object value_Character;
      Object GCMSecretKey_Cryptographer;
      Object Hash_secret_key_Cryptographer;
      Object sha256_HMAC_Cryptographer;
      Object myCypherOut_Cryptographer;
      Object randomIv_Cryptographer;
      Object ivParameterSpec_Cryptographer;
      Object MAX_LENGTH_PASSWORD_Cryptographer;
      Object b_Byte;
      Object value_Integer;
      Object bool_Boolean;
      Object passMap_PasswordMap;
      Object masterHash_PasswordMap;
      Mac _mac;
      HashMap _hashmap;
      ArrayList _arraylist;
      SecureRandom _securerandom;
      SecretKeySpec _secretkeyspec;
      Cipher _cipher;
      Array_bit _array_bit;
      Array_char _array_char;
      Array_int _array_int;
      Array_float _array_float;
      Array_double _array_double;
      Array_Object _array_object;
      bit _bit;
      char _char;
      int _int;
      float _float;
      double _double;
  }
  /*Object.sk:3*/
  
Object Object_Object (Object self)/*Object.sk:3*/
  {
    return self;
  }
  /*Object.sk:17*/
  
Object equals_Object (Object self, Object obj)/*Object.sk:17*/
  {
    return new Object(__cid=-4, _bit=self == obj);
  }
  /*Object.sk:7*/
  
Object equals_Object_Object (Object a, Object b)/*Object.sk:7*/
  {
    if(a == (null))/*Object.sk:8*/
    {
      {
        if(b == (null))/*Object.sk:9*/
        {
          {
            return new Object(__cid=-4, _bit=1);
          }
        }
        return new Object(__cid=-4, _bit=0);
      }
    }
    return ((a.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(a, b) : ((a.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(a, b) : null))))))))))))))))));
  }
  /*Object.sk:21*/
  
Object hashCode (Object self)/*Object.sk:21*/
  {
    return new Object(__cid=-2, _int=0);
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:3*/
  
Object IvParameterSpec_IvParameterSpec (Object self)/*IvParam..erSpec.sk:3*/
  {
    return self;
  }
  /*IvParam..erSpec.sk:7*/
  
Object IvParameterSpec_IvParameterSpec_byte (Object self, Object val)/*IvParam..erSpec.sk:7*/
  {
    return self;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  @Immutable()
  struct Cipher {
      @Immutable()
  }
  @Immutable()
  struct Cipher_empty extends Cipher@Cipher {
      @Immutable()
  }
  @Immutable()
  struct Init extends Cipher@Cipher {
      Cipher self;
      Object mode;
      Object k;
      Object iv;
      @Immutable()
  }
  @Immutable()
  struct Initb extends Cipher@Cipher {
      Cipher self;
      Object mode;
      Object k;
      Object iv;
      @Immutable()
  }
  @Immutable()
  struct Dofinalb extends Cipher@Cipher {
      Cipher self;
      Object text;
      @Immutable()
  }
  @Immutable()
  struct Dofinal extends Cipher@Cipher {
      Cipher self;
      Object text;
      @Immutable()
  }
  /*Cipher.sk:15*/
  
Object Cipher_Cipher ()/*Cipher.sk:15*/
  {
    return new Object(__cid=Cipher(), _cipher=new Cipher_empty());
  }
  /*Cipher.sk:31*/
  
Object doFinal_Object_Object (Object self, Object text)/*Cipher.sk:31*/
  {
    return new Object(__cid=Cipher(), _cipher=new Dofinal(self=self._cipher, text=text));
  }
  /*Cipher.sk:27*/
  
Object doFinalb_Object_Object (Object self, Object text)/*Cipher.sk:27*/
  {
    return new Object(__cid=Cipher(), _cipher=new Dofinalb(self=self._cipher, text=text));
  }
  /*Cipher.sk:3*/
  
Object getInstance_String (Object type)/*Cipher.sk:3*/
  {
    return type;
  }
  /*Cipher.sk:19*/
  
Object init_Object_int_Object_Object (Object self, Object mode, Object k, Object iv)/*Cipher.sk:19*/
  {
    return new Object(__cid=Cipher(), _cipher=new Init(self=self._cipher, mode=mode, k=k, iv=iv));
  }
  /*Cipher.sk:23*/
  
Object initb_Object_int_Object_Object (Object self, Object mode, Object k, Object iv)/*Cipher.sk:23*/
  {
    return new Object(__cid=Cipher(), _cipher=new Initb(self=self._cipher, mode=mode, k=k, iv=iv));
  }
  /*Cipher.sk:35*/
  
Object xform_Cipher (Cipher self)/*Cipher.sk:35*/
  {
    switch(self){/*Cipher.sk:36*/
      case Cipher_empty:
      {
        {
          return xform_cipher_Empty_Cipher(self);
        }
      }
      case Init:
      {
        {
          return xform_init_Cipher_int_Object_Object(self.self, self.mode, self.k, self.iv);
        }
      }
      case Initb:
      {
        {
          return xform_initb_Cipher_int_Object_Object(self.self, self.mode, self.k, self.iv);
        }
      }
      case Dofinalb:
      {
        {
          return xform_doFinalb_Cipher_Object(self.self, self.text);
        }
      }
      case Dofinal:
      {
        {
          return xform_doFinal_Cipher_Object(self.self, self.text);
        }
      }
    }
    return null;
  }
  /*Cipher.sk:56*/
  
Object xform_cipher_Empty_Cipher (Cipher self)/*Cipher.sk:56*/
  {
    switch(self){/*Cipher.sk:57*/
      case Cipher_empty:
      {
        {
          assert (0); //Assert at Cipher.sk:58 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Cipher.sk:59 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Cipher.sk:60 (0)
        }
      }
      case Dofinalb:
      {
        {
          assert (0); //Assert at Cipher.sk:61 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Cipher.sk:62 (0)
        }
      }
    }
    return null;
  }
  /*Cipher.sk:67*/
  
Object xform_doFinal_Cipher_Object (Cipher self, Object text)/*Cipher.sk:67*/
  {
    switch(self){/*Cipher.sk:68*/
      case Cipher_empty:
      {
        {
          assert (0); //Assert at Cipher.sk:69 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Cipher.sk:70 (0)
        }
      }
      case Initb:
      {
        {
          {
            Cipher text_text;
            text_text = text._cipher;
            switch(text_text){/*Cipher.sk:75*/
              case Cipher_empty:
              {
                {
                  assert (0); //Assert at Cipher.sk:76 (0)
                }
              }
              case Init:
              {
                {
                  assert (0); //Assert at Cipher.sk:77 (0)
                }
              }
              case Initb:
              {
                {
                  assert (0); //Assert at Cipher.sk:78 (0)
                }
              }
              case Dofinalb:
              {
                {
                  assert (0); //Assert at Cipher.sk:79 (0)
                }
              }
              case Dofinal:
              {
                {
                  {
                    Cipher text_text_text;
                    text_text_text = text_text.self;
                    switch(text_text_text){/*Cipher.sk:84*/
                      case Cipher_empty:
                      {
                        {
                          assert (0); //Assert at Cipher.sk:85 (0)
                        }
                      }
                      case Init:
                      {
                        {
                          assert (0); //Assert at Cipher.sk:86 (0)
                        }
                      }
                      case Initb:
                      {
                        {
                          return (((self.k.__cid) == (new Object(__cid=-2, _int=PasswordMap())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Boolean())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Integer())._int) ? equals_Object@Integer(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Cipher())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Byte())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=SecretKeySpec())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=PasswordManagerTest())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=SecureRandom())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Assert())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=ArrayList())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Cryptographer())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Character())._int) ? equals_Object@Character(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=String())._int) ? equals_Object@String(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=HashMap())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=IvParameterSpec())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Mac())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=PasswordManager())._int) ? equals_Object@Object(self.k, text_text_text.k) : ((self.k.__cid) == (new Object(__cid=-2, _int=Object())._int) ? equals_Object@Object(self.k, text_text_text.k) : null))))))))))))))))))._bit ? (((self.mode._int) == (new Object(__cid=-2, _int=2)._int)) && ((text_text_text.mode._int) == (new Object(__cid=-2, _int=1)._int)) ? text_text.text : null) : null);
                        }
                      }
                      case Dofinalb:
                      {
                        {
                          assert (0); //Assert at Cipher.sk:90 (0)
                        }
                      }
                      case Dofinal:
                      {
                        {
                          assert (0); //Assert at Cipher.sk:91 (0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      case Dofinalb:
      {
        {
          assert (0); //Assert at Cipher.sk:100 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Cipher.sk:101 (0)
        }
      }
    }
    return null;
  }
  /*Cipher.sk:128*/
  
Object xform_doFinalb_Cipher_Object (Cipher self, Object text)/*Cipher.sk:128*/
  {
    switch(self){/*Cipher.sk:129*/
      case Cipher_empty:
      {
        {
          assert (0); //Assert at Cipher.sk:130 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Cipher.sk:131 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Cipher.sk:132 (0)
        }
      }
      case Dofinalb:
      {
        {
          assert (0); //Assert at Cipher.sk:133 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Cipher.sk:134 (0)
        }
      }
    }
    return null;
  }
  /*Cipher.sk:117*/
  
Object xform_init_Cipher_int_Object_Object (Cipher self, Object mode, Object k, Object iv)/*Cipher.sk:117*/
  {
    switch(self){/*Cipher.sk:118*/
      case Cipher_empty:
      {
        {
          assert (0); //Assert at Cipher.sk:119 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Cipher.sk:120 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Cipher.sk:121 (0)
        }
      }
      case Dofinalb:
      {
        {
          assert (0); //Assert at Cipher.sk:122 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Cipher.sk:123 (0)
        }
      }
    }
    return null;
  }
  /*Cipher.sk:106*/
  
Object xform_initb_Cipher_int_Object_Object (Cipher self, Object mode, Object k, Object iv)/*Cipher.sk:106*/
  {
    switch(self){/*Cipher.sk:107*/
      case Cipher_empty:
      {
        {
          assert (0); //Assert at Cipher.sk:108 (0)
        }
      }
      case Init:
      {
        {
          assert (0); //Assert at Cipher.sk:109 (0)
        }
      }
      case Initb:
      {
        {
          assert (0); //Assert at Cipher.sk:110 (0)
        }
      }
      case Dofinalb:
      {
        {
          assert (0); //Assert at Cipher.sk:111 (0)
        }
      }
      case Dofinal:
      {
        {
          assert (0); //Assert at Cipher.sk:112 (0)
        }
      }
    }
    return null;
  }
  /* END PACKAGE Cipher*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /*Boolean.sk:3*/
  
Object Boolean_Boolean (Object self)/*Boolean.sk:3*/
  {
    return self;
  }
  /*Boolean.sk:7*/
  
Object Boolean_Boolean_boolean (Object self, Object bool)/*Boolean.sk:7*/
  {
    self.bool_Boolean = bool;
    return self;
  }
  /*Boolean.sk:12*/
  
Object booleanValue (Object self)/*Boolean.sk:12*/
  {
    return self.bool_Boolean;
  }
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /*Key.sk:3*/
  
Object Key_Key (Object self)/*Key.sk:3*/
  {
    return self;
  }
  /* END PACKAGE Key*/
}
