SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/sk_PasswordManagerTest/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:5: Making final Object._int
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 16
[SATBackend] MAX FUNC INLINING  = 2
estimated size of main_int_int_int_int_int__Wrapper_PasswordManagerTest
stmt cnt: 2
callee main_int_int_int_int_int0_PasswordManagerTest : 362

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_PasswordManagerTest
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 2 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/tmp/sk_PasswordManagerTest/solution0-0 /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/tmp/sk_PasswordManagerTest/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1523127878
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch2/test/axioms/examples/PasswordManager/sketch_final/tmp/sk_PasswordManagerTest/input0.tmp
CREATING main_int_int_int_int_int__Wrapper_PasswordManagerTest
size = 9
after ba size = 9
CREATING main_int_int_int_int_int__WrapperNospec_PasswordManagerTest
size = 5
after ba size = 5
CREATING main_int_int_int_int_int0_PasswordManagerTest
size = 1311
after ba size = 1311
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 38
after ba size = 38
CREATING toString_int_Integer
size = 3958
after ba size = 3958
CREATING PasswordManager_meta
size = 3
after ba size = 3
CREATING PasswordManager_PasswordManager_String_PasswordManager
size = 142
after ba size = 142
CREATING addPassword_String_String_PasswordManager
size = 342
after ba size = 342
CREATING getPass_String_PasswordManager
size = 250
after ba size = 250
CREATING String_meta
size = 3
after ba size = 3
CREATING equals_Object_String
Found Cycle of size 5; Breaking.
size = 1616
after ba size = 1616
CREATING modifyPassword_String_String_PasswordManager
size = 342
after ba size = 342
CREATING Wrap_Array_char_array
size = 48
after ba size = 48
CREATING String_String_char_int_int_String
size = 1170
after ba size = 1170
CREATING Cryptographer_meta
size = 3
after ba size = 3
CREATING Cryptographer_Cryptographer_Cryptographer
size = 1040
after ba size = 1040
CREATING PasswordMap_meta
size = 3
after ba size = 3
CREATING PasswordMap_PasswordMap_PasswordMap
size = 255
after ba size = 255
CREATING encrypt_String_Cryptographer
Found Cycle of size 14; Breaking.
size = 1733
after ba size = 1733
CREATING add_String_String_PasswordMap
size = 238
after ba size = 238
CREATING get_String_PasswordMap
size = 92
after ba size = 92
CREATING decrypt_String_Cryptographer
Found Cycle of size 28; Breaking.
size = 1690
after ba size = 1690
CREATING length_String
size = 45
after ba size = 45
CREATING Array_meta
size = 3
after ba size = 3
CREATING SecureRandom_SecureRandom_SecureRandom
size = 48
after ba size = 48
CREATING SecureRandom_meta
size = 3
after ba size = 3
CREATING nextBytes_Object_Object_SecureRandom
size = 54
after ba size = 54
CREATING SecretKeySpec_SecretKeySpec_SecretKeySpec
size = 48
after ba size = 48
CREATING IvParameterSpec_meta
size = 3
after ba size = 3
CREATING IvParameterSpec_IvParameterSpec_byte_IvParameterSpec
size = 39
after ba size = 39
CREATING Cipher_Cipher_Cipher
size = 48
after ba size = 48
CREATING Cipher_meta
size = 3
after ba size = 3
CREATING init_Object_int_Object_Object_Cipher
size = 57
after ba size = 57
CREATING initb_Object_int_Object_Object_Cipher
size = 57
after ba size = 57
CREATING Mac_Mac_Mac
size = 48
after ba size = 48
CREATING Mac_meta
size = 3
after ba size = 3
CREATING init_Object_SecretKeySpec_Mac
size = 54
after ba size = 54
CREATING initb_Object_SecretKeySpec_Mac
size = 55
after ba size = 55
CREATING HashMap_HashMap_HashMap
size = 48
after ba size = 48
CREATING getBytes_String
size = 106
after ba size = 106
CREATING doFinal_Object_Object_Cipher
size = 55
after ba size = 55
CREATING doFinalb_Object_Object_Cipher
size = 55
after ba size = 55
CREATING xform_doFinal_Cipher_Object_Cipher
Found Cycle of size 31; Breaking.
Found Cycle of size 61; Breaking.
Found Cycle of size 65; Breaking.
Found Cycle of size 83; Breaking.
Found Cycle of size 54; Breaking.
Found Cycle of size 69; Breaking.
Found Cycle of size 69; Breaking.
Found Cycle of size 36; Breaking.
Found Cycle of size 57; Breaking.
Found Cycle of size 31; Breaking.
Found Cycle of size 34; Breaking.
Found Cycle of size 44; Breaking.
Found Cycle of size 39; Breaking.
Found Cycle of size 23; Breaking.
Found Cycle of size 25; Breaking.
Found Cycle of size 39; Breaking.
Found Cycle of size 24; Breaking.
Found Cycle of size 24; Breaking.
Found Cycle of size 26; Breaking.
Found Cycle of size 39; Breaking.
Found Cycle of size 15; Breaking.
Found Cycle of size 15; Breaking.
size = 4062
after ba size = 4062
CREATING toString_Object_Cipher
size = 53
after ba size = 53
CREATING HashMap_meta
size = 3
after ba size = 3
CREATING put_Object_Object_Object_HashMap
size = 55
after ba size = 55
CREATING putb_Object_Object_Object_HashMap
size = 56
after ba size = 56
CREATING xform_get_HashMap_Object_HashMap
size = 3782
after ba size = 3782
CREATING String_String_byte_String
size = 1172
after ba size = 1172
CREATING SecretKeySpec_meta
size = 3
after ba size = 3
CREATING toString_String
size = 38
after ba size = 38
CREATING getBytes_String_String
Found Cycle of size 18; Breaking.
size = 2897
after ba size = 2897
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING equals_Object_Object
size = 46
after ba size = 46
CREATING Integer_meta
size = 3
after ba size = 3
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 101
after ba size = 101
CREATING Byte_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 101
after ba size = 101
CREATING Assert_meta
size = 3
after ba size = 3
CREATING PasswordManagerTest_meta
size = 3
after ba size = 3
CREATING charAt_int_String
size = 116
after ba size = 116
CREATING intValue_Integer
size = 45
after ba size = 45
CREATING charValue_Character
size = 45
after ba size = 45
* before  EVERYTHING: main_int_int_int_int_int__WrapperNospec_PasswordManagerTest::SPEC nodes = 5	 main_int_int_int_int_int__Wrapper_PasswordManagerTest::SKETCH nodes = 9
 INBITS = 5
 CBITS  = 5
 input_ints = 5 	 input_bits = 0
 Inlining amount = 2
 Inlining functions in the sketch.
inlined 1 new size =1069
Found Cycle of size 38; Breaking.
Found Cycle of size 61; Breaking.
Found Cycle of size 15; Breaking.
inlined 57 new size =26590
Found Cycle of size 109; Breaking.
inlined 70 new size =28038
Found Cycle of size 112; Breaking.
Found Cycle of size 85; Breaking.
Found Cycle of size 91; Breaking.
Found Cycle of size 89; Breaking.
Found Cycle of size 239; Breaking.
Found Cycle of size 236; Breaking.
Found Cycle of size 91; Breaking.
Found Cycle of size 202; Breaking.
Found Cycle of size 174; Breaking.
Found Cycle of size 174; Breaking.
Found Cycle of size 165; Breaking.
Found Cycle of size 108; Breaking.
Found Cycle of size 167; Breaking.
Found Cycle of size 76; Breaking.
Found Cycle of size 185; Breaking.
Found Cycle of size 108; Breaking.
Found Cycle of size 157; Breaking.
Found Cycle of size 73; Breaking.
Found Cycle of size 221; Breaking.
inlined 111 new size =84768
Found Cycle of size 127; Breaking.
Found Cycle of size 244; Breaking.
Found Cycle of size 145; Breaking.
Found Cycle of size 102; Breaking.
Found Cycle of size 204; Breaking.
Found Cycle of size 105; Breaking.
Found Cycle of size 104; Breaking.
Found Cycle of size 244; Breaking.
Found Cycle of size 139; Breaking.
Found Cycle of size 95; Breaking.
Found Cycle of size 224; Breaking.
Found Cycle of size 57; Breaking.
Found Cycle of size 107; Breaking.
Found Cycle of size 140; Breaking.
Found Cycle of size 124; Breaking.
Found Cycle of size 164; Breaking.
Found Cycle of size 125; Breaking.
Found Cycle of size 158; Breaking.
Found Cycle of size 150; Breaking.
Found Cycle of size 150; Breaking.
Found Cycle of size 144; Breaking.
Found Cycle of size 111; Breaking.
Found Cycle of size 138; Breaking.
inlined 708 new size =166612
Found Cycle of size 116; Breaking.
inlined 714 new size =132471
inlined 29 new size =132382
inlined 0 new size =132382
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =5
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 108233
* Final Problem size: Problem nodes = 108227
  # OF CONTROLS:    24
 control_ints = 8 	 control_bits = 16
inputSize = 10	ctrlSize = 72
Random seeds = 1
!+ 000001000000101001001000110001100000011101100100110011000000100010100001
!+ H__3_156:0
H__0_156:0
H__5_156:0
H__4_156:0
H__1_156:2
H__2_156:74
H__4_156_155:0
H__3_156_155:0
H__0_156_155:1
H__1_156_155:24
H__2_156_155:6
H__5_159:0
H__4_159:0
H__3_159:1
H__0_159:1
H__1_159:77
H__2_159:76
H__4_159_155:1
H__3_159_155:0
H__0_159_155:0
H__1_159_155:16
H__2_159_155:10
H__5_156_155_156_155:0
H__5_159_155_159_155:1

BEG CHECK
 * After optims it became = 35396 was 108227
Assert at String.sk:23 (0)
Simulation found a cex by random testing:  0.026 ms 
END CHECK
********  0	ftime= 0	ctime= 0.295
!% 1011011010
!% __u_5_52_0:1
__w_6_53_0:3
__x_7_54_0:2
__y_8_55_0:1
__z_9_56_0:1

BEG FIND
Level 1  intsize = 2
 * After optims it became = 101181 was 108227
 * After all optims it became = 101181
 finder  hits = 9456	 bstoreObjs=32494	 sstorePages=31
hitcount 	0	26751	4
hitcount 	1	4885	5
hitcount 	2	136	4
hitcount 	3	541	4
hitcount 	4	3	4
hitcount 	5	74	4
hitcount 	6	19	4
hitcount 	8	7	4
hitcount 	9	3	3
hitcount 	11	3	3
hitcount 	14	18	4
hitcount 	15	6	4
hitcount 	16	4	4
hitcount 	17	7	4
hitcount 	25	6	5
hitcount 	27	6	6
hitcount 	32	3	2
hitcount 	36	3	2
hitcount 	38	2	2
hitcount 	44	1	5
hitcount 	46	1	2
hitcount 	49	2	8
hitcount 	55	7	4
hitcount 	58	5	4
hitcount 	84	1	4
bucketsPerDepth 	4	1
bucketsPerDepth 	5	16
bucketsPerDepth 	6	97
bucketsPerDepth 	7	225
bucketsPerDepth 	8	287
bucketsPerDepth 	9	213
bucketsPerDepth 	10	113
bucketsPerDepth 	11	42
bucketsPerDepth 	12	22
bucketsPerDepth 	13	7
bucketsPerDepth 	14	1
* TIME TO ADD INPUT :  25000.3 ms 
DECISIONS START = 0
f# %assign: 5 clauses: 90987 learn: 1 restart: 1 decision: 798 propagated: 35879
END FIND
!+ 011000000001000000010000000000000000101000000001000000010000000111111100
!+ H__3_156:0
H__0_156:1
H__5_156:1
H__4_156:0
H__1_156:0
H__2_156:1
H__4_156_155:0
H__3_156_155:1
H__0_156_155:0
H__1_156_155:0
H__2_156_155:0
H__5_159:0
H__4_159:1
H__3_159:0
H__0_159:1
H__1_159:0
H__2_159:2
H__4_159_155:0
H__3_159_155:0
H__0_159_155:1
H__1_159_155:0
H__2_159_155:127
H__5_156_155_156_155:0
H__5_159_155_159_155:0

BEG CHECK
 * After optims it became = 52072 was 108227
 TESTING HYPOTHESIS ITER 1
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= __u_5_52_0 == (0) 
37= 36 ! 
38= ASSERT (!36) : 
}
SLICE SIZE = 39
c# %assign: 29 clauses: 46 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= __u_5_52_0 == (0)  = 0
 reduced size from 52072 to 52044
 TESTING HYPOTHESIS ITER 2
h = 45  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= (10)
37= __u_5_52_0 / (10) 
38= (0)
39= 37 == (0) 
40= ASSERT 39 : 
}
SLICE SIZE = 41
c# %assign: 41 clauses: 52 learn: 0 restart: 0 decision: 0 propagated: 15
 FOUND CONST: 45= __u_5_52_0 / (10)  = 0
 reduced size from 52044 to 51477
 TESTING HYPOTHESIS ITER 3
h = 145  hasserts.size()= 6
SLICE SIZE = 114
c# %assign: 29 clauses: 46 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 145= 144[121] = 1
 reduced size from 51477 to 51385
 TESTING HYPOTHESIS ITER 4
h = 10435  hasserts.size()= 6
SLICE SIZE = 306
c# %assign: 29 clauses: 46 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 10435= 424==0 ? (238):(453) = 453
 reduced size from 51385 to 51312
 * Simulation optimized it to = 51312
Simulation didn't find a cex:  999.636 ms 
After all optim
DECISIONS START = 0
c# %assign: 81 clauses: 12120 learn: 28 restart: 1 decision: 229 propagated: 21066
CONTROL: growing l=2 inputs to size 3
 TESTING HYPOTHESIS ITER 1
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= __u_5_52_0 == (0) 
37= 36 ! 
38= ASSERT (!36) : 
}
SLICE SIZE = 39
c# %assign: 17 clauses: 82 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= __u_5_52_0 == (0)  = 0
 reduced size from 52072 to 52044
 TESTING HYPOTHESIS ITER 2
h = 45  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= (10)
37= __u_5_52_0 / (10) 
38= (0)
39= 37 == (0) 
40= ASSERT 39 : 
}
SLICE SIZE = 41
c# %assign: 35 clauses: 100 learn: 0 restart: 0 decision: 0 propagated: 23
 FOUND CONST: 45= __u_5_52_0 / (10)  = 0
 reduced size from 52044 to 51477
 TESTING HYPOTHESIS ITER 3
h = 145  hasserts.size()= 6
SLICE SIZE = 114
c# %assign: 17 clauses: 82 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 145= 144[121] = 1
 reduced size from 51477 to 51385
 TESTING HYPOTHESIS ITER 4
h = 10435  hasserts.size()= 6
SLICE SIZE = 306
c# %assign: 17 clauses: 82 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 10435= 424==0 ? (238):(453) = 453
 reduced size from 51385 to 51312
 * Simulation optimized it to = 51312
Simulation didn't find a cex:  1000.01 ms 
After all optim
DECISIONS START = 0
c# %assign: 79 clauses: 17800 learn: 40 restart: 1 decision: 433 propagated: 40896
CONTROL: growing l=2 inputs to size 4
 TESTING HYPOTHESIS ITER 1
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= __u_5_52_0 == (0) 
37= 36 ! 
38= ASSERT (!36) : 
}
SLICE SIZE = 39
c# %assign: 10 clauses: 154 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= __u_5_52_0 == (0)  = 0
 reduced size from 52072 to 52044
 TESTING HYPOTHESIS ITER 2
h = 56  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= (10)
37= __u_5_52_0 / (10) 
38= 37 / (10) 
39= (0)
40= 38 == (0) 
41= ASSERT 40 : 
}
SLICE SIZE = 42
c# %assign: 9 clauses: 193 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 56= 45 / (10)  = 0
 reduced size from 52044 to 51510
 TESTING HYPOTHESIS ITER 3
h = 10560  hasserts.size()= 6
SLICE SIZE = 342
c# %assign: 9 clauses: 193 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 10560= 545==0 ? (238):(453) = 453
 reduced size from 51510 to 51437
 TESTING HYPOTHESIS ITER 4
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= 2 ! 
37= (!2) ! 
38= ASSERT (!(!2)) : 
}
SLICE SIZE = 39
c# %assign: 10 clauses: 154 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= 4 !  = 0
 reduced size from 51437 to 51435
 * Simulation optimized it to = 51435
Simulation didn't find a cex:  1000.15 ms 
After all optim
DECISIONS START = 0
c# %assign: 61 clauses: 25458 learn: 35 restart: 2 decision: 621 propagated: 180844
CONTROL: growing l=2 inputs to size 5
 TESTING HYPOTHESIS ITER 1
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= __u_5_52_0 == (0) 
37= 36 ! 
38= ASSERT (!36) : 
}
SLICE SIZE = 39
c# %assign: 5 clauses: 298 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= __u_5_52_0 == (0)  = 0
 reduced size from 52072 to 52044
 TESTING HYPOTHESIS ITER 2
h = 56  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= (10)
37= __u_5_52_0 / (10) 
38= 37 / (10) 
39= (0)
40= 38 == (0) 
41= ASSERT 40 : 
}
SLICE SIZE = 42
c# %assign: 32 clauses: 389 learn: 0 restart: 0 decision: 0 propagated: 69
 FOUND CONST: 56= 45 / (10)  = 0
 reduced size from 52044 to 51510
 TESTING HYPOTHESIS ITER 3
h = 10560  hasserts.size()= 6
SLICE SIZE = 342
c# %assign: 5 clauses: 380 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 10560= 545==0 ? (238):(453) = 453
 reduced size from 51510 to 51437
 TESTING HYPOTHESIS ITER 4
h = 36  hasserts.size()= 6
dagmain_int_int_int_int_int__WrapperNospec_PasswordManagerTest{
0= (0)
__u_5_52_0
2= (0) < __u_5_52_0 
3= (100)
4= __u_5_52_0 < (100) 
5= 2 & 4 
6= Assume 5 : Assume at Passwor..erTest.sk:15
__w_6_53_0
8= (0) < __w_6_53_0 
9= __w_6_53_0 < (100) 
10= 8 & 9 
11= Assume 10 : Assume at Passwor..erTest.sk:16
__x_7_54_0
13= (0) < __x_7_54_0 
14= __x_7_54_0 < (100) 
15= 13 & 14 
16= Assume 15 : Assume at Passwor..erTest.sk:17
__y_8_55_0
18= (0) < __y_8_55_0 
19= __y_8_55_0 < (100) 
20= 18 & 19 
21= Assume 20 : Assume at Passwor..erTest.sk:18
__z_9_56_0
23= (0) < __z_9_56_0 
24= __z_9_56_0 < (100) 
25= 23 & 24 
26= Assume 25 : Assume at Passwor..erTest.sk:19
27= __u_5_52_0 == __w_6_53_0 
28= __w_6_53_0 == __y_8_55_0 
29= 28 ! 
30= 27 ! 
31= [27]$(!28), (!27), $
32= __x_7_54_0 == __z_9_56_0 
33= 32 ! 
34= 31 & (!32) 
35= Assume 34 : Assume at Passwor..erTest.sk:20
36= 2 ! 
37= (!2) ! 
38= ASSERT (!(!2)) : 
}
SLICE SIZE = 39
c# %assign: 5 clauses: 298 learn: 0 restart: 0 decision: 0 propagated: 11
 FOUND CONST: 36= 4 !  = 0
 reduced size from 51437 to 51435
 * Simulation optimized it to = 51435
Simulation didn't find a cex:  1000.13 ms 
After all optim
DECISIONS START = 0
c# %assign: 91 clauses: 63397 learn: 200 restart: 3 decision: 1544 propagated: 351497
END CHECK
********  1	ftime= 25000.3	ctime= 32000.2
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 25000.3 CHECK TIME 32000.5 TOTAL TIME 57000.9
VALUES H__0_156: 1, H__0_156_155: 0, H__0_159: 1, H__0_159_155: 1, H__1_156: 0, H__1_156_155: 0, H__1_159: 0, H__1_159_155: 0, H__2_156: 1, H__2_156_155: 0, H__2_159: 2, H__2_159_155: 127, H__3_156: 0, H__3_156_155: 1, H__3_159: 0, H__3_159_155: 0, H__4_156: 0, H__4_156_155: 0, H__4_159: 1, H__4_159_155: 0, H__5_156: 1, H__5_156_155_156_155: 0, H__5_159: 0, H__5_159_155_159_155: 0, 
RESULT = 2  
**ROUND 0 : 0 Round time:  59000.9 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  60999.7
Model building time (ms): 999.687
Solution time (ms):       59000.9
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 60.987
      model building time (s) ---------> 0.999
      solution time (s) ---------------> 59.0
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE Cryptographer*/
package Cryptographer{
  /*Cryptographer.sk:3*/
  
void Cryptographer_Cryptographer (Object self, ref Object _out)/*Cryptographer.sk:3*/
  {
    Object@Object random_s68 = null;
    SecureRandom_SecureRandom@SecureRandom(random_s68);
    Object@Object randomKey_s70 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=16)), randomKey_s70);
    int _out_s72 = 0;
    SecureRandom@meta(_out_s72);
    if((random_s68.__cid) == (new Object@Object(__cid=-2, _int=_out_s72)._int))/*Cryptographer.sk:6*/
    {
      Object@Object _out_s75 = null;
      nextBytes_Object_Object@SecureRandom(random_s68, randomKey_s70, _out_s75);
    }
    Object@Object _out_s77 = null;
    SecretKeySpec_SecretKeySpec@SecretKeySpec(_out_s77);
    self.GCMSecretKey_Cryptographer = _out_s77;
    Object@Object _out_s79 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=16)), _out_s79);
    self.randomIv_Cryptographer = _out_s79;
    int _out_s81 = 0;
    SecureRandom@meta(_out_s81);
    if((random_s68.__cid) == (new Object@Object(__cid=-2, _int=_out_s81)._int))/*Cryptographer.sk:9*/
    {
      Object@Object _out_s84 = null;
      nextBytes_Object_Object@SecureRandom(random_s68, self.randomIv_Cryptographer, _out_s84);
    }
    int _out_s86 = 0;
    IvParameterSpec@meta(_out_s86);
    Object@Object _out_s88 = null;
    IvParameterSpec_IvParameterSpec_byte@IvParameterSpec(new Object@Object(__cid=_out_s86), self.randomIv_Cryptographer, _out_s88)//{};
    self.ivParameterSpec_Cryptographer = _out_s88;
    Object@Object _out_s90 = null;
    Cipher_Cipher@Cipher(_out_s90);
    self.myCypherOut_Cryptographer = _out_s90;
    int _out_s92 = 0;
    Cipher@meta(_out_s92);
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s92)._int))/*Cryptographer.sk:12*/
    {
      Object@Object _out_s94 = null;
      init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s94);
    }
    int _out_s96 = 0;
    Cipher@meta(_out_s96);
    Object@Object _pac_sc_s97 = null;
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s96)._int))/*Cryptographer.sk:13*/
    {
      Object@Object _out_s99 = null;
      initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s99);
      _pac_sc_s97 = _out_s99;
    }
    else
    {
      _pac_sc_s97 = null;
    }
    self.myCypherOut_Cryptographer = _pac_sc_s97;
    int secret_s101 = 0;
    String@meta(secret_s101);
    Object@Object secret_s103 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=7), A={'s','e','c','r','e','t','\0'}), secret_s103);
    Object@Object secret_s105 = null;
    String_String_char_int_int@String(new Object@Object(__cid=secret_s101), secret_s103, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=6), secret_s105)//{};
    Object@Object _out_s107 = null;
    Mac_Mac@Mac(_out_s107);
    self.sha256_HMAC_Cryptographer = _out_s107;
    Object@Object _out_s109 = null;
    SecretKeySpec_SecretKeySpec@SecretKeySpec(_out_s109);
    self.Hash_secret_key_Cryptographer = _out_s109;
    int _out_s111 = 0;
    Mac@meta(_out_s111);
    if((self.sha256_HMAC_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s111)._int))/*Cryptographer.sk:17*/
    {
      Object@Object _out_s113 = null;
      init_Object_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer, _out_s113);
    }
    int _out_s115 = 0;
    Mac@meta(_out_s115);
    Object@Object _pac_sc_s116 = null;
    if((self.sha256_HMAC_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s115)._int))/*Cryptographer.sk:18*/
    {
      Object@Object _out_s118 = null;
      initb_Object_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer, _out_s118);
      _pac_sc_s116 = _out_s118;
    }
    else
    {
      _pac_sc_s116 = null;
    }
    self.sha256_HMAC_Cryptographer = _pac_sc_s116;
    self.MAX_LENGTH_PASSWORD_Cryptographer = new Object@Object(__cid=-2, _int=16);
    _out = self;
    return;
  }
  /*Cryptographer.sk:82*/
  
void decrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:82*/
  {
    int _out_s28 = 0;
    Cipher@meta(_out_s28);
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s28)._int))/*Cryptographer.sk:30*/
    {
      Object@Object _out_s30 = null;
      init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=0), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s30);
    }
    int _out_s32 = 0;
    Cipher@meta(_out_s32);
    Object@Object _pac_sc_s33 = null;
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s32)._int))/*Cryptographer.sk:31*/
    {
      Object@Object _out_s35 = null;
      initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=2), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s35);
      _pac_sc_s33 = _out_s35;
    }
    else
    {
      _pac_sc_s33 = null;
    }
    self.myCypherOut_Cryptographer = _pac_sc_s33;
    Object@Object cipherText_s57 = null;
    xform_doFinal_Cipher_Object@Cipher(self.myCypherOut_Cryptographer._cipher, plainText, cipherText_s57);
    int _out_s24 = 0;
    String@meta(_out_s24);
    Object@Object _out_s26 = null;
    String_String_byte@String(new Object@Object(__cid=_out_s24), cipherText_s57, _out_s26)//{};
    _out = _out_s26;
    return;
  }
  /*Cryptographer.sk:77*/
  
void encrypt_String (Object self, Object plainText, ref Object _out)/*Cryptographer.sk:77*/
  {
    int _out_s28 = 0;
    Cipher@meta(_out_s28);
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s28)._int))/*Cryptographer.sk:30*/
    {
      Object@Object _out_s30 = null;
      init_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=0), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s30);
    }
    int _out_s32 = 0;
    Cipher@meta(_out_s32);
    Object@Object _pac_sc_s33 = null;
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s32)._int))/*Cryptographer.sk:31*/
    {
      Object@Object _out_s35 = null;
      initb_Object_int_Object_Object@Cipher(self.myCypherOut_Cryptographer, new Object@Object(__cid=-2, _int=1), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer, _out_s35);
      _pac_sc_s33 = _out_s35;
    }
    else
    {
      _pac_sc_s33 = null;
    }
    self.myCypherOut_Cryptographer = _pac_sc_s33;
    int cipherText_s37 = 0;
    Cipher@meta(cipherText_s37);
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=cipherText_s37)._int))/*Cryptographer.sk:34*/
    {
      int cipherText_s40 = 0;
      String@meta(cipherText_s40);
      Object@Object _pac_sc_s41 = null;
      if((plainText.__cid) == (new Object@Object(__cid=-2, _int=cipherText_s40)._int))/*Cryptographer.sk:34*/
      {
        Object@Object cipherText_s43 = null;
        getBytes@String(plainText, cipherText_s43);
        _pac_sc_s41 = cipherText_s43;
      }
      else
      {
        _pac_sc_s41 = null;
      }
      Object@Object cipherText_s45 = null;
      doFinal_Object_Object@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s41, cipherText_s45)//{};
    }
    int _out_s47 = 0;
    Cipher@meta(_out_s47);
    Object@Object _pac_sc_s48 = null;
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s47)._int))/*Cryptographer.sk:34*/
    {
      int _out_s50 = 0;
      String@meta(_out_s50);
      Object@Object _pac_sc_s51 = null;
      if((plainText.__cid) == (new Object@Object(__cid=-2, _int=_out_s50)._int))/*Cryptographer.sk:34*/
      {
        Object@Object _out_s53 = null;
        getBytes@String(plainText, _out_s53);
        _pac_sc_s51 = _out_s53;
      }
      else
      {
        _pac_sc_s51 = null;
      }
      Object@Object _out_s55 = null;
      doFinalb_Object_Object@Cipher(self.myCypherOut_Cryptographer, _pac_sc_s51, _out_s55)//{};
      _pac_sc_s48 = _out_s55;
    }
    else
    {
      _pac_sc_s48 = null;
    }
    self.myCypherOut_Cryptographer = _pac_sc_s48;
    int _out_s63 = 0;
    Cipher@meta(_out_s63);
    Object@Object _pac_sc_s64 = null;
    if((self.myCypherOut_Cryptographer.__cid) == (new Object@Object(__cid=-2, _int=_out_s63)._int))/*Cryptographer.sk:79*/
    {
      Object@Object _out_s66 = null;
      toString_Object@Cipher(self.myCypherOut_Cryptographer, _out_s66);
      _pac_sc_s64 = _out_s66;
    }
    else
    {
      _pac_sc_s64 = null;
    }
    _out = _pac_sc_s64;
    return;
  }
  /* END PACKAGE Cryptographer*/
}
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:12*/
  
void charValue (Object self, ref Object _out)/*Character.sk:12*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:16*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Character.sk:16*/
  {
    int _out_s125 = 0;
    Character@meta(_out_s125);
    if((obj.__cid) == _out_s125)/*Character.sk:17*/
    {
      int _out_s127 = 0;
      Character@meta(_out_s127);
      Object@Object _pac_sc_s128 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s127)._int))/*Character.sk:18*/
      {
        Object@Object _out_s130 = null;
        charValue@Character(obj, _out_s130);
        _pac_sc_s128 = _out_s130;
      }
      else
      {
        _pac_sc_s128 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Character._char) == (_pac_sc_s128._char));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE PasswordManagerTest*/
package PasswordManagerTest{
  /*Passwor..erTest.sk:7*/
  
void main_int_int_int_int_int (int __u, int __w, int __x, int __y, int __z)/*Passwor..erTest.sk:7*/
  {
    Object@Object u;
    u = new Object@Object(__cid=-2, _int=__u);
    Object@Object w;
    w = new Object@Object(__cid=-2, _int=__w);
    Object@Object x;
    x = new Object@Object(__cid=-2, _int=__x);
    Object@Object y;
    y = new Object@Object(__cid=-2, _int=__y);
    Object@Object z;
    z = new Object@Object(__cid=-2, _int=__z);
    int self_s132 = 0;
    Object@meta(self_s132);
    Object@Object self_s134 = null;
    Object_Object@Object(new Object@Object(__cid=self_s132), self_s134)//{};
    Object@Object limit = new Object@Object(__cid=-2, _int=100);
    assume (((u._int) > (new Object@Object(__cid=-2, _int=0)._int)) & ((u._int) < (limit._int))): "Assume at Passwor..erTest.sk:15"; //Assume at Passwor..erTest.sk:15
    assume (((w._int) > (new Object@Object(__cid=-2, _int=0)._int)) & ((w._int) < (limit._int))): "Assume at Passwor..erTest.sk:16"; //Assume at Passwor..erTest.sk:16
    assume (((x._int) > (new Object@Object(__cid=-2, _int=0)._int)) & ((x._int) < (limit._int))): "Assume at Passwor..erTest.sk:17"; //Assume at Passwor..erTest.sk:17
    assume (((y._int) > (new Object@Object(__cid=-2, _int=0)._int)) & ((y._int) < (limit._int))): "Assume at Passwor..erTest.sk:18"; //Assume at Passwor..erTest.sk:18
    assume (((z._int) > (new Object@Object(__cid=-2, _int=0)._int)) & ((z._int) < (limit._int))): "Assume at Passwor..erTest.sk:19"; //Assume at Passwor..erTest.sk:19
    assume ((((u._int) != (w._int)) && ((w._int) != (y._int))) && ((x._int) != (z._int))): "Assume at Passwor..erTest.sk:20"; //Assume at Passwor..erTest.sk:20
    Object@Object p1_s136 = null;
    toString_int@Integer(u, p1_s136);
    Object@Object p2_s138 = null;
    toString_int@Integer(w, p2_s138);
    Object@Object p3_s140 = null;
    toString_int@Integer(x, p3_s140);
    Object@Object p4_s142 = null;
    toString_int@Integer(y, p4_s142);
    Object@Object p5_s144 = null;
    toString_int@Integer(z, p5_s144);
    int pasman_s146 = 0;
    PasswordManager@meta(pasman_s146);
    Object@Object pasman_s148 = null;
    PasswordManager_PasswordManager_String@PasswordManager(new Object@Object(__cid=pasman_s146), p1_s136, pasman_s148)//{};
    int _out_s150 = 0;
    PasswordManager@meta(_out_s150);
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=_out_s150)._int))/*Passwor..erTest.sk:27*/
    {
      addPassword_String_String@PasswordManager(pasman_s148, p2_s138, p3_s140);
    }
    int _out_s152 = 0;
    PasswordManager@meta(_out_s152);
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=_out_s152)._int))/*Passwor..erTest.sk:29*/
    {
      addPassword_String_String@PasswordManager(pasman_s148, p4_s142, p5_s144);
    }
    int pass1_s154 = 0;
    PasswordManager@meta(pass1_s154);
    Object@Object _pac_sc_s155 = null;
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=pass1_s154)._int))/*Passwor..erTest.sk:31*/
    {
      Object@Object pass1_s157 = null;
      getPass_String@PasswordManager(pasman_s148, p2_s138, pass1_s157);
      _pac_sc_s155 = pass1_s157;
    }
    else
    {
      _pac_sc_s155 = null;
    }
    int _out_s159 = 0;
    String@meta(_out_s159);
    Object@Object _pac_sc_s160 = null;
    if((_pac_sc_s155.__cid) == (new Object@Object(__cid=-2, _int=_out_s159)._int))/*Passwor..erTest.sk:32*/
    {
      Object@Object _out_s162 = null;
      equals_Object@String(_pac_sc_s155, p3_s140, _out_s162);
      _pac_sc_s160 = _out_s162;
    }
    else
    {
      _pac_sc_s160 = null;
    }
    assert (_pac_sc_s160._bit); //Assert at Passwor..erTest.sk:32 (0)
    int pass2_s164 = 0;
    PasswordManager@meta(pass2_s164);
    Object@Object _pac_sc_s165 = null;
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=pass2_s164)._int))/*Passwor..erTest.sk:33*/
    {
      Object@Object pass2_s167 = null;
      getPass_String@PasswordManager(pasman_s148, p4_s142, pass2_s167);
      _pac_sc_s165 = pass2_s167;
    }
    else
    {
      _pac_sc_s165 = null;
    }
    int _out_s169 = 0;
    String@meta(_out_s169);
    Object@Object _pac_sc_s170 = null;
    if((_pac_sc_s165.__cid) == (new Object@Object(__cid=-2, _int=_out_s169)._int))/*Passwor..erTest.sk:34*/
    {
      Object@Object _out_s172 = null;
      equals_Object@String(_pac_sc_s165, p5_s144, _out_s172);
      _pac_sc_s170 = _out_s172;
    }
    else
    {
      _pac_sc_s170 = null;
    }
    assert (_pac_sc_s170._bit); //Assert at Passwor..erTest.sk:34 (0)
    int _out_s174 = 0;
    PasswordManager@meta(_out_s174);
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=_out_s174)._int))/*Passwor..erTest.sk:35*/
    {
      modifyPassword_String_String@PasswordManager(pasman_s148, p2_s138, p4_s142);
    }
    int pass3_s176 = 0;
    PasswordManager@meta(pass3_s176);
    Object@Object _pac_sc_s177 = null;
    if((pasman_s148.__cid) == (new Object@Object(__cid=-2, _int=pass3_s176)._int))/*Passwor..erTest.sk:37*/
    {
      Object@Object pass3_s179 = null;
      getPass_String@PasswordManager(pasman_s148, p2_s138, pass3_s179);
      _pac_sc_s177 = pass3_s179;
    }
    else
    {
      _pac_sc_s177 = null;
    }
    int _out_s181 = 0;
    String@meta(_out_s181);
    Object@Object _pac_sc_s182 = null;
    if((_pac_sc_s177.__cid) == (new Object@Object(__cid=-2, _int=_out_s181)._int))/*Passwor..erTest.sk:38*/
    {
      Object@Object _out_s184 = null;
      equals_Object@String(_pac_sc_s177, p4_s142, _out_s184);
      _pac_sc_s182 = _out_s184;
    }
    else
    {
      _pac_sc_s182 = null;
    }
    assert (_pac_sc_s182._bit); //Assert at Passwor..erTest.sk:38 (0)
  }
  /*Passwor..erTest.sk:7*/
  
void main_int_int_int_int_int__Wrapper (int __u, int __w, int __x, int __y, int __z)  implements main_int_int_int_int_int__WrapperNospec/*Passwor..erTest.sk:7*/
  {
    main_int_int_int_int_int(__u, __w, __x, __y, __z);
  }
  /*Passwor..erTest.sk:7*/
  
void main_int_int_int_int_int__WrapperNospec (int __u, int __w, int __x, int __y, int __z)/*Passwor..erTest.sk:7*/
  { }
  /* END PACKAGE PasswordManagerTest*/
}
/* BEGIN PACKAGE HashMap*/
package HashMap{
  struct HashMap {
      @Immutable()
  }
  struct Hashmap extends HashMap@HashMap {
      @Immutable()
  }
  struct Put_object_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      Object v;
      @Immutable()
  }
  struct Putb_object_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      Object v;
      @Immutable()
  }
  struct Removeb_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  struct Remove_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  struct Get_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  struct Containskey_object extends HashMap@HashMap {
      HashMap self;
      Object k;
      @Immutable()
  }
  /*HashMap.sk:13*/
  
void HashMap_HashMap (ref Object _out)/*HashMap.sk:13*/
  {
    int _out_s376 = 0;
    HashMap@meta(_out_s376);
    _out = new Object@Object(__cid=_out_s376, _hashmap=new Hashmap());
    return;
  }
  /*HashMap.sk:17*/
  
void put_Object_Object_Object (Object self, Object k, Object v, ref Object _out)/*HashMap.sk:17*/
  {
    int _out_s374 = 0;
    HashMap@meta(_out_s374);
    _out = new Object@Object(__cid=_out_s374, _hashmap=new Put_object_object(self=self._hashmap, k=k, v=v));
    return;
  }
  /*HashMap.sk:21*/
  
void putb_Object_Object_Object (Object self, Object k, Object v, ref Object _out)/*HashMap.sk:21*/
  {
    int _out_s372 = 0;
    HashMap@meta(_out_s372);
    _out = new Object@Object(__cid=_out_s372, _hashmap=new Putb_object_object(self=self._hashmap, k=k, v=v));
    return;
  }
  /*HashMap.sk:101*/
  
void xform_get_HashMap_Object (HashMap self, Object k, ref Object _out)/*HashMap.sk:101*/
  {
    switch(self){/*HashMap.sk:102*/
      case Hashmap:
      {
        _out = null;
        return;
      }
      case Put_object_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: HashMap.sk:102 ASSERTION CAN NOT BE SATISFIED: HashMap.sk:106 Assert at HashMap.sk:106 (1)
      case Putb_object_object:
      {
        int _out_s186 = 0;
        Boolean@meta(_out_s186);
        Object@Object _pac_sc_s187 = null;
        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s186)._int))/*HashMap.sk:108*/
        {
          Object@Object _out_s189 = null;
          equals_Object@Object(k, self.k, _out_s189);
          _pac_sc_s187 = _out_s189;
        }
        else
        {
          int _out_s191 = 0;
          Mac@meta(_out_s191);
          Object@Object _pac_sc_s192 = null;
          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s191)._int))/*HashMap.sk:108*/
          {
            Object@Object _out_s194 = null;
            equals_Object@Object(k, self.k, _out_s194);
            _pac_sc_s192 = _out_s194;
          }
          else
          {
            int _out_s196 = 0;
            PasswordMap@meta(_out_s196);
            Object@Object _pac_sc_s197 = null;
            if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s196)._int))/*HashMap.sk:108*/
            {
              Object@Object _out_s199 = null;
              equals_Object@Object(k, self.k, _out_s199);
              _pac_sc_s197 = _out_s199;
            }
            else
            {
              int _out_s201 = 0;
              SecretKeySpec@meta(_out_s201);
              Object@Object _pac_sc_s202 = null;
              if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s201)._int))/*HashMap.sk:108*/
              {
                Object@Object _out_s204 = null;
                equals_Object@Object(k, self.k, _out_s204);
                _pac_sc_s202 = _out_s204;
              }
              else
              {
                int _out_s206 = 0;
                IvParameterSpec@meta(_out_s206);
                Object@Object _pac_sc_s207 = null;
                if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s206)._int))/*HashMap.sk:108*/
                {
                  Object@Object _out_s209 = null;
                  equals_Object@Object(k, self.k, _out_s209);
                  _pac_sc_s207 = _out_s209;
                }
                else
                {
                  int _out_s211 = 0;
                  HashMap@meta(_out_s211);
                  Object@Object _pac_sc_s212 = null;
                  if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s211)._int))/*HashMap.sk:108*/
                  {
                    Object@Object _out_s214 = null;
                    equals_Object@Object(k, self.k, _out_s214);
                    _pac_sc_s212 = _out_s214;
                  }
                  else
                  {
                    int _out_s216 = 0;
                    Integer@meta(_out_s216);
                    Object@Object _pac_sc_s217 = null;
                    if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s216)._int))/*HashMap.sk:108*/
                    {
                      Object@Object _out_s219 = null;
                      equals_Object@Integer(k, self.k, _out_s219);
                      _pac_sc_s217 = _out_s219;
                    }
                    else
                    {
                      int _out_s221 = 0;
                      Cryptographer@meta(_out_s221);
                      Object@Object _pac_sc_s222 = null;
                      if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s221)._int))/*HashMap.sk:108*/
                      {
                        Object@Object _out_s224 = null;
                        equals_Object@Object(k, self.k, _out_s224);
                        _pac_sc_s222 = _out_s224;
                      }
                      else
                      {
                        int _out_s226 = 0;
                        Byte@meta(_out_s226);
                        Object@Object _pac_sc_s227 = null;
                        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s226)._int))/*HashMap.sk:108*/
                        {
                          Object@Object _out_s229 = null;
                          equals_Object@Object(k, self.k, _out_s229);
                          _pac_sc_s227 = _out_s229;
                        }
                        else
                        {
                          int _out_s231 = 0;
                          ArrayList@meta(_out_s231);
                          Object@Object _pac_sc_s232 = null;
                          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s231)._int))/*HashMap.sk:108*/
                          {
                            Object@Object _out_s234 = null;
                            equals_Object@Object(k, self.k, _out_s234);
                            _pac_sc_s232 = _out_s234;
                          }
                          else
                          {
                            int _out_s236 = 0;
                            Character@meta(_out_s236);
                            Object@Object _pac_sc_s237 = null;
                            if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s236)._int))/*HashMap.sk:108*/
                            {
                              Object@Object _out_s239 = null;
                              equals_Object@Character(k, self.k, _out_s239);
                              _pac_sc_s237 = _out_s239;
                            }
                            else
                            {
                              int _out_s241 = 0;
                              SecureRandom@meta(_out_s241);
                              Object@Object _pac_sc_s242 = null;
                              if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s241)._int))/*HashMap.sk:108*/
                              {
                                Object@Object _out_s244 = null;
                                equals_Object@Object(k, self.k, _out_s244);
                                _pac_sc_s242 = _out_s244;
                              }
                              else
                              {
                                int _out_s246 = 0;
                                Assert@meta(_out_s246);
                                Object@Object _pac_sc_s247 = null;
                                if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s246)._int))/*HashMap.sk:108*/
                                {
                                  Object@Object _out_s249 = null;
                                  equals_Object@Object(k, self.k, _out_s249);
                                  _pac_sc_s247 = _out_s249;
                                }
                                else
                                {
                                  int _out_s251 = 0;
                                  String@meta(_out_s251);
                                  Object@Object _pac_sc_s252 = null;
                                  if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s251)._int))/*HashMap.sk:108*/
                                  {
                                    Object@Object _out_s254 = null;
                                    equals_Object@String(k, self.k, _out_s254);
                                    _pac_sc_s252 = _out_s254;
                                  }
                                  else
                                  {
                                    int _out_s256 = 0;
                                    PasswordManager@meta(_out_s256);
                                    Object@Object _pac_sc_s257 = null;
                                    if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s256)._int))/*HashMap.sk:108*/
                                    {
                                      Object@Object _out_s259 = null;
                                      equals_Object@Object(k, self.k, _out_s259);
                                      _pac_sc_s257 = _out_s259;
                                    }
                                    else
                                    {
                                      int _out_s261 = 0;
                                      Cipher@meta(_out_s261);
                                      Object@Object _pac_sc_s262 = null;
                                      if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s261)._int))/*HashMap.sk:108*/
                                      {
                                        Object@Object _out_s264 = null;
                                        equals_Object@Object(k, self.k, _out_s264);
                                        _pac_sc_s262 = _out_s264;
                                      }
                                      else
                                      {
                                        int _out_s266 = 0;
                                        PasswordManagerTest@meta(_out_s266);
                                        Object@Object _pac_sc_s267 = null;
                                        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s266)._int))/*HashMap.sk:108*/
                                        {
                                          Object@Object _out_s269 = null;
                                          equals_Object@Object(k, self.k, _out_s269);
                                          _pac_sc_s267 = _out_s269;
                                        }
                                        else
                                        {
                                          int _out_s271 = 0;
                                          Object@meta(_out_s271);
                                          Object@Object _pac_sc_s272 = null;
                                          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s271)._int))/*HashMap.sk:108*/
                                          {
                                            Object@Object _out_s274 = null;
                                            equals_Object@Object(k, self.k, _out_s274);
                                            _pac_sc_s272 = _out_s274;
                                          }
                                          else
                                          {
                                            _pac_sc_s272 = null;
                                          }
                                          _pac_sc_s267 = _pac_sc_s272;
                                        }
                                        _pac_sc_s262 = _pac_sc_s267;
                                      }
                                      _pac_sc_s257 = _pac_sc_s262;
                                    }
                                    _pac_sc_s252 = _pac_sc_s257;
                                  }
                                  _pac_sc_s247 = _pac_sc_s252;
                                }
                                _pac_sc_s242 = _pac_sc_s247;
                              }
                              _pac_sc_s237 = _pac_sc_s242;
                            }
                            _pac_sc_s232 = _pac_sc_s237;
                          }
                          _pac_sc_s227 = _pac_sc_s232;
                        }
                        _pac_sc_s222 = _pac_sc_s227;
                      }
                      _pac_sc_s217 = _pac_sc_s222;
                    }
                    _pac_sc_s212 = _pac_sc_s217;
                  }
                  _pac_sc_s207 = _pac_sc_s212;
                }
                _pac_sc_s202 = _pac_sc_s207;
              }
              _pac_sc_s197 = _pac_sc_s202;
            }
            _pac_sc_s192 = _pac_sc_s197;
          }
          _pac_sc_s187 = _pac_sc_s192;
        }
        Object@Object _pac_sc_s275 = null;
        if(_pac_sc_s187._bit)/*HashMap.sk:108*/
        {
          _pac_sc_s275 = self.v;
        }
        else
        {
          Object@Object _out_s277 = null;
          xform_get_HashMap_Object(self.self, k, _out_s277);
          _pac_sc_s275 = _out_s277;
        }
        _out = _pac_sc_s275;
        return;
      }
      case Removeb_object:
      {
        int _out_s279 = 0;
        Boolean@meta(_out_s279);
        Object@Object _pac_sc_s280 = null;
        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s279)._int))/*HashMap.sk:111*/
        {
          Object@Object _out_s282 = null;
          equals_Object@Object(k, self.k, _out_s282);
          _pac_sc_s280 = _out_s282;
        }
        else
        {
          int _out_s284 = 0;
          Mac@meta(_out_s284);
          Object@Object _pac_sc_s285 = null;
          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s284)._int))/*HashMap.sk:111*/
          {
            Object@Object _out_s287 = null;
            equals_Object@Object(k, self.k, _out_s287);
            _pac_sc_s285 = _out_s287;
          }
          else
          {
            int _out_s289 = 0;
            PasswordMap@meta(_out_s289);
            Object@Object _pac_sc_s290 = null;
            if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s289)._int))/*HashMap.sk:111*/
            {
              Object@Object _out_s292 = null;
              equals_Object@Object(k, self.k, _out_s292);
              _pac_sc_s290 = _out_s292;
            }
            else
            {
              int _out_s294 = 0;
              SecretKeySpec@meta(_out_s294);
              Object@Object _pac_sc_s295 = null;
              if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s294)._int))/*HashMap.sk:111*/
              {
                Object@Object _out_s297 = null;
                equals_Object@Object(k, self.k, _out_s297);
                _pac_sc_s295 = _out_s297;
              }
              else
              {
                int _out_s299 = 0;
                IvParameterSpec@meta(_out_s299);
                Object@Object _pac_sc_s300 = null;
                if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s299)._int))/*HashMap.sk:111*/
                {
                  Object@Object _out_s302 = null;
                  equals_Object@Object(k, self.k, _out_s302);
                  _pac_sc_s300 = _out_s302;
                }
                else
                {
                  int _out_s304 = 0;
                  HashMap@meta(_out_s304);
                  Object@Object _pac_sc_s305 = null;
                  if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s304)._int))/*HashMap.sk:111*/
                  {
                    Object@Object _out_s307 = null;
                    equals_Object@Object(k, self.k, _out_s307);
                    _pac_sc_s305 = _out_s307;
                  }
                  else
                  {
                    int _out_s309 = 0;
                    Integer@meta(_out_s309);
                    Object@Object _pac_sc_s310 = null;
                    if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s309)._int))/*HashMap.sk:111*/
                    {
                      Object@Object _out_s312 = null;
                      equals_Object@Integer(k, self.k, _out_s312);
                      _pac_sc_s310 = _out_s312;
                    }
                    else
                    {
                      int _out_s314 = 0;
                      Cryptographer@meta(_out_s314);
                      Object@Object _pac_sc_s315 = null;
                      if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s314)._int))/*HashMap.sk:111*/
                      {
                        Object@Object _out_s317 = null;
                        equals_Object@Object(k, self.k, _out_s317);
                        _pac_sc_s315 = _out_s317;
                      }
                      else
                      {
                        int _out_s319 = 0;
                        Byte@meta(_out_s319);
                        Object@Object _pac_sc_s320 = null;
                        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s319)._int))/*HashMap.sk:111*/
                        {
                          Object@Object _out_s322 = null;
                          equals_Object@Object(k, self.k, _out_s322);
                          _pac_sc_s320 = _out_s322;
                        }
                        else
                        {
                          int _out_s324 = 0;
                          ArrayList@meta(_out_s324);
                          Object@Object _pac_sc_s325 = null;
                          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s324)._int))/*HashMap.sk:111*/
                          {
                            Object@Object _out_s327 = null;
                            equals_Object@Object(k, self.k, _out_s327);
                            _pac_sc_s325 = _out_s327;
                          }
                          else
                          {
                            int _out_s329 = 0;
                            Character@meta(_out_s329);
                            Object@Object _pac_sc_s330 = null;
                            if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s329)._int))/*HashMap.sk:111*/
                            {
                              Object@Object _out_s332 = null;
                              equals_Object@Character(k, self.k, _out_s332);
                              _pac_sc_s330 = _out_s332;
                            }
                            else
                            {
                              int _out_s334 = 0;
                              SecureRandom@meta(_out_s334);
                              Object@Object _pac_sc_s335 = null;
                              if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s334)._int))/*HashMap.sk:111*/
                              {
                                Object@Object _out_s337 = null;
                                equals_Object@Object(k, self.k, _out_s337);
                                _pac_sc_s335 = _out_s337;
                              }
                              else
                              {
                                int _out_s339 = 0;
                                Assert@meta(_out_s339);
                                Object@Object _pac_sc_s340 = null;
                                if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s339)._int))/*HashMap.sk:111*/
                                {
                                  Object@Object _out_s342 = null;
                                  equals_Object@Object(k, self.k, _out_s342);
                                  _pac_sc_s340 = _out_s342;
                                }
                                else
                                {
                                  int _out_s344 = 0;
                                  String@meta(_out_s344);
                                  Object@Object _pac_sc_s345 = null;
                                  if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s344)._int))/*HashMap.sk:111*/
                                  {
                                    Object@Object _out_s347 = null;
                                    equals_Object@String(k, self.k, _out_s347);
                                    _pac_sc_s345 = _out_s347;
                                  }
                                  else
                                  {
                                    int _out_s349 = 0;
                                    PasswordManager@meta(_out_s349);
                                    Object@Object _pac_sc_s350 = null;
                                    if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s349)._int))/*HashMap.sk:111*/
                                    {
                                      Object@Object _out_s352 = null;
                                      equals_Object@Object(k, self.k, _out_s352);
                                      _pac_sc_s350 = _out_s352;
                                    }
                                    else
                                    {
                                      int _out_s354 = 0;
                                      Cipher@meta(_out_s354);
                                      Object@Object _pac_sc_s355 = null;
                                      if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s354)._int))/*HashMap.sk:111*/
                                      {
                                        Object@Object _out_s357 = null;
                                        equals_Object@Object(k, self.k, _out_s357);
                                        _pac_sc_s355 = _out_s357;
                                      }
                                      else
                                      {
                                        int _out_s359 = 0;
                                        PasswordManagerTest@meta(_out_s359);
                                        Object@Object _pac_sc_s360 = null;
                                        if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s359)._int))/*HashMap.sk:111*/
                                        {
                                          Object@Object _out_s362 = null;
                                          equals_Object@Object(k, self.k, _out_s362);
                                          _pac_sc_s360 = _out_s362;
                                        }
                                        else
                                        {
                                          int _out_s364 = 0;
                                          Object@meta(_out_s364);
                                          Object@Object _pac_sc_s365 = null;
                                          if((k.__cid) == (new Object@Object(__cid=-2, _int=_out_s364)._int))/*HashMap.sk:111*/
                                          {
                                            Object@Object _out_s367 = null;
                                            equals_Object@Object(k, self.k, _out_s367);
                                            _pac_sc_s365 = _out_s367;
                                          }
                                          else
                                          {
                                            _pac_sc_s365 = null;
                                          }
                                          _pac_sc_s360 = _pac_sc_s365;
                                        }
                                        _pac_sc_s355 = _pac_sc_s360;
                                      }
                                      _pac_sc_s350 = _pac_sc_s355;
                                    }
                                    _pac_sc_s345 = _pac_sc_s350;
                                  }
                                  _pac_sc_s340 = _pac_sc_s345;
                                }
                                _pac_sc_s335 = _pac_sc_s340;
                              }
                              _pac_sc_s330 = _pac_sc_s335;
                            }
                            _pac_sc_s325 = _pac_sc_s330;
                          }
                          _pac_sc_s320 = _pac_sc_s325;
                        }
                        _pac_sc_s315 = _pac_sc_s320;
                      }
                      _pac_sc_s310 = _pac_sc_s315;
                    }
                    _pac_sc_s305 = _pac_sc_s310;
                  }
                  _pac_sc_s300 = _pac_sc_s305;
                }
                _pac_sc_s295 = _pac_sc_s300;
              }
              _pac_sc_s290 = _pac_sc_s295;
            }
            _pac_sc_s285 = _pac_sc_s290;
          }
          _pac_sc_s280 = _pac_sc_s285;
        }
        Object@Object _pac_sc_s368 = null;
        if(_pac_sc_s280._bit)/*HashMap.sk:111*/
        {
          _pac_sc_s368 = null;
        }
        else
        {
          Object@Object _out_s370 = null;
          xform_get_HashMap_Object(self.self, k, _out_s370);
          _pac_sc_s368 = _out_s370;
        }
        _out = _pac_sc_s368;
        return;
      }
      case Remove_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: HashMap.sk:102 ASSERTION CAN NOT BE SATISFIED: HashMap.sk:113 Assert at HashMap.sk:113 (1)
      case Get_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: HashMap.sk:102 ASSERTION CAN NOT BE SATISFIED: HashMap.sk:114 Assert at HashMap.sk:114 (1)
      case Containskey_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: HashMap.sk:102 ASSERTION CAN NOT BE SATISFIED: HashMap.sk:115 Assert at HashMap.sk:115 (1)
    }
    _out = null;
    return;
  }
  /* END PACKAGE HashMap*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  struct ArrayList {
      @Immutable()
  }
  struct Arraylist extends ArrayList@ArrayList {
      @Immutable()
  }
  struct Add_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Addb_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Getb_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Setb_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Get_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Set_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Ensurecapacity_int extends ArrayList@ArrayList {
      ArrayList self;
      Object n;
      @Immutable()
  }
  struct Size extends ArrayList@ArrayList {
      ArrayList self;
      @Immutable()
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE PasswordManager*/
package PasswordManager{
  /*Passwor..anager.sk:11*/
  
void PasswordManager_PasswordManager_String (Object self, Object masterPassword, ref Object _out)/*Passwor..anager.sk:11*/
  {
    int _out_s642 = 0;
    Cryptographer@meta(_out_s642);
    Object@Object _out_s644 = null;
    Cryptographer_Cryptographer@Cryptographer(new Object@Object(__cid=_out_s642), _out_s644)//{};
    self.cryptographer_PasswordManager = _out_s644;
    int _out_s646 = 0;
    PasswordMap@meta(_out_s646);
    Object@Object _out_s648 = null;
    PasswordMap_PasswordMap@PasswordMap(new Object@Object(__cid=_out_s646), _out_s648)//{};
    self.passMap_PasswordManager = _out_s648;
    _out = self;
    return;
  }
  /*Passwor..anager.sk:29*/
  
void addPassword_String_String (Object self, Object domain, Object passWord)/*Passwor..anager.sk:29*/
  {
    int PassEncryption_s630 = 0;
    Cryptographer@meta(PassEncryption_s630);
    Object@Object _pac_sc_s631 = null;
    if((self.cryptographer_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=PassEncryption_s630)._int))/*Passwor..anager.sk:30*/
    {
      Object@Object PassEncryption_s633 = null;
      encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord, PassEncryption_s633);
      _pac_sc_s631 = PassEncryption_s633;
    }
    else
    {
      _pac_sc_s631 = null;
    }
    int _out_s635 = 0;
    String@meta(_out_s635);
    Object@Object _pac_sc_s636 = null;
    if((passWord.__cid) == _out_s635)/*Passwor..anager.sk:31*/
    {
      Object@Object _out_s638 = null;
      equals_Object@String(passWord, _pac_sc_s631, _out_s638);
      _pac_sc_s636 = _out_s638;
    }
    else
    {
      _pac_sc_s636 = null;
    }
    assert (!(_pac_sc_s636._bit)); //Assert at Passwor..anager.sk:31 (0)
    int _out_s640 = 0;
    PasswordMap@meta(_out_s640);
    if((self.passMap_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=_out_s640)._int))/*Passwor..anager.sk:33*/
    {
      add_String_String@PasswordMap(self.passMap_PasswordManager, domain, _pac_sc_s631);
    }
  }
  /*Passwor..anager.sk:51*/
  
void getPass_String (Object self, Object domain, ref Object _out)/*Passwor..anager.sk:51*/
  {
    int PassEncryption_s608 = 0;
    PasswordMap@meta(PassEncryption_s608);
    Object@Object _pac_sc_s609 = null;
    if((self.passMap_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=PassEncryption_s608)._int))/*Passwor..anager.sk:53*/
    {
      Object@Object PassEncryption_s611 = null;
      get_String@PasswordMap(self.passMap_PasswordManager, domain, PassEncryption_s611);
      _pac_sc_s609 = PassEncryption_s611;
    }
    else
    {
      _pac_sc_s609 = null;
    }
    int _out_s613 = 0;
    Cryptographer@meta(_out_s613);
    Object@Object _pac_sc_s614 = null;
    if((self.cryptographer_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=_out_s613)._int))/*Passwor..anager.sk:54*/
    {
      Object@Object _out_s616 = null;
      decrypt_String@Cryptographer(self.cryptographer_PasswordManager, _pac_sc_s609, _out_s616);
      _pac_sc_s614 = _out_s616;
    }
    else
    {
      _pac_sc_s614 = null;
    }
    _out = _pac_sc_s614;
    return;
  }
  /*Passwor..anager.sk:37*/
  
void modifyPassword_String_String (Object self, Object domain, Object passWord)/*Passwor..anager.sk:37*/
  {
    int PassEncryption_s618 = 0;
    Cryptographer@meta(PassEncryption_s618);
    Object@Object _pac_sc_s619 = null;
    if((self.cryptographer_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=PassEncryption_s618)._int))/*Passwor..anager.sk:38*/
    {
      Object@Object PassEncryption_s621 = null;
      encrypt_String@Cryptographer(self.cryptographer_PasswordManager, passWord, PassEncryption_s621);
      _pac_sc_s619 = PassEncryption_s621;
    }
    else
    {
      _pac_sc_s619 = null;
    }
    int _out_s623 = 0;
    String@meta(_out_s623);
    Object@Object _pac_sc_s624 = null;
    if((passWord.__cid) == _out_s623)/*Passwor..anager.sk:39*/
    {
      Object@Object _out_s626 = null;
      equals_Object@String(passWord, _pac_sc_s619, _out_s626);
      _pac_sc_s624 = _out_s626;
    }
    else
    {
      _pac_sc_s624 = null;
    }
    assert (!(_pac_sc_s624._bit)); //Assert at Passwor..anager.sk:39 (0)
    int _out_s628 = 0;
    PasswordMap@meta(_out_s628);
    if((self.passMap_PasswordManager.__cid) == (new Object@Object(__cid=-2, _int=_out_s628)._int))/*Passwor..anager.sk:41*/
    {
      add_String_String@PasswordMap(self.passMap_PasswordManager, domain, _pac_sc_s619);
    }
  }
  /* END PACKAGE PasswordManager*/
}
/* BEGIN PACKAGE SecureRandom*/
package SecureRandom{
  struct SecureRandom {
      @Immutable()
  }
  struct Securerandom extends SecureRandom@SecureRandom {
      @Immutable()
  }
  struct Nextbytes_object extends SecureRandom@SecureRandom {
      SecureRandom self;
      Object k;
      @Immutable()
  }
  /*SecureRandom.sk:8*/
  
void SecureRandom_SecureRandom (ref Object _out)/*SecureRandom.sk:8*/
  {
    int _out_s678 = 0;
    SecureRandom@meta(_out_s678);
    _out = new Object@Object(__cid=_out_s678, _securerandom=new Securerandom());
    return;
  }
  /*SecureRandom.sk:12*/
  
void nextBytes_Object_Object (Object self, Object k, ref Object _out)/*SecureRandom.sk:12*/
  {
    int _out_s676 = 0;
    SecureRandom@meta(_out_s676);
    _out = new Object@Object(__cid=_out_s676, _securerandom=new Nextbytes_object(self=self._securerandom, k=k));
    return;
  }
  /* END PACKAGE SecureRandom*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:22*/
  
void String_String_byte (Object self, Object bytes, ref Object _out)/*String.sk:22*/
  {
    Object@Object len;
    len = bytes._array_char.length;
    Object@Object _out_s696 = null;
    Wrap_Array_char@array(new Array_char@array(length=len), _out_s696);
    self._value_String = _out_s696;
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa1 = (i._int) < (len._int);
    while(__sa1)
    {
      self._value_String._array_char.A[i._int] = new Object@Object(__cid=-3, _char=bytes._array_char.A[i._int])._char;
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa1 = (i._int) < (len._int);
    }
    self._count_String = len;
    _out = self;
    return;
  }
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Object ca, Object offset, Object count, ref Object _out)/*String.sk:7*/
  {
    if(((offset._int) > (new Object@Object(__cid=-2, _int=0)._int)) && ((offset._int) < (ca._array_char.length._int)))/*String.sk:8*/
    {
      Object@Object tmp_s717 = null;
      Wrap_Array_char@array(new Array_char@array(length=count), tmp_s717);
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa0 = (i._int) < (count._int);
      while(__sa0)
      {
        tmp_s717._array_char.A[i._int] = ca._array_char.A[(i._int) + (offset._int)];
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa0 = (i._int) < (count._int);
      }
      self._value_String = tmp_s717;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, Object index, ref Object _out)/*String.sk:43*/
  {
    if(((new Object@Object(__cid=-2, _int=0)._int) <= (index._int)) && ((index._int) < (self._count_String._int)))/*String.sk:44*/
    {
      _out = new Object@Object(__cid=-3, _char=self._value_String._array_char.A[index._int]);
      return;
    }
    _out = new Object@Object(__cid=-3, _char='\0');
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*String.sk:154*/
  {
    _out = new Object@Object(__cid=-4, _bit=0);
    int _out_s684 = 0;
    String@meta(_out_s684);
    if((obj.__cid) == _out_s684)/*String.sk:156*/
    {
      _out = new Object@Object(__cid=-4, _bit=1);
      int sLen_s686 = 0;
      String@meta(sLen_s686);
      Object@Object _pac_sc_s687 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=sLen_s686)._int))/*String.sk:159*/
      {
        Object@Object sLen_s689 = null;
        length@String(obj, sLen_s689);
        _pac_sc_s687 = sLen_s689;
      }
      else
      {
        _pac_sc_s687 = null;
      }
      int tLen_s691 = 0;
      String@meta(tLen_s691);
      Object@Object _pac_sc_s692 = null;
      if((self.__cid) == (new Object@Object(__cid=-2, _int=tLen_s691)._int))/*String.sk:160*/
      {
        Object@Object tLen_s694 = null;
        length@String(self, tLen_s694);
        _pac_sc_s692 = tLen_s694;
      }
      else
      {
        _pac_sc_s692 = null;
      }
      if((_pac_sc_s687._int) != (_pac_sc_s692._int))/*String.sk:161*/
      {
        _out = new Object@Object(__cid=-4, _bit=0);
      }
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa8 = ((i._int) < (_pac_sc_s687._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      while(__sa8)
      {
        if((obj._value_String._array_char.A[i._int]) != (self._value_String._array_char.A[i._int]))/*String.sk:163*/
        {
          _out = new Object@Object(__cid=-4, _bit=0);
        }
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa8 = ((i._int) < (_pac_sc_s687._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      }
    }
    return;
  }
  /*String.sk:214*/
  
void getBytes (Object self, ref Object _out)/*String.sk:214*/
  {
    int _out_s698 = 0;
    String@meta(_out_s698);
    Object@Object _pac_sc_s699 = null;
    if((self.__cid) == (new Object@Object(__cid=-2, _int=_out_s698)._int))/*String.sk:215*/
    {
      Object@Object _out_s701 = null;
      toString@String(self, _out_s701);
      _pac_sc_s699 = _out_s701;
    }
    else
    {
      _pac_sc_s699 = null;
    }
    Object@Object _out_s703 = null;
    getBytes_String(_pac_sc_s699, _out_s703)//{};
    _out = _out_s703;
    return;
  }
  /*String.sk:218*/
  
void getBytes_String (Object str, ref Object _out)/*String.sk:218*/
  {
    int len_s705 = 0;
    String@meta(len_s705);
    Object@Object _pac_sc_s706 = null;
    if((str.__cid) == (new Object@Object(__cid=-2, _int=len_s705)._int))/*String.sk:219*/
    {
      Object@Object len_s708 = null;
      length@String(str, len_s708);
      _pac_sc_s706 = len_s708;
    }
    else
    {
      _pac_sc_s706 = null;
    }
    Object@Object bytes_s710 = null;
    Wrap_Array_char@array(new Array_char@array(length=_pac_sc_s706), bytes_s710);
    _out = bytes_s710;
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa14 = (i._int) < (_pac_sc_s706._int);
    while(__sa14)
    {
      int _out_s712 = 0;
      String@meta(_out_s712);
      Object@Object _pac_sc_s713 = null;
      if((str.__cid) == (new Object@Object(__cid=-2, _int=_out_s712)._int))/*String.sk:222*/
      {
        Object@Object _out_s715 = null;
        charAt_int@String(str, i, _out_s715);
        _pac_sc_s713 = _out_s715;
      }
      else
      {
        _pac_sc_s713 = null;
      }
      bytes_s710._array_char.A[i._int] = _pac_sc_s713._char;
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa14 = (i._int) < (_pac_sc_s706._int);
    }
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref Object _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /*String.sk:52*/
  
void toString (Object self, ref Object _out)/*String.sk:52*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE Mac*/
package Mac{
  struct Mac {
      @Immutable()
  }
  struct Mac_empty extends Mac@Mac {
      @Immutable()
  }
  struct Init_secretkeyspec extends Mac@Mac {
      Mac self;
      Object key;
      @Immutable()
  }
  struct Initb_secretkeyspec extends Mac@Mac {
      Mac self;
      Object key;
      @Immutable()
  }
  struct Dofinal_object extends Mac@Mac {
      Mac self;
      Object text;
      @Immutable()
  }
  /*Mac.sk:10*/
  
void Mac_Mac (ref Object _out)/*Mac.sk:10*/
  {
    int _out_s902 = 0;
    Mac@meta(_out_s902);
    _out = new Object@Object(__cid=_out_s902, _mac=new Mac_empty());
    return;
  }
  /*Mac.sk:14*/
  
void init_Object_SecretKeySpec (Object self, Object key, ref Object _out)/*Mac.sk:14*/
  {
    int _out_s900 = 0;
    Mac@meta(_out_s900);
    _out = new Object@Object(__cid=_out_s900, _mac=new Init_secretkeyspec(self=self._mac, key=key));
    return;
  }
  /*Mac.sk:18*/
  
void initb_Object_SecretKeySpec (Object self, Object key, ref Object _out)/*Mac.sk:18*/
  {
    int _out_s898 = 0;
    Mac@meta(_out_s898);
    _out = new Object@Object(__cid=_out_s898, _mac=new Initb_secretkeyspec(self=self._mac, key=key));
    return;
  }
  /* END PACKAGE Mac*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:24*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Integer.sk:24*/
  {
    int _out_s908 = 0;
    Integer@meta(_out_s908);
    if((obj.__cid) == _out_s908)/*Integer.sk:25*/
    {
      int _out_s910 = 0;
      Integer@meta(_out_s910);
      Object@Object _pac_sc_s911 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s910)._int))/*Integer.sk:26*/
      {
        Object@Object _out_s913 = null;
        intValue@Integer(obj, _out_s913);
        _pac_sc_s911 = _out_s913;
      }
      else
      {
        _pac_sc_s911 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Integer._int) == (_pac_sc_s911._int));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /*Integer.sk:12*/
  
void intValue (Object self, ref Object _out)/*Integer.sk:12*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:39*/
  
void toString_int (Object i, ref Object _out)/*Integer.sk:39*/
  {
    if((i._int) == (new Object@Object(__cid=-2, _int=0)._int))/*Integer.sk:40*/
    {
      int _out_s915 = 0;
      String@meta(_out_s915);
      Object@Object _out_s917 = null;
      Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=2), A={'0','\0'}), _out_s917);
      Object@Object _out_s919 = null;
      String_String_char_int_int@String(new Object@Object(__cid=_out_s915), _out_s917, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=1), _out_s919)//{};
      _out = _out_s919;
      return;
    }
    Object@Object index = new Object@Object(__cid=-2, _int=0);
    Object@Object temp = i;
    Object@Object j;
    Object@Object ret_s921 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=32)), ret_s921);
    Object@Object ret2_s923 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=32)), ret2_s923);
    Object@Object nums_s925 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=10)), nums_s925);
    nums_s925._array_char.A[0] = new Object@Object(__cid=-3, _char='0')._char;
    nums_s925._array_char.A[1] = new Object@Object(__cid=-3, _char='1')._char;
    nums_s925._array_char.A[2] = new Object@Object(__cid=-3, _char='2')._char;
    nums_s925._array_char.A[3] = new Object@Object(__cid=-3, _char='3')._char;
    nums_s925._array_char.A[4] = new Object@Object(__cid=-3, _char='4')._char;
    nums_s925._array_char.A[5] = new Object@Object(__cid=-3, _char='5')._char;
    nums_s925._array_char.A[6] = new Object@Object(__cid=-3, _char='6')._char;
    nums_s925._array_char.A[7] = new Object@Object(__cid=-3, _char='7')._char;
    nums_s925._array_char.A[8] = new Object@Object(__cid=-3, _char='8')._char;
    nums_s925._array_char.A[9] = new Object@Object(__cid=-3, _char='9')._char;
    if((i._int) < (new Object@Object(__cid=-2, _int=0)._int))/*Integer.sk:47*/
    {
      temp = new Object@Object(__cid=-2, _int=(i._int) * (-(new Object@Object(__cid=-2, _int=1)._int)));
    }
    bit __sa19 = (temp._int) > (new Object@Object(__cid=-2, _int=0)._int);
    while(__sa19)
    {
      ret_s921._array_char.A[index._int] = nums_s925._array_char.A[(temp._int) % (new Object@Object(__cid=-2, _int=10)._int)];
      temp = new Object@Object(__cid=-2, _int=(temp._int) / (new Object@Object(__cid=-2, _int=10)._int));
      index = new Object@Object(__cid=-2, _int=(index._int) + (new Object@Object(__cid=-2, _int=1)._int));
      __sa19 = (temp._int) > (new Object@Object(__cid=-2, _int=0)._int);
    }
    if((i._int) < (new Object@Object(__cid=-2, _int=0)._int))/*Integer.sk:55*/
    {
      ret_s921._array_char.A[index._int] = new Object@Object(__cid=-3, _char='-')._char;
      index = new Object@Object(__cid=-2, _int=(index._int) + (new Object@Object(__cid=-2, _int=1)._int));
    }
    Object@Object size = index;
    j = new Object@Object(__cid=-2, _int=0);
    bit __sa20 = (j._int) < (index._int);
    while(__sa20)
    {
      ret2_s923._array_char.A[j._int] = ret_s921._array_char.A[(index._int) - (new Object@Object(__cid=-2, _int=1)._int)];
      index = new Object@Object(__cid=-2, _int=(index._int) - (new Object@Object(__cid=-2, _int=1)._int));
      j = new Object@Object(__cid=-2, _int=(j._int) + 1);
      __sa20 = (j._int) < (size._int);
    }
    int _out_s927 = 0;
    String@meta(_out_s927);
    Object@Object _out_s929 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s927), ret2_s923, new Object@Object(__cid=-2, _int=0), size, _out_s929)//{};
    _out = _out_s929;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE SecretKey*/
package SecretKey{
  /* END PACKAGE SecretKey*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE PasswordMap*/
package PasswordMap{
  /*PasswordMap.sk:3*/
  
void PasswordMap_PasswordMap (Object self, ref Object _out)/*PasswordMap.sk:3*/
  {
    Object@Object _out_s1154 = null;
    HashMap_HashMap@HashMap(_out_s1154);
    self.passMap_PasswordMap = _out_s1154;
    int _out_s1156 = 0;
    String@meta(_out_s1156);
    Object@Object _out_s1158 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=16), A={'S','e','c','r','e','t',' ','P','a','s','s','w','o','r','d','\0'}), _out_s1158);
    Object@Object _out_s1160 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s1156), _out_s1158, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=15), _out_s1160)//{};
    self.masterHash_PasswordMap = _out_s1160;
    _out = self;
    return;
  }
  /*PasswordMap.sk:9*/
  
void add_String_String (Object self, Object tag, Object passEncryption)/*PasswordMap.sk:9*/
  {
    int _out_s1144 = 0;
    HashMap@meta(_out_s1144);
    if((self.passMap_PasswordMap.__cid) == (new Object@Object(__cid=-2, _int=_out_s1144)._int))/*PasswordMap.sk:10*/
    {
      Object@Object _out_s1147 = null;
      put_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption, _out_s1147);
    }
    int _out_s1149 = 0;
    HashMap@meta(_out_s1149);
    Object@Object _pac_sc_s1150 = null;
    if((self.passMap_PasswordMap.__cid) == (new Object@Object(__cid=-2, _int=_out_s1149)._int))/*PasswordMap.sk:10*/
    {
      Object@Object _out_s1152 = null;
      putb_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption, _out_s1152);
      _pac_sc_s1150 = _out_s1152;
    }
    else
    {
      _pac_sc_s1150 = null;
    }
    self.passMap_PasswordMap = _pac_sc_s1150;
  }
  /*PasswordMap.sk:17*/
  
void get_String (Object self, Object domainHash, ref Object _out)/*PasswordMap.sk:17*/
  {
    Object@Object _out_s1142 = null;
    xform_get_HashMap_Object@HashMap(self.passMap_PasswordMap._hashmap, domainHash, _out_s1142);
    _out = _out_s1142;
    return;
  }
  /* END PACKAGE PasswordMap*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      Object length;
      bit[length._int] A;
  }
  struct Array_char {
      Object length;
      char[length._int] A;
  }
  struct Array_int {
      Object length;
      int[length._int] A;
  }
  struct Array_float {
      Object length;
      float[length._int] A;
  }
  struct Array_double {
      Object length;
      double[length._int] A;
  }
  struct Array_Object {
      Object length;
      Object[length._int] A;
  }
  /*array.sk:37*/
  
void Wrap_Array_char (Array_char arr, ref Object _out)/*array.sk:37*/
  {
    int _out_s1177 = 0;
    Array@meta(_out_s1177);
    _out = new Object@Object(__cid=_out_s1177, _array_char=arr);
    return;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:25*/
  
void Array (ref int _out)/*meta.sk:25*/
  {
    _out = -1;
    return;
  }
  /*meta.sk:4*/
  
void ArrayList (ref int _out)/*meta.sk:4*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:5*/
  
void Assert (ref int _out)/*meta.sk:5*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:6*/
  
void Boolean (ref int _out)/*meta.sk:6*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:7*/
  
void Byte (ref int _out)/*meta.sk:7*/
  {
    _out = 13;
    return;
  }
  /*meta.sk:9*/
  
void Character (ref int _out)/*meta.sk:9*/
  {
    _out = 10;
    return;
  }
  /*meta.sk:10*/
  
void Cipher (ref int _out)/*meta.sk:10*/
  {
    _out = 19;
    return;
  }
  /*meta.sk:11*/
  
void Cryptographer (ref int _out)/*meta.sk:11*/
  {
    _out = 5;
    return;
  }
  /*meta.sk:12*/
  
void HashMap (ref int _out)/*meta.sk:12*/
  {
    _out = 14;
    return;
  }
  /*meta.sk:13*/
  
void Integer (ref int _out)/*meta.sk:13*/
  {
    _out = 15;
    return;
  }
  /*meta.sk:14*/
  
void IvParameterSpec (ref int _out)/*meta.sk:14*/
  {
    _out = 20;
    return;
  }
  /*meta.sk:16*/
  
void Mac (ref int _out)/*meta.sk:16*/
  {
    _out = 16;
    return;
  }
  /*meta.sk:17*/
  
void Object (ref int _out)/*meta.sk:17*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:18*/
  
void PasswordManager (ref int _out)/*meta.sk:18*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:19*/
  
void PasswordManagerTest (ref int _out)/*meta.sk:19*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:20*/
  
void PasswordMap (ref int _out)/*meta.sk:20*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:22*/
  
void SecretKeySpec (ref int _out)/*meta.sk:22*/
  {
    _out = 17;
    return;
  }
  /*meta.sk:23*/
  
void SecureRandom (ref int _out)/*meta.sk:23*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:24*/
  
void String (ref int _out)/*meta.sk:24*/
  {
    _out = 12;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE SecretKeySpec*/
package SecretKeySpec{
  struct SecretKeySpec {
      @Immutable()
  }
  struct Secretkeyspec extends SecretKeySpec@SecretKeySpec {
      @Immutable()
  }
  struct Getencoded extends SecretKeySpec@SecretKeySpec {
      SecretKeySpec self;
      @Immutable()
  }
  /*SecretKeySpec.sk:8*/
  
void SecretKeySpec_SecretKeySpec (ref Object _out)/*SecretKeySpec.sk:8*/
  {
    int _out_s1189 = 0;
    SecretKeySpec@meta(_out_s1189);
    _out = new Object@Object(__cid=_out_s1189, _secretkeyspec=new Secretkeyspec());
    return;
  }
  /* END PACKAGE SecretKeySpec*/
}
/* BEGIN PACKAGE Byte*/
package Byte{
  /* END PACKAGE Byte*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object cryptographer_PasswordManager;
      Object passMap_PasswordManager;
      Object _value_String;
      Object _count_String;
      Object value_Character;
      Object b_Byte;
      Object GCMSecretKey_Cryptographer;
      Object Hash_secret_key_Cryptographer;
      Object sha256_HMAC_Cryptographer;
      Object myCypherOut_Cryptographer;
      Object randomIv_Cryptographer;
      Object ivParameterSpec_Cryptographer;
      Object MAX_LENGTH_PASSWORD_Cryptographer;
      Object value_Integer;
      Object passMap_PasswordMap;
      Object masterHash_PasswordMap;
      Object bool_Boolean;
      Cipher _cipher;
      SecureRandom _securerandom;
      ArrayList _arraylist;
      HashMap _hashmap;
      SecretKeySpec _secretkeyspec;
      Mac _mac;
      Array_bit _array_bit;
      Array_char _array_char;
      Array_int _array_int;
      Array_float _array_float;
      Array_double _array_double;
      Array_Object _array_object;
      bit _bit;
      char _char;
      int _int;
      float _float;
      double _double;
  }
  /*Object.sk:3*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:3*/
  {
    _out = self;
    return;
  }
  /*Object.sk:17*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Object.sk:17*/
  {
    _out = new Object(__cid=-4, _bit=self == obj);
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE IvParameterSpec*/
package IvParameterSpec{
  /*IvParam..erSpec.sk:7*/
  
void IvParameterSpec_IvParameterSpec_byte (Object self, Object val, ref Object _out)/*IvParam..erSpec.sk:7*/
  {
    _out = self;
    return;
  }
  /* END PACKAGE IvParameterSpec*/
}
/* BEGIN PACKAGE Cipher*/
package Cipher{
  struct Cipher {
      @Immutable()
  }
  struct Cipher_empty extends Cipher@Cipher {
      @Immutable()
  }
  struct Tostring extends Cipher@Cipher {
      Cipher self;
      @Immutable()
  }
  struct Cipher_string extends Cipher@Cipher {
      Object t;
      @Immutable()
  }
  struct Init_int_object_object extends Cipher@Cipher {
      Cipher self;
      Object mode;
      Object k;
      Object iv;
      @Immutable()
  }
  struct Initb_int_object_object extends Cipher@Cipher {
      Cipher self;
      Object mode;
      Object k;
      Object iv;
      @Immutable()
  }
  struct Dofinalb_object extends Cipher@Cipher {
      Cipher self;
      Object text;
      @Immutable()
  }
  struct Dofinal_object extends Cipher@Cipher {
      Cipher self;
      Object text;
      @Immutable()
  }
  /*Cipher.sk:17*/
  
void Cipher_Cipher (ref Object _out)/*Cipher.sk:17*/
  {
    int _out_s1477 = 0;
    Cipher@meta(_out_s1477);
    _out = new Object@Object(__cid=_out_s1477, _cipher=new Cipher_empty());
    return;
  }
  /*Cipher.sk:41*/
  
void doFinal_Object_Object (Object self, Object text, ref Object _out)/*Cipher.sk:41*/
  {
    int _out_s1469 = 0;
    Cipher@meta(_out_s1469);
    _out = new Object@Object(__cid=_out_s1469, _cipher=new Dofinal_object(self=self._cipher, text=text));
    return;
  }
  /*Cipher.sk:37*/
  
void doFinalb_Object_Object (Object self, Object text, ref Object _out)/*Cipher.sk:37*/
  {
    int _out_s1467 = 0;
    Cipher@meta(_out_s1467);
    _out = new Object@Object(__cid=_out_s1467, _cipher=new Dofinalb_object(self=self._cipher, text=text));
    return;
  }
  /*Cipher.sk:29*/
  
void init_Object_int_Object_Object (Object self, Object mode, Object k, Object iv, ref Object _out)/*Cipher.sk:29*/
  {
    int _out_s1473 = 0;
    Cipher@meta(_out_s1473);
    _out = new Object@Object(__cid=_out_s1473, _cipher=new Init_int_object_object(self=self._cipher, mode=mode, k=k, iv=iv));
    return;
  }
  /*Cipher.sk:33*/
  
void initb_Object_int_Object_Object (Object self, Object mode, Object k, Object iv, ref Object _out)/*Cipher.sk:33*/
  {
    int _out_s1471 = 0;
    Cipher@meta(_out_s1471);
    _out = new Object@Object(__cid=_out_s1471, _cipher=new Initb_int_object_object(self=self._cipher, mode=mode, k=k, iv=iv));
    return;
  }
  /*Cipher.sk:21*/
  
void toString_Object (Object self, ref Object _out)/*Cipher.sk:21*/
  {
    int _out_s1475 = 0;
    Cipher@meta(_out_s1475);
    _out = new Object@Object(__cid=_out_s1475, _cipher=new Tostring(self=self._cipher));
    return;
  }
  /*Cipher.sk:140*/
  
void xform_doFinal_Cipher_Object (Cipher self, Object text, ref Object _out)/*Cipher.sk:140*/
  {
    switch(self){/*Cipher.sk:141*/
      case Cipher_empty:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:142 Assert at Cipher.sk:142 (1)
      case Tostring:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:143 Assert at Cipher.sk:143 (1)
      case Cipher_string:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:144 Assert at Cipher.sk:144 (1)
      case Init_int_object_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:145 Assert at Cipher.sk:145 (1)
      case Initb_int_object_object:
      {
        Cipher@Cipher text_text = text._cipher;
        switch(text_text){/*Cipher.sk:150*/
          case Cipher_empty:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:151 Assert at Cipher.sk:151 (1)
          case Tostring:
          {
            Cipher@Cipher text_text_text = text_text.self;
            switch(text_text_text){/*Cipher.sk:156*/
              case Cipher_empty:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:157 Assert at Cipher.sk:157 (1)
              case Tostring:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:158 Assert at Cipher.sk:158 (1)
              case Cipher_string:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:159 Assert at Cipher.sk:159 (1)
              case Init_int_object_object:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:160 Assert at Cipher.sk:160 (1)
              case Initb_int_object_object:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:161 Assert at Cipher.sk:161 (1)
              case Dofinalb_object:
              {
                Cipher@Cipher text_text_text_text = text_text_text.self;
                switch(text_text_text_text){/*Cipher.sk:166*/
                  case Cipher_empty:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:167 Assert at Cipher.sk:167 (1)
                  case Tostring:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:168 Assert at Cipher.sk:168 (1)
                  case Cipher_string:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:169 Assert at Cipher.sk:169 (1)
                  case Init_int_object_object:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:170 Assert at Cipher.sk:170 (1)
                  case Initb_int_object_object:
                  {
                    int _out_s1287 = 0;
                    Boolean@meta(_out_s1287);
                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1287)._int))/*Cipher.sk:172*/
                    {
                      Object@Object _out_s1290 = null;
                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1290);
                    }
                    else
                    {
                      int _out_s1292 = 0;
                      Mac@meta(_out_s1292);
                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1292)._int))/*Cipher.sk:172*/
                      {
                        Object@Object _out_s1295 = null;
                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1295);
                      }
                      else
                      {
                        int _out_s1297 = 0;
                        PasswordMap@meta(_out_s1297);
                        if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1297)._int))/*Cipher.sk:172*/
                        {
                          Object@Object _out_s1300 = null;
                          equals_Object@Object(self.k, text_text_text_text.k, _out_s1300);
                        }
                        else
                        {
                          int _out_s1302 = 0;
                          SecretKeySpec@meta(_out_s1302);
                          if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1302)._int))/*Cipher.sk:172*/
                          {
                            Object@Object _out_s1305 = null;
                            equals_Object@Object(self.k, text_text_text_text.k, _out_s1305);
                          }
                          else
                          {
                            int _out_s1307 = 0;
                            IvParameterSpec@meta(_out_s1307);
                            if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1307)._int))/*Cipher.sk:172*/
                            {
                              Object@Object _out_s1310 = null;
                              equals_Object@Object(self.k, text_text_text_text.k, _out_s1310);
                            }
                            else
                            {
                              int _out_s1312 = 0;
                              HashMap@meta(_out_s1312);
                              if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1312)._int))/*Cipher.sk:172*/
                              {
                                Object@Object _out_s1315 = null;
                                equals_Object@Object(self.k, text_text_text_text.k, _out_s1315);
                              }
                              else
                              {
                                int _out_s1317 = 0;
                                Integer@meta(_out_s1317);
                                if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1317)._int))/*Cipher.sk:172*/
                                {
                                  Object@Object _out_s1320 = null;
                                  equals_Object@Integer(self.k, text_text_text_text.k, _out_s1320);
                                }
                                else
                                {
                                  int _out_s1322 = 0;
                                  Cryptographer@meta(_out_s1322);
                                  if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1322)._int))/*Cipher.sk:172*/
                                  {
                                    Object@Object _out_s1325 = null;
                                    equals_Object@Object(self.k, text_text_text_text.k, _out_s1325);
                                  }
                                  else
                                  {
                                    int _out_s1327 = 0;
                                    Byte@meta(_out_s1327);
                                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1327)._int))/*Cipher.sk:172*/
                                    {
                                      Object@Object _out_s1330 = null;
                                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1330);
                                    }
                                    else
                                    {
                                      int _out_s1332 = 0;
                                      ArrayList@meta(_out_s1332);
                                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1332)._int))/*Cipher.sk:172*/
                                      {
                                        Object@Object _out_s1335 = null;
                                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1335);
                                      }
                                      else
                                      {
                                        int _out_s1337 = 0;
                                        Character@meta(_out_s1337);
                                        if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1337)._int))/*Cipher.sk:172*/
                                        {
                                          Object@Object _out_s1340 = null;
                                          equals_Object@Character(self.k, text_text_text_text.k, _out_s1340);
                                        }
                                        else
                                        {
                                          int _out_s1342 = 0;
                                          SecureRandom@meta(_out_s1342);
                                          if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1342)._int))/*Cipher.sk:172*/
                                          {
                                            Object@Object _out_s1345 = null;
                                            equals_Object@Object(self.k, text_text_text_text.k, _out_s1345);
                                          }
                                          else
                                          {
                                            int _out_s1347 = 0;
                                            Assert@meta(_out_s1347);
                                            if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1347)._int))/*Cipher.sk:172*/
                                            {
                                              Object@Object _out_s1350 = null;
                                              equals_Object@Object(self.k, text_text_text_text.k, _out_s1350);
                                            }
                                            else
                                            {
                                              int _out_s1352 = 0;
                                              String@meta(_out_s1352);
                                              if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1352)._int))/*Cipher.sk:172*/
                                              {
                                                Object@Object _out_s1355 = null;
                                                equals_Object@String(self.k, text_text_text_text.k, _out_s1355);
                                              }
                                              else
                                              {
                                                int _out_s1357 = 0;
                                                PasswordManager@meta(_out_s1357);
                                                if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1357)._int))/*Cipher.sk:172*/
                                                {
                                                  Object@Object _out_s1360 = null;
                                                  equals_Object@Object(self.k, text_text_text_text.k, _out_s1360);
                                                }
                                                else
                                                {
                                                  int _out_s1362 = 0;
                                                  Cipher@meta(_out_s1362);
                                                  if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1362)._int))/*Cipher.sk:172*/
                                                  {
                                                    Object@Object _out_s1365 = null;
                                                    equals_Object@Object(self.k, text_text_text_text.k, _out_s1365);
                                                  }
                                                  else
                                                  {
                                                    int _out_s1367 = 0;
                                                    PasswordManagerTest@meta(_out_s1367);
                                                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1367)._int))/*Cipher.sk:172*/
                                                    {
                                                      Object@Object _out_s1370 = null;
                                                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1370);
                                                    }
                                                    else
                                                    {
                                                      int _out_s1372 = 0;
                                                      Object@meta(_out_s1372);
                                                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1372)._int))/*Cipher.sk:172*/
                                                      {
                                                        Object@Object _out_s1375 = null;
                                                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1375);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    int _out_s1377 = 0;
                    Boolean@meta(_out_s1377);
                    Object@Object _pac_sc_s1378 = null;
                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1377)._int))/*Cipher.sk:172*/
                    {
                      Object@Object _out_s1380 = null;
                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1380);
                      _pac_sc_s1378 = _out_s1380;
                    }
                    else
                    {
                      int _out_s1382 = 0;
                      Mac@meta(_out_s1382);
                      Object@Object _pac_sc_s1383 = null;
                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1382)._int))/*Cipher.sk:172*/
                      {
                        Object@Object _out_s1385 = null;
                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1385);
                        _pac_sc_s1383 = _out_s1385;
                      }
                      else
                      {
                        int _out_s1387 = 0;
                        PasswordMap@meta(_out_s1387);
                        Object@Object _pac_sc_s1388 = null;
                        if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1387)._int))/*Cipher.sk:172*/
                        {
                          Object@Object _out_s1390 = null;
                          equals_Object@Object(self.k, text_text_text_text.k, _out_s1390);
                          _pac_sc_s1388 = _out_s1390;
                        }
                        else
                        {
                          int _out_s1392 = 0;
                          SecretKeySpec@meta(_out_s1392);
                          Object@Object _pac_sc_s1393 = null;
                          if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1392)._int))/*Cipher.sk:172*/
                          {
                            Object@Object _out_s1395 = null;
                            equals_Object@Object(self.k, text_text_text_text.k, _out_s1395);
                            _pac_sc_s1393 = _out_s1395;
                          }
                          else
                          {
                            int _out_s1397 = 0;
                            IvParameterSpec@meta(_out_s1397);
                            Object@Object _pac_sc_s1398 = null;
                            if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1397)._int))/*Cipher.sk:172*/
                            {
                              Object@Object _out_s1400 = null;
                              equals_Object@Object(self.k, text_text_text_text.k, _out_s1400);
                              _pac_sc_s1398 = _out_s1400;
                            }
                            else
                            {
                              int _out_s1402 = 0;
                              HashMap@meta(_out_s1402);
                              Object@Object _pac_sc_s1403 = null;
                              if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1402)._int))/*Cipher.sk:172*/
                              {
                                Object@Object _out_s1405 = null;
                                equals_Object@Object(self.k, text_text_text_text.k, _out_s1405);
                                _pac_sc_s1403 = _out_s1405;
                              }
                              else
                              {
                                int _out_s1407 = 0;
                                Integer@meta(_out_s1407);
                                Object@Object _pac_sc_s1408 = null;
                                if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1407)._int))/*Cipher.sk:172*/
                                {
                                  Object@Object _out_s1410 = null;
                                  equals_Object@Integer(self.k, text_text_text_text.k, _out_s1410);
                                  _pac_sc_s1408 = _out_s1410;
                                }
                                else
                                {
                                  int _out_s1412 = 0;
                                  Cryptographer@meta(_out_s1412);
                                  Object@Object _pac_sc_s1413 = null;
                                  if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1412)._int))/*Cipher.sk:172*/
                                  {
                                    Object@Object _out_s1415 = null;
                                    equals_Object@Object(self.k, text_text_text_text.k, _out_s1415);
                                    _pac_sc_s1413 = _out_s1415;
                                  }
                                  else
                                  {
                                    int _out_s1417 = 0;
                                    Byte@meta(_out_s1417);
                                    Object@Object _pac_sc_s1418 = null;
                                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1417)._int))/*Cipher.sk:172*/
                                    {
                                      Object@Object _out_s1420 = null;
                                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1420);
                                      _pac_sc_s1418 = _out_s1420;
                                    }
                                    else
                                    {
                                      int _out_s1422 = 0;
                                      ArrayList@meta(_out_s1422);
                                      Object@Object _pac_sc_s1423 = null;
                                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1422)._int))/*Cipher.sk:172*/
                                      {
                                        Object@Object _out_s1425 = null;
                                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1425);
                                        _pac_sc_s1423 = _out_s1425;
                                      }
                                      else
                                      {
                                        int _out_s1427 = 0;
                                        Character@meta(_out_s1427);
                                        Object@Object _pac_sc_s1428 = null;
                                        if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1427)._int))/*Cipher.sk:172*/
                                        {
                                          Object@Object _out_s1430 = null;
                                          equals_Object@Character(self.k, text_text_text_text.k, _out_s1430);
                                          _pac_sc_s1428 = _out_s1430;
                                        }
                                        else
                                        {
                                          int _out_s1432 = 0;
                                          SecureRandom@meta(_out_s1432);
                                          Object@Object _pac_sc_s1433 = null;
                                          if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1432)._int))/*Cipher.sk:172*/
                                          {
                                            Object@Object _out_s1435 = null;
                                            equals_Object@Object(self.k, text_text_text_text.k, _out_s1435);
                                            _pac_sc_s1433 = _out_s1435;
                                          }
                                          else
                                          {
                                            int _out_s1437 = 0;
                                            Assert@meta(_out_s1437);
                                            Object@Object _pac_sc_s1438 = null;
                                            if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1437)._int))/*Cipher.sk:172*/
                                            {
                                              Object@Object _out_s1440 = null;
                                              equals_Object@Object(self.k, text_text_text_text.k, _out_s1440);
                                              _pac_sc_s1438 = _out_s1440;
                                            }
                                            else
                                            {
                                              int _out_s1442 = 0;
                                              String@meta(_out_s1442);
                                              Object@Object _pac_sc_s1443 = null;
                                              if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1442)._int))/*Cipher.sk:172*/
                                              {
                                                Object@Object _out_s1445 = null;
                                                equals_Object@String(self.k, text_text_text_text.k, _out_s1445);
                                                _pac_sc_s1443 = _out_s1445;
                                              }
                                              else
                                              {
                                                int _out_s1447 = 0;
                                                PasswordManager@meta(_out_s1447);
                                                Object@Object _pac_sc_s1448 = null;
                                                if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1447)._int))/*Cipher.sk:172*/
                                                {
                                                  Object@Object _out_s1450 = null;
                                                  equals_Object@Object(self.k, text_text_text_text.k, _out_s1450);
                                                  _pac_sc_s1448 = _out_s1450;
                                                }
                                                else
                                                {
                                                  int _out_s1452 = 0;
                                                  Cipher@meta(_out_s1452);
                                                  Object@Object _pac_sc_s1453 = null;
                                                  if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1452)._int))/*Cipher.sk:172*/
                                                  {
                                                    Object@Object _out_s1455 = null;
                                                    equals_Object@Object(self.k, text_text_text_text.k, _out_s1455);
                                                    _pac_sc_s1453 = _out_s1455;
                                                  }
                                                  else
                                                  {
                                                    int _out_s1457 = 0;
                                                    PasswordManagerTest@meta(_out_s1457);
                                                    Object@Object _pac_sc_s1458 = null;
                                                    if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1457)._int))/*Cipher.sk:172*/
                                                    {
                                                      Object@Object _out_s1460 = null;
                                                      equals_Object@Object(self.k, text_text_text_text.k, _out_s1460);
                                                      _pac_sc_s1458 = _out_s1460;
                                                    }
                                                    else
                                                    {
                                                      int _out_s1462 = 0;
                                                      Object@meta(_out_s1462);
                                                      Object@Object _pac_sc_s1463 = null;
                                                      if((self.k.__cid) == (new Object@Object(__cid=-2, _int=_out_s1462)._int))/*Cipher.sk:172*/
                                                      {
                                                        Object@Object _out_s1465 = null;
                                                        equals_Object@Object(self.k, text_text_text_text.k, _out_s1465);
                                                        _pac_sc_s1463 = _out_s1465;
                                                      }
                                                      else
                                                      {
                                                        _pac_sc_s1463 = null;
                                                      }
                                                      _pac_sc_s1458 = _pac_sc_s1463;
                                                    }
                                                    _pac_sc_s1453 = _pac_sc_s1458;
                                                  }
                                                  _pac_sc_s1448 = _pac_sc_s1453;
                                                }
                                                _pac_sc_s1443 = _pac_sc_s1448;
                                              }
                                              _pac_sc_s1438 = _pac_sc_s1443;
                                            }
                                            _pac_sc_s1433 = _pac_sc_s1438;
                                          }
                                          _pac_sc_s1428 = _pac_sc_s1433;
                                        }
                                        _pac_sc_s1423 = _pac_sc_s1428;
                                      }
                                      _pac_sc_s1418 = _pac_sc_s1423;
                                    }
                                    _pac_sc_s1413 = _pac_sc_s1418;
                                  }
                                  _pac_sc_s1408 = _pac_sc_s1413;
                                }
                                _pac_sc_s1403 = _pac_sc_s1408;
                              }
                              _pac_sc_s1398 = _pac_sc_s1403;
                            }
                            _pac_sc_s1393 = _pac_sc_s1398;
                          }
                          _pac_sc_s1388 = _pac_sc_s1393;
                        }
                        _pac_sc_s1383 = _pac_sc_s1388;
                      }
                      _pac_sc_s1378 = _pac_sc_s1383;
                    }
                    _out = (_pac_sc_s1378._bit ? (((self.mode._int) == (new Object@Object(__cid=-2, _int=2)._int)) && ((text_text_text_text.mode._int) == (new Object@Object(__cid=-2, _int=1)._int)) ? text_text_text.text : null) : null);
                    return;
                  }
                  case Dofinalb_object:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:174 Assert at Cipher.sk:174 (1)
                  case Dofinal_object:
                    assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:166 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:175 Assert at Cipher.sk:175 (1)
                }
              }
              case Dofinal_object:
                assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:156 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:180 Assert at Cipher.sk:180 (1)
            }
          }
          case Cipher_string:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:185 Assert at Cipher.sk:185 (1)
          case Init_int_object_object:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:186 Assert at Cipher.sk:186 (1)
          case Initb_int_object_object:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:187 Assert at Cipher.sk:187 (1)
          case Dofinalb_object:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:188 Assert at Cipher.sk:188 (1)
          case Dofinal_object:
            assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:150 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:189 Assert at Cipher.sk:189 (1)
        }
      }
      case Dofinalb_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:194 Assert at Cipher.sk:194 (1)
      case Dofinal_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: Cipher.sk:141 ASSERTION CAN NOT BE SATISFIED: Cipher.sk:195 Assert at Cipher.sk:195 (1)
    }
    _out = null;
    return;
  }
  /* END PACKAGE Cipher*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE Key*/
package Key{
  /* END PACKAGE Key*/
}
[SKETCH] DONE
Total time = 66504
