package PasswordMap;

Object PasswordMap_PasswordMap(Object self) {
  self.passMap_PasswordMap = HashMap_HashMap();
  self.masterHash_PasswordMap = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=15+1), A="Secret Password")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=15));
  return self;
}

void add_String_String(Object self, Object tag, Object passEncryption) {
  (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? put_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null); self.passMap_PasswordMap = (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? putb_Object_Object_Object@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null);
}

void remove_String(Object self, Object tag) {
  if ((self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? containsKey_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null)._bit) (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? remove_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null); self.passMap_PasswordMap = (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? removeb_Object_Object@HashMap(self.passMap_PasswordMap, tag) : null);
}

Object get_String(Object self, Object domainHash) {
  return xform_get_HashMap_Object(self.passMap_PasswordMap._hashmap, domainHash);
  /* return (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_Object_Object@HashMap(self.passMap_PasswordMap, domainHash) : null); */
}

