package Cryptographer;

Object Cryptographer_Cryptographer(Object self) {
  Object random = SecureRandom_SecureRandom(new Object(__cid=SecureRandom()));
  Object randomKey = Wrap_Array_char(new Array_char(length=(new Object(__cid=-2, _int=16))));
  if (random.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int) { nextBytes_byte@SecureRandom(random, randomKey); }
  else { 0; };
  self.GCMSecretKey_Cryptographer = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), randomKey, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=3+1), A="AES")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=3)));
  self.randomIv_Cryptographer = Wrap_Array_char(new Array_char(length=(new Object(__cid=-2, _int=16))));
  if (random.__cid == (new Object(__cid=-2, _int=SecureRandom()))._int) { nextBytes_byte@SecureRandom(random, self.randomIv_Cryptographer); }
  else { 0; };
  self.ivParameterSpec_Cryptographer = IvParameterSpec_IvParameterSpec_byte(new Object(__cid=IvParameterSpec()), self.randomIv_Cryptographer);
  self.myCypherOut_Cryptographer = getInstance_String_String@Cipher(String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=17+1), A="AES/GCM/NoPadding")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=17)), String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=2+1), A="BC")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=2)));
  if (self.myCypherOut_Cryptographer.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, (new Object(__cid=-2, _int=2)), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer); }
  else { 0; };
  Object secret = String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=6+1), A="secret")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=6));
  self.sha256_HMAC_Cryptographer = getInstance_String@Mac(String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=10+1), A="HmacSHA256")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=10)));
  self.Hash_secret_key_Cryptographer = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), (secret.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(secret) : null), String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=10+1), A="HmacSHA256")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=10)));
  if (self.sha256_HMAC_Cryptographer.__cid == (new Object(__cid=-2, _int=Mac()))._int) { init_SecretKeySpec@Mac(self.sha256_HMAC_Cryptographer, self.Hash_secret_key_Cryptographer); }
  else { 0; };
  self.MAX_LENGTH_PASSWORD_Cryptographer = (new Object(__cid=-2, _int=16));
  return self;
}

Object hash_String(Object self, Object plainTxt) {
  return String_String_byte(new Object(__cid=String()), (self.sha256_HMAC_Cryptographer.__cid == (new Object(__cid=-2, _int=Mac()))._int ? doFinal_byte@Mac(self.sha256_HMAC_Cryptographer, (plainTxt.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(plainTxt) : null)) : null));
}

Object encrypt_String(Object self, Object plainText) {
  if (self.myCypherOut_Cryptographer.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, (new Object(__cid=-2, _int=1)), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer); }
  else { 0; };
  Object cipherText = (self.myCypherOut_Cryptographer.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_byte@Cipher(self.myCypherOut_Cryptographer, (plainText.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(plainText) : null)) : null);
  return String_String_byte(new Object(__cid=String()), cipherText);
}

Object decrypt_String(Object self, Object cipherText) {
  if (self.myCypherOut_Cryptographer.__cid == (new Object(__cid=-2, _int=Cipher()))._int) { init_int_SecretKey_IvParameterSpec@Cipher(self.myCypherOut_Cryptographer, (new Object(__cid=-2, _int=2)), self.GCMSecretKey_Cryptographer, self.ivParameterSpec_Cryptographer); }
  else { 0; };
  Object plainText = (self.myCypherOut_Cryptographer.__cid == (new Object(__cid=-2, _int=Cipher()))._int ? doFinal_byte@Cipher(self.myCypherOut_Cryptographer, (cipherText.__cid == (new Object(__cid=-2, _int=String()))._int ? getBytes@String(cipherText) : null)) : null);
  Object decryptText = String_String_byte(new Object(__cid=String()), plainText);
  return decryptText;
}

