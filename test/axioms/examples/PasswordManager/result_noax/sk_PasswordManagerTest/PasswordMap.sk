package PasswordMap;

Object PasswordMap_PasswordMap(Object self) {
  self.passMap_PasswordMap = HashMap_HashMap(new Object(__cid=HashMap()));
  Object c = Cryptographer_Cryptographer(new Object(__cid=Cryptographer()));
  self.masterHash_PasswordMap = (c.__cid == (new Object(__cid=-2, _int=Cryptographer()))._int ? hash_String@Cryptographer(c, String_String_char_int_int(new Object(__cid=String()), Wrap_Array_char(new Array_char(length=new Object(__cid=-2, _int=4+1), A="1234")), new Object(__cid=-2, _int=0), new Object(__cid=-2, _int=4))) : null);
  return self;
}

void add_String_String(Object self, Object tag, Object passEncryption) {
  (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? put_K_V@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null);
}

void remove_String(Object self, Object tag) {
  if ((self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? containsKey_K@HashMap(self.passMap_PasswordMap, tag) : null)._bit) (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? remove_K@HashMap(self.passMap_PasswordMap, tag) : null);
}

Object get_String(Object self, Object domainHash) {
  return (self.passMap_PasswordMap.__cid == (new Object(__cid=-2, _int=HashMap()))._int ? get_K@HashMap(self.passMap_PasswordMap, domainHash) : null);
}

