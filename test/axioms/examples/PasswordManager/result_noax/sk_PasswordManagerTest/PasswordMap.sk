package PasswordMap;

Object PasswordMap_PasswordMap(Object self) {
  self.passMap_PasswordMap = HashMap_HashMap(new Object(__cid=HashMap()));
  Object c = Cryptographer_Cryptographer(new Object(__cid=Cryptographer()));
  self.masterHash_PasswordMap = (c.__cid == Cryptographer() ? hash_String@Cryptographer(c, String_String_char_int_int(new Object(__cid=String()), new Array_char(length=4+1, A="1234"), 0, 4)) : null);
  return self;
}

void add_String_String(Object self, Object tag, Object passEncryption) {
  (self.passMap_PasswordMap.__cid == HashMap() ? put_K_V@HashMap(self.passMap_PasswordMap, tag, passEncryption) : null);
}

void remove_String(Object self, Object tag) {
  if ((self.passMap_PasswordMap.__cid == HashMap() ? containsKey_K@HashMap(self.passMap_PasswordMap, tag) : 0)) (self.passMap_PasswordMap.__cid == HashMap() ? remove_K@HashMap(self.passMap_PasswordMap, tag) : null);
}

Object get_String(Object self, Object domainHash) {
  return (self.passMap_PasswordMap.__cid == HashMap() ? get_K@HashMap(self.passMap_PasswordMap, domainHash) : null);
}

