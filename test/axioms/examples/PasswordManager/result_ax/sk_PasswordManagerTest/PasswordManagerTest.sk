package PasswordManagerTest;

Object PasswordManagerTest_PasswordManagerTest(Object self) {
    return self;
}

harness void main_int_int_int_int_int(int __u, int __w, int __x, int __y, int __z) {
  Object u = new Object(__cid=-2, _int=__u); 
  Object w = new Object(__cid=-2, _int=__w); 
  Object x = new Object(__cid=-2, _int=__x); 
  Object y = new Object(__cid=-2, _int=__y); 
  Object z = new Object(__cid=-2, _int=__z); 
Object self = Object_Object(new Object(__cid=Object()));
  Object limit = (new Object(__cid=-2, _int=10));
  assume u._int > (new Object(__cid=-2, _int=0))._int & u._int < limit._int;
  assume w._int > (new Object(__cid=-2, _int=0))._int & w._int < limit._int;
  assume x._int > (new Object(__cid=-2, _int=0))._int & x._int < limit._int;
  assume y._int > (new Object(__cid=-2, _int=0))._int & y._int < limit._int;
  assume z._int > (new Object(__cid=-2, _int=0))._int & z._int < limit._int;
  assume u._int != w._int && w._int != y._int && x._int != z._int;
  Object p1 = toString_int@Integer(u);
  Object p2 = toString_int@Integer(w);
  Object p3 = toString_int@Integer(x);
  Object p4 = toString_int@Integer(y);
  Object p5 = toString_int@Integer(z);
  Object pasman = PasswordManager_PasswordManager_String(new Object(__cid=PasswordManager()), p1);
  if (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int) { addPassword_String_String@PasswordManager(pasman, p2, p3); }
  else { 0; };
  if (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int) { addPassword_String_String@PasswordManager(pasman, p4, p5); }
  else { 0; };
  Object pass1 = (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int ? getPass_String@PasswordManager(pasman, p2) : null);
  assert (pass1.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(pass1, p3) : null)._bit;
  Object pass2 = (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int ? getPass_String@PasswordManager(pasman, p4) : null);
  assert (pass2.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(pass2, p5) : null)._bit;
  if (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int) { modifyPassword_String_String@PasswordManager(pasman, p2, p4); }
  else { 0; };
  Object pass3 = (pasman.__cid == (new Object(__cid=-2, _int=PasswordManager()))._int ? getPass_String@PasswordManager(pasman, p2) : null);
  assert (pass3.__cid == (new Object(__cid=-2, _int=String()))._int ? equals_Object@String(pass3, p4) : null)._bit;
}

