package BucketingTest;

Object BucketingTest_BucketingTest(Object self) {
    return self;
}

harness void mn_int_int_int(int x, int y, int z) {
  Object self = Object_Object(new Object(__cid=Object()));
  assume x != y && x != z && y != z;
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), x);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), y);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), z);
  setUp@BucketingTest(self);
  testClear_Integer_Integer@BucketingTest(self, xx, yy);
}

void setUp(Object self) {
  self.classUnderTest_BucketingTest = Bucketing_Bucketing(new Object(__cid=Bucketing()));
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_BucketingTest.__cid == Bucketing()) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == Bucketing()) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x); }
  else { 0; };
}

