package BucketingTest;

Object BucketingTest_BucketingTest(Object self) {
    return self;
}

harness void mn_int_int_int(int __x, int __y, int __z) {
  Object x = new Object(__cid=-2, _int=__x); 
  Object y = new Object(__cid=-2, _int=__y); 
  Object z = new Object(__cid=-2, _int=__z); 
Object self = Object_Object(new Object(__cid=Object()));
  assume x._int != y._int && x._int != z._int && y._int != z._int;
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), x);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), y);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), z);
  setUp@BucketingTest(self);
  testClear_Integer_Integer@BucketingTest(self, xx, yy);
  testGetEmpty@BucketingTest(self);
  testPutAndGet_Integer_Integer_Integer@BucketingTest(self, xx, yy, zz);
}

void setUp(Object self) {
  self.classUnderTest_BucketingTest = Bucketing_Bucketing(new Object(__cid=Bucketing()));
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x); }
  else { 0; };
  assertTrue_boolean@Assert((new Object(__cid=-4, _bit=(self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? size@Bucketing(self.classUnderTest_BucketingTest) : null)._int > (new Object(__cid=-2, _int=0))._int)));
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { clear@Bucketing(self.classUnderTest_BucketingTest); }
  else { 0; };
  assertFalse_boolean@Assert((new Object(__cid=-4, _bit=(self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? size@Bucketing(self.classUnderTest_BucketingTest) : null)._int > (new Object(__cid=-2, _int=0))._int)));
}

void testGetEmpty(Object self) {
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { clear@Bucketing(self.classUnderTest_BucketingTest); }
  else { 0; };
  assertNull_Object@Assert((self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? get_K@Bucketing(self.classUnderTest_BucketingTest, null) : null));
}

void testPutAndGet_Integer_Integer_Integer(Object self, Object x, Object y, Object z) {
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { clear@Bucketing(self.classUnderTest_BucketingTest); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, z, x); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? get_K@Bucketing(self.classUnderTest_BucketingTest, x) : null), y);
  assertEquals_Object_Object@Assert((self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? get_K@Bucketing(self.classUnderTest_BucketingTest, y) : null), x);
  assertEquals_Object_Object@Assert((self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? get_K@Bucketing(self.classUnderTest_BucketingTest, z) : null), x);
  Object add = (new Object(__cid=-2, _int=(x.__cid == (new Object(__cid=-2, _int=Integer()))._int ? intValue@Integer(x) : null)._int + (new Object(__cid=-2, _int=1))._int));
  Object i = Integer_Integer_int(new Object(__cid=Integer()), add);
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, i, y); }
  else { 0; };
  assertEquals_Object_Object@Assert((self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int ? get_K@Bucketing(self.classUnderTest_BucketingTest, i) : null), y);
}

