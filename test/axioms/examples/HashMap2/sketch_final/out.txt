SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/sk_BucketingTest/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:5: Making final Object._int
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 2
[SATBackend] MAX FUNC INLINING  = 1
estimated size of mn_int_int_int__Wrapper_BucketingTest
stmt cnt: 4
callee mn_int_int_int_BucketingTest : 93

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_BucketingTest
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 1 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/solution0-0 /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1521474570
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/input0.tmp
CREATING mn_int_int_int__Wrapper_BucketingTest
size = 4
after ba size = 4
CREATING mn_int_int_int__WrapperNospec_BucketingTest
size = 0
after ba size = 0
CREATING mn_int_int_int_BucketingTest
size = 341
after ba size = 341
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 35
after ba size = 35
CREATING Integer_meta
size = 3
after ba size = 3
CREATING Integer_Integer_int_Integer
size = 43
after ba size = 43
CREATING setUp_BucketingTest
size = 95
after ba size = 95
CREATING testClear_Integer_Integer_BucketingTest
size = 509
after ba size = 509
CREATING testGetEmpty_BucketingTest
size = 276
after ba size = 276
CREATING testPutAndGet_Integer_Integer_Integer_BucketingTest
size = 1121
after ba size = 1121
CREATING Bucketing_meta
size = 3
after ba size = 3
CREATING Bucketing_Bucketing_Bucketing
size = 185
after ba size = 185
CREATING put_K_V_Bucketing
Found Cycle of size 13; Breaking.
Found Cycle of size 22; Breaking.
size = 1596
after ba size = 1596
CREATING size_Bucketing
size = 42
after ba size = 42
CREATING assertTrue_boolean_Assert
size = 149
after ba size = 149
CREATING clear_Bucketing
size = 172
after ba size = 172
CREATING assertFalse_boolean_Assert
size = 182
after ba size = 182
CREATING get_K_Bucketing
Found Cycle of size 47; Breaking.
Found Cycle of size 55; Breaking.
Found Cycle of size 49; Breaking.
Found Cycle of size 26; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 59; Breaking.
Found Cycle of size 32; Breaking.
Found Cycle of size 38; Breaking.
Found Cycle of size 52; Breaking.
Found Cycle of size 19; Breaking.
size = 5444
after ba size = 5444
CREATING assertNull_Object_Assert
size = 72
after ba size = 72
CREATING assertEquals_Object_Object_Assert
size = 75
after ba size = 75
CREATING intValue_Integer
size = 42
after ba size = 42
CREATING Wrap_Array_Object_array
size = 45
after ba size = 45
CREATING ArrayList_ArrayList_ArrayList
size = 45
after ba size = 45
CREATING Wrap_Array_int_array
size = 45
after ba size = 45
CREATING delete_K_Bucketing
Found Cycle of size 18; Breaking.
Found Cycle of size 21; Breaking.
Found Cycle of size 23; Breaking.
Found Cycle of size 36; Breaking.
Found Cycle of size 41; Breaking.
Found Cycle of size 36; Breaking.
Found Cycle of size 63; Breaking.
Found Cycle of size 48; Breaking.
Found Cycle of size 18; Breaking.
Found Cycle of size 13; Breaking.
Found Cycle of size 50; Breaking.
size = 6022
after ba size = 6022
CREATING hashCode_Integer
size = 42
after ba size = 42
CREATING hashCode_Object
size = 42
after ba size = 42
CREATING BucketingTest_meta
size = 3
after ba size = 3
CREATING Pair_meta
size = 3
after ba size = 3
CREATING String_meta
size = 3
after ba size = 3
CREATING hashCode_String
Found Cycle of size 25; Breaking.
size = 668
after ba size = 668
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING Assert_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING Pair_Pair_K_V_Pair
size = 45
after ba size = 45
CREATING add_Object_Object_ArrayList
size = 51
after ba size = 51
CREATING addb_Object_Object_ArrayList
size = 52
after ba size = 52
CREATING rehashng_Bucketing
Found Cycle of size 12; Breaking.
Found Cycle of size 27; Breaking.
size = 2863
after ba size = 2863
CREATING Wrap_Array_char_array
size = 45
after ba size = 45
CREATING String_String_char_int_int_String
size = 321
after ba size = 321
CREATING assertTrue_String_boolean_Assert
size = 44
after ba size = 44
CREATING assertFalse_String_boolean_Assert
size = 51
after ba size = 51
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 98
after ba size = 98
CREATING equals_Object_Object
size = 43
after ba size = 43
CREATING equals_Object_String
Found Cycle of size 5; Breaking.
size = 354
after ba size = 354
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 98
after ba size = 98
CREATING xform_size_ArrayList_ArrayList
size = 495
after ba size = 495
CREATING xform_get_ArrayList_int_ArrayList
size = 651
after ba size = 651
CREATING assertNull_String_Object_Assert
size = 111
after ba size = 111
CREATING assertEquals_String_Object_Object_Assert
size = 948
after ba size = 948
CREATING Array_meta
size = 3
after ba size = 3
CREATING remove_Object_int_ArrayList
size = 52
after ba size = 52
CREATING removeb_Object_int_ArrayList
size = 52
after ba size = 52
CREATING charAt_int_String
size = 113
after ba size = 113
CREATING length_String
size = 42
after ba size = 42
CREATING charValue_Character
size = 42
after ba size = 42
CREATING failNotNull_String_Object_Assert
size = 51
after ba size = 51
* before  EVERYTHING: mn_int_int_int__WrapperNospec_BucketingTest::SPEC nodes = 0	 mn_int_int_int__Wrapper_BucketingTest::SKETCH nodes = 4
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 1
 Inlining functions in the sketch.
inlined 1 new size =249
inlined 18 new size =1635
Found Cycle of size 195; Breaking.
Found Cycle of size 226; Breaking.
Found Cycle of size 137; Breaking.
Found Cycle of size 54; Breaking.
Found Cycle of size 125; Breaking.
Found Cycle of size 48; Breaking.
Found Cycle of size 136; Breaking.
Found Cycle of size 109; Breaking.
Found Cycle of size 123; Breaking.
inlined 47 new size =34788
Found Cycle of size 44; Breaking.
Found Cycle of size 45; Breaking.
inlined 395 new size =81626
Found Cycle of size 188; Breaking.
Found Cycle of size 63; Breaking.
inlined 622 new size =74356
inlined 140 new size =77965
inlined 0 new size =77943
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 54059
* Final Problem size: Problem nodes = 53858
  # OF CONTROLS:    17
 control_ints = 13 	 control_bits = 4
inputSize = 0	ctrlSize = 71
Random seeds = 1
!+ 00110000100000100101000000100110011001001010010100000000010000000001110
!+ H__13:4
H__14:1
H__16:4
H__6:32
H__17:0
H__0:5
H__1:100
H__15:0
H__5:38
H__2:74
H__3:2
H__9:0
H__8:2
H__10:0
H__4:0
H__11:7
H__12:0

BEG CHECK
 * After optims it became = 2 was 53858
Assert at Bucketing.sk:139 (1)
Simulation found a cex by random testing:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 0.084
!% 
!% 
BEG FIND
Level 1  intsize = 2
 * After optims it became = 53858 was 53858
 * After all optims it became = 53858
 finder  hits = 207106	 bstoreObjs=449538	 sstorePages=668
hitcount 	0	370726	9
hitcount 	1	46683	9
hitcount 	2	3569	8
hitcount 	3	3768	5
hitcount 	4	9700	9
hitcount 	5	10454	9
hitcount 	6	45	7
hitcount 	7	2052	8
hitcount 	8	1367	9
hitcount 	9	143	1
hitcount 	10	31	7
hitcount 	11	150	1
hitcount 	12	146	2
hitcount 	13	134	8
hitcount 	14	132	9
hitcount 	15	9	1
hitcount 	16	86	7
hitcount 	17	13	6
hitcount 	18	4	1
hitcount 	19	129	1
hitcount 	20	15	12
hitcount 	21	1	0
hitcount 	22	5	2
hitcount 	23	135	1
hitcount 	28	4	5
hitcount 	29	1	0
hitcount 	33	4	5
hitcount 	34	2	15
hitcount 	35	1	2
hitcount 	45	1	0
hitcount 	47	2	1
hitcount 	50	2	3
hitcount 	67	4	2
hitcount 	101	2	2
hitcount 	109	2	1
hitcount 	135	2	0
hitcount 	219	2	0
hitcount 	497	2	9
hitcount 	558	1	5
hitcount 	565	1	10
hitcount 	574	1	10
hitcount 	581	1	7
hitcount 	592	1	7
hitcount 	599	1	6
hitcount 	615	2	13
hitcount 	625	1	6
hitcount 	632	1	16
bucketsPerDepth 	13	1
bucketsPerDepth 	14	3
bucketsPerDepth 	15	44
bucketsPerDepth 	16	122
bucketsPerDepth 	17	200
bucketsPerDepth 	18	232
bucketsPerDepth 	19	185
bucketsPerDepth 	20	100
bucketsPerDepth 	21	78
bucketsPerDepth 	22	33
bucketsPerDepth 	23	12
bucketsPerDepth 	24	9
bucketsPerDepth 	25	3
bucketsPerDepth 	26	1
bucketsPerDepth 	27	1
* TIME TO ADD INPUT :  5999.81 ms 
DECISIONS START = 0
f# %assign: 27 clauses: 1577413 learn: 36 restart: 1 decision: 3373 propagated: 3001494
END FIND
!+ 10101100001000000100000010111110111111110000001001100000101001101000110
!+ H__13:5
H__14:6
H__16:0
H__6:2
H__17:0
H__0:1
H__1:125
H__15:0
H__5:127
H__2:1
H__3:25
H__9:0
H__8:5
H__10:0
H__4:22
H__11:6
H__12:0

BEG CHECK
 * After optims it became = 0 was 53858
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  1	ftime= 10999.5	ctime= 0.088
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 10999.5 CHECK TIME 0.172 TOTAL TIME 10999.7
VALUES H__0: 1, H__1: 125, H__10: 0, H__11: 6, H__12: 0, H__13: 5, H__14: 6, H__15: 0, H__16: 0, H__17: 0, H__2: 1, H__3: 25, H__4: 22, H__5: 127, H__6: 2, H__8: 5, H__9: 0, 
RESULT = 2  
**ROUND 0 : 0 Round time:  11999.7 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  12000.6
Model building time (ms): 0.438
Solution time (ms):       11999.7
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 12.774
      model building time (s) ---------> 0.0
      solution time (s) ---------------> 11.999
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE HashTable*/
package HashTable{
  /* END PACKAGE HashTable*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:12*/
  
void charValue (Object self, ref Object _out)/*Character.sk:12*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:16*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Character.sk:16*/
  {
    int _out_s38 = 0;
    Character@meta(_out_s38);
    if((obj.__cid) == _out_s38)/*Character.sk:17*/
    {
      int _out_s40 = 0;
      Character@meta(_out_s40);
      Object@Object _pac_sc_s41 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s40)._int))/*Character.sk:18*/
      {
        Object@Object _out_s43 = null;
        charValue@Character(obj, _out_s43);
        _pac_sc_s41 = _out_s43;
      }
      else
      {
        _pac_sc_s41 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Character._char) == (_pac_sc_s41._char));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  struct ArrayList {
      @Immutable()
  }
  struct Arraylist extends ArrayList@ArrayList {
      @Immutable()
  }
  struct Add_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Addb_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Getb_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Setb_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Get_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Set_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Removeb_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Ensurecapacity_int extends ArrayList@ArrayList {
      ArrayList self;
      Object n;
      @Immutable()
  }
  struct Size extends ArrayList@ArrayList {
      ArrayList self;
      @Immutable()
  }
  struct Remove_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  /*ArrayList.sk:17*/
  
void ArrayList_ArrayList (ref Object _out)/*ArrayList.sk:17*/
  {
    int _out_s66 = 0;
    ArrayList@meta(_out_s66);
    _out = new Object@Object(__cid=_out_s66, _arraylist=new Arraylist());
    return;
  }
  /*ArrayList.sk:21*/
  
void add_Object_Object (Object self, Object e, ref Object _out)/*ArrayList.sk:21*/
  {
    int _out_s64 = 0;
    ArrayList@meta(_out_s64);
    _out = new Object@Object(__cid=_out_s64, _arraylist=new Add_object(self=self._arraylist, e=e));
    return;
  }
  /*ArrayList.sk:25*/
  
void addb_Object_Object (Object self, Object e, ref Object _out)/*ArrayList.sk:25*/
  {
    int _out_s62 = 0;
    ArrayList@meta(_out_s62);
    _out = new Object@Object(__cid=_out_s62, _arraylist=new Addb_object(self=self._arraylist, e=e));
    return;
  }
  /*ArrayList.sk:57*/
  
void remove_Object_int (Object self, Object i, ref Object _out)/*ArrayList.sk:57*/
  {
    int _out_s70 = 0;
    ArrayList@meta(_out_s70);
    _out = new Object@Object(__cid=_out_s70, _arraylist=new Remove_int(self=self._arraylist, i=i));
    return;
  }
  /*ArrayList.sk:45*/
  
void removeb_Object_int (Object self, Object i, ref Object _out)/*ArrayList.sk:45*/
  {
    int _out_s68 = 0;
    ArrayList@meta(_out_s68);
    _out = new Object@Object(__cid=_out_s68, _arraylist=new Removeb_int(self=self._arraylist, i=i));
    return;
  }
  /*ArrayList.sk:82*/
  
void xform_get_ArrayList_int (ArrayList self, Object i, ref Object _out)/*ArrayList.sk:82*/
  {
    switch(self){/*ArrayList.sk:83*/
      case Arraylist:
      {
        _out = null;
        return;
      }
      case Add_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:87 Assert at ArrayList.sk:87 (1)
      case Addb_object:
      {
        Object@Object _out_s45 = null;
        xform_size_ArrayList(self.self, _out_s45);
        Object@Object _pac_sc_s46 = null;
        if((_out_s45._int) == ((i._int) - (new Object@Object(__cid=-2, _int=1)._int)))/*ArrayList.sk:89*/
        {
          _pac_sc_s46 = self.e;
        }
        else
        {
          Object@Object _out_s48 = null;
          xform_get_ArrayList_int(self.self, i, _out_s48);
          _pac_sc_s46 = _out_s48;
        }
        _out = _pac_sc_s46;
        return;
      }
      case Getb_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:91 Assert at ArrayList.sk:91 (1)
      case Setb_int_object:
      {
        Object@Object _pac_sc_s49 = null;
        if((i._int) == (self.i._int))/*ArrayList.sk:93*/
        {
          _pac_sc_s49 = self.e;
        }
        else
        {
          Object@Object _out_s51 = null;
          xform_get_ArrayList_int(self.self, i, _out_s51);
          _pac_sc_s49 = _out_s51;
        }
        _out = _pac_sc_s49;
        return;
      }
      case Get_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:95 Assert at ArrayList.sk:95 (1)
      case Set_int_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:96 Assert at ArrayList.sk:96 (1)
      case Removeb_int:
      {
        Object@Object _pac_sc_s52 = null;
        if((i._int) == (self.i._int))/*ArrayList.sk:98*/
        {
          _pac_sc_s52 = null;
        }
        else
        {
          Object@Object _out_s54 = null;
          xform_get_ArrayList_int(self.self, i, _out_s54);
          _pac_sc_s52 = _out_s54;
        }
        _out = _pac_sc_s52;
        return;
      }
      case Ensurecapacity_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:100 Assert at ArrayList.sk:100 (1)
      case Size:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:101 Assert at ArrayList.sk:101 (1)
      case Remove_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:83 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:102 Assert at ArrayList.sk:102 (1)
    }
    _out = null;
    return;
  }
  /*ArrayList.sk:158*/
  
void xform_size_ArrayList (ArrayList self, ref Object _out)/*ArrayList.sk:158*/
  {
    switch(self){/*ArrayList.sk:159*/
      case Arraylist:
      {
        _out = new Object@Object(__cid=-2, _int=0);
        return;
      }
      case Add_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:163 Assert at ArrayList.sk:163 (1)
      case Addb_object:
      {
        Object@Object _out_s56 = null;
        xform_size_ArrayList(self.self, _out_s56);
        _out = new Object@Object(__cid=-2, _int=(_out_s56._int) + (new Object@Object(__cid=-2, _int=1)._int));
        return;
      }
      case Getb_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:167 Assert at ArrayList.sk:167 (1)
      case Setb_int_object:
      {
        Object@Object _out_s58 = null;
        xform_size_ArrayList(self.self, _out_s58);
        _out = _out_s58;
        return;
      }
      case Get_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:171 Assert at ArrayList.sk:171 (1)
      case Set_int_object:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:172 Assert at ArrayList.sk:172 (1)
      case Removeb_int:
      {
        Object@Object _out_s60 = null;
        xform_size_ArrayList(self.self, _out_s60);
        _out = new Object@Object(__cid=-2, _int=(_out_s60._int) - (new Object@Object(__cid=-2, _int=1)._int));
        return;
      }
      case Ensurecapacity_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:176 Assert at ArrayList.sk:176 (1)
      case Size:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:177 Assert at ArrayList.sk:177 (1)
      case Remove_int:
        assert (0); //ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:159 ASSERTION CAN NOT BE SATISFIED: ArrayList.sk:178 Assert at ArrayList.sk:178 (1)
    }
    _out = null;
    return;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE Bucketing*/
package Bucketing{
  /*Bucketing.sk:3*/
  
void Bucketing_Bucketing (Object self, ref Object _out)/*Bucketing.sk:3*/
  {
    self.size_Bucketing = new Object@Object(__cid=-2, _int=4);
    self.mod_Bucketing = new Object@Object(__cid=-2, _int=2);
    self.numberOfSlots_Bucketing = new Object@Object(__cid=-2, _int=2);
    Object@Object _out_s530 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s530);
    self.bucketHash_Bucketing = _out_s530;
    Object@Object _out_s532 = null;
    ArrayList_ArrayList@ArrayList(_out_s532);
    self.overflow_Bucketing = _out_s532;
    Object@Object _out_s534 = null;
    Wrap_Array_int@array(new Array_int@array(length=new Object@Object(__cid=-2, _int=2)), _out_s534);
    self.sizeBucket_Bucketing = _out_s534;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
    _out = self;
    return;
  }
  /*Bucketing.sk:190*/
  
void clear (Object self)/*Bucketing.sk:190*/
  {
    Object@Object _out_s524 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s524);
    self.bucketHash_Bucketing = _out_s524;
    Object@Object _out_s526 = null;
    ArrayList_ArrayList@ArrayList(_out_s526);
    self.overflow_Bucketing = _out_s526;
    Object@Object _out_s528 = null;
    Wrap_Array_int@array(new Array_int@array(length=new Object@Object(__cid=-2, _int=2)), _out_s528);
    self.sizeBucket_Bucketing = _out_s528;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
  }
  /*Bucketing.sk:126*/
  
void delete_K (Object self, Object key)/*Bucketing.sk:126*/
  {
    int _out_s356 = 0;
    Integer@meta(_out_s356);
    Object@Object _pac_sc_s357 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s356)._int))/*Bucketing.sk:127*/
    {
      Object@Object _out_s359 = null;
      hashCode@Integer(key, _out_s359);
      _pac_sc_s357 = _out_s359;
    }
    else
    {
      int _out_s361 = 0;
      Bucketing@meta(_out_s361);
      Object@Object _pac_sc_s362 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s361)._int))/*Bucketing.sk:127*/
      {
        Object@Object _out_s364 = null;
        hashCode@Object(key, _out_s364);
        _pac_sc_s362 = _out_s364;
      }
      else
      {
        int _out_s366 = 0;
        BucketingTest@meta(_out_s366);
        Object@Object _pac_sc_s367 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s366)._int))/*Bucketing.sk:127*/
        {
          Object@Object _out_s369 = null;
          hashCode@Object(key, _out_s369);
          _pac_sc_s367 = _out_s369;
        }
        else
        {
          int _out_s371 = 0;
          Pair@meta(_out_s371);
          Object@Object _pac_sc_s372 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s371)._int))/*Bucketing.sk:127*/
          {
            Object@Object _out_s374 = null;
            hashCode@Object(key, _out_s374);
            _pac_sc_s372 = _out_s374;
          }
          else
          {
            int _out_s376 = 0;
            String@meta(_out_s376);
            Object@Object _pac_sc_s377 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s376)._int))/*Bucketing.sk:127*/
            {
              Object@Object _out_s379 = null;
              hashCode@String(key, _out_s379);
              _pac_sc_s377 = _out_s379;
            }
            else
            {
              int _out_s381 = 0;
              Boolean@meta(_out_s381);
              Object@Object _pac_sc_s382 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s381)._int))/*Bucketing.sk:127*/
              {
                Object@Object _out_s384 = null;
                hashCode@Object(key, _out_s384);
                _pac_sc_s382 = _out_s384;
              }
              else
              {
                int _out_s386 = 0;
                ArrayList@meta(_out_s386);
                Object@Object _pac_sc_s387 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s386)._int))/*Bucketing.sk:127*/
                {
                  Object@Object _out_s389 = null;
                  hashCode@Object(key, _out_s389);
                  _pac_sc_s387 = _out_s389;
                }
                else
                {
                  int _out_s391 = 0;
                  Assert@meta(_out_s391);
                  Object@Object _pac_sc_s392 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s391)._int))/*Bucketing.sk:127*/
                  {
                    Object@Object _out_s394 = null;
                    hashCode@Object(key, _out_s394);
                    _pac_sc_s392 = _out_s394;
                  }
                  else
                  {
                    int _out_s396 = 0;
                    Character@meta(_out_s396);
                    Object@Object _pac_sc_s397 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s396)._int))/*Bucketing.sk:127*/
                    {
                      Object@Object _out_s399 = null;
                      hashCode@Object(key, _out_s399);
                      _pac_sc_s397 = _out_s399;
                    }
                    else
                    {
                      int _out_s401 = 0;
                      Object@meta(_out_s401);
                      Object@Object _pac_sc_s402 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s401)._int))/*Bucketing.sk:127*/
                      {
                        Object@Object _out_s404 = null;
                        hashCode@Object(key, _out_s404);
                        _pac_sc_s402 = _out_s404;
                      }
                      else
                      {
                        _pac_sc_s402 = null;
                      }
                      _pac_sc_s397 = _pac_sc_s402;
                    }
                    _pac_sc_s392 = _pac_sc_s397;
                  }
                  _pac_sc_s387 = _pac_sc_s392;
                }
                _pac_sc_s382 = _pac_sc_s387;
              }
              _pac_sc_s377 = _pac_sc_s382;
            }
            _pac_sc_s372 = _pac_sc_s377;
          }
          _pac_sc_s367 = _pac_sc_s372;
        }
        _pac_sc_s362 = _pac_sc_s367;
      }
      _pac_sc_s357 = _pac_sc_s362;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s357._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=0)._int))/*Bucketing.sk:128*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (-(new Object@Object(__cid=-2, _int=1)._int)));
    }
    self.index_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int));
    Object@Object flag = new Object@Object(__cid=-4, _bit=0);
    Object@Object g3 = self.index_Bucketing;
    Object@Object add = new Object@Object(__cid=-2, _int=(self.index_Bucketing._int) + (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]));
    Object@Object i = g3;
    bit __sa6 = (g3._int) < (add._int);
    while(__sa6)
    {
      Object@Object tmp = self.bucketHash_Bucketing._array_object.A[i._int];
      Object@Object tmp_key = tmp.key_Pair;
      int b_s406 = 0;
      Integer@meta(b_s406);
      Object@Object _pac_sc_s407 = null;
      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s406)._int))/*Bucketing.sk:140*/
      {
        Object@Object b_s409 = null;
        equals_Object@Integer(tmp_key, key, b_s409);
        _pac_sc_s407 = b_s409;
      }
      else
      {
        int b_s411 = 0;
        Bucketing@meta(b_s411);
        Object@Object _pac_sc_s412 = null;
        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s411)._int))/*Bucketing.sk:140*/
        {
          Object@Object b_s414 = null;
          equals_Object@Object(tmp_key, key, b_s414);
          _pac_sc_s412 = b_s414;
        }
        else
        {
          int b_s416 = 0;
          BucketingTest@meta(b_s416);
          Object@Object _pac_sc_s417 = null;
          if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s416)._int))/*Bucketing.sk:140*/
          {
            Object@Object b_s419 = null;
            equals_Object@Object(tmp_key, key, b_s419);
            _pac_sc_s417 = b_s419;
          }
          else
          {
            int b_s421 = 0;
            Pair@meta(b_s421);
            Object@Object _pac_sc_s422 = null;
            if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s421)._int))/*Bucketing.sk:140*/
            {
              Object@Object b_s424 = null;
              equals_Object@Object(tmp_key, key, b_s424);
              _pac_sc_s422 = b_s424;
            }
            else
            {
              int b_s426 = 0;
              String@meta(b_s426);
              Object@Object _pac_sc_s427 = null;
              if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s426)._int))/*Bucketing.sk:140*/
              {
                Object@Object b_s429 = null;
                equals_Object@String(tmp_key, key, b_s429);
                _pac_sc_s427 = b_s429;
              }
              else
              {
                int b_s431 = 0;
                Boolean@meta(b_s431);
                Object@Object _pac_sc_s432 = null;
                if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s431)._int))/*Bucketing.sk:140*/
                {
                  Object@Object b_s434 = null;
                  equals_Object@Object(tmp_key, key, b_s434);
                  _pac_sc_s432 = b_s434;
                }
                else
                {
                  int b_s436 = 0;
                  ArrayList@meta(b_s436);
                  Object@Object _pac_sc_s437 = null;
                  if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s436)._int))/*Bucketing.sk:140*/
                  {
                    Object@Object b_s439 = null;
                    equals_Object@Object(tmp_key, key, b_s439);
                    _pac_sc_s437 = b_s439;
                  }
                  else
                  {
                    int b_s441 = 0;
                    Assert@meta(b_s441);
                    Object@Object _pac_sc_s442 = null;
                    if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s441)._int))/*Bucketing.sk:140*/
                    {
                      Object@Object b_s444 = null;
                      equals_Object@Object(tmp_key, key, b_s444);
                      _pac_sc_s442 = b_s444;
                    }
                    else
                    {
                      int b_s446 = 0;
                      Character@meta(b_s446);
                      Object@Object _pac_sc_s447 = null;
                      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s446)._int))/*Bucketing.sk:140*/
                      {
                        Object@Object b_s449 = null;
                        equals_Object@Character(tmp_key, key, b_s449);
                        _pac_sc_s447 = b_s449;
                      }
                      else
                      {
                        int b_s451 = 0;
                        Object@meta(b_s451);
                        Object@Object _pac_sc_s452 = null;
                        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s451)._int))/*Bucketing.sk:140*/
                        {
                          Object@Object b_s454 = null;
                          equals_Object@Object(tmp_key, key, b_s454);
                          _pac_sc_s452 = b_s454;
                        }
                        else
                        {
                          _pac_sc_s452 = null;
                        }
                        _pac_sc_s447 = _pac_sc_s452;
                      }
                      _pac_sc_s442 = _pac_sc_s447;
                    }
                    _pac_sc_s437 = _pac_sc_s442;
                  }
                  _pac_sc_s432 = _pac_sc_s437;
                }
                _pac_sc_s427 = _pac_sc_s432;
              }
              _pac_sc_s422 = _pac_sc_s427;
            }
            _pac_sc_s417 = _pac_sc_s422;
          }
          _pac_sc_s412 = _pac_sc_s417;
        }
        _pac_sc_s407 = _pac_sc_s412;
      }
      if(_pac_sc_s407._bit)/*Bucketing.sk:141*/
      {
        flag = new Object@Object(__cid=-4, _bit=1);
      }
      else
      {
        if(flag._bit)/*Bucketing.sk:145*/
        {
          int _out_s456 = 0;
          Pair@meta(_out_s456);
          Object@Object _out_s458 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s456), self.bucketHash_Bucketing._array_object.A[i._int].key_Pair, self.bucketHash_Bucketing._array_object.A[i._int].value_Pair, _out_s458)//{};
          self.bucketHash_Bucketing._array_object.A[(i._int) - (new Object@Object(__cid=-2, _int=127)._int)] = _out_s458;
        }
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa6 = (i._int) < (add._int);
    }
    if(flag._bit)/*Bucketing.sk:150*/
    {
      self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) - 1);
      self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int] = (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) - 1;
    }
    else
    {
      if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) == (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:154*/
      {
        Object@Object sz_s460 = null;
        xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s460);
        Object@Object g5 = self.size_Bucketing;
        Object@Object i_0 = new Object@Object(__cid=-2, _int=2);
        bit __sa7 = (i_0._int) < (g5._int);
        while(__sa7)
        {
          Object@Object tmp_s462 = null;
          xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s462);
          Object@Object tmp_key_0 = tmp_s462.key_Pair;
          int b_s464 = 0;
          Integer@meta(b_s464);
          Object@Object _pac_sc_s465 = null;
          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s464)._int))/*Bucketing.sk:163*/
          {
            Object@Object b_s467 = null;
            equals_Object@Integer(tmp_key_0, key, b_s467);
            _pac_sc_s465 = b_s467;
          }
          else
          {
            int b_s469 = 0;
            Bucketing@meta(b_s469);
            Object@Object _pac_sc_s470 = null;
            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s469)._int))/*Bucketing.sk:163*/
            {
              Object@Object b_s472 = null;
              equals_Object@Object(tmp_key_0, key, b_s472);
              _pac_sc_s470 = b_s472;
            }
            else
            {
              int b_s474 = 0;
              BucketingTest@meta(b_s474);
              Object@Object _pac_sc_s475 = null;
              if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s474)._int))/*Bucketing.sk:163*/
              {
                Object@Object b_s477 = null;
                equals_Object@Object(tmp_key_0, key, b_s477);
                _pac_sc_s475 = b_s477;
              }
              else
              {
                int b_s479 = 0;
                Pair@meta(b_s479);
                Object@Object _pac_sc_s480 = null;
                if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s479)._int))/*Bucketing.sk:163*/
                {
                  Object@Object b_s482 = null;
                  equals_Object@Object(tmp_key_0, key, b_s482);
                  _pac_sc_s480 = b_s482;
                }
                else
                {
                  int b_s484 = 0;
                  String@meta(b_s484);
                  Object@Object _pac_sc_s485 = null;
                  if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s484)._int))/*Bucketing.sk:163*/
                  {
                    Object@Object b_s487 = null;
                    equals_Object@String(tmp_key_0, key, b_s487);
                    _pac_sc_s485 = b_s487;
                  }
                  else
                  {
                    int b_s489 = 0;
                    Boolean@meta(b_s489);
                    Object@Object _pac_sc_s490 = null;
                    if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s489)._int))/*Bucketing.sk:163*/
                    {
                      Object@Object b_s492 = null;
                      equals_Object@Object(tmp_key_0, key, b_s492);
                      _pac_sc_s490 = b_s492;
                    }
                    else
                    {
                      int b_s494 = 0;
                      ArrayList@meta(b_s494);
                      Object@Object _pac_sc_s495 = null;
                      if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s494)._int))/*Bucketing.sk:163*/
                      {
                        Object@Object b_s497 = null;
                        equals_Object@Object(tmp_key_0, key, b_s497);
                        _pac_sc_s495 = b_s497;
                      }
                      else
                      {
                        int b_s499 = 0;
                        Assert@meta(b_s499);
                        Object@Object _pac_sc_s500 = null;
                        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s499)._int))/*Bucketing.sk:163*/
                        {
                          Object@Object b_s502 = null;
                          equals_Object@Object(tmp_key_0, key, b_s502);
                          _pac_sc_s500 = b_s502;
                        }
                        else
                        {
                          int b_s504 = 0;
                          Character@meta(b_s504);
                          Object@Object _pac_sc_s505 = null;
                          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s504)._int))/*Bucketing.sk:163*/
                          {
                            Object@Object b_s507 = null;
                            equals_Object@Character(tmp_key_0, key, b_s507);
                            _pac_sc_s505 = b_s507;
                          }
                          else
                          {
                            int b_s509 = 0;
                            Object@meta(b_s509);
                            Object@Object _pac_sc_s510 = null;
                            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s509)._int))/*Bucketing.sk:163*/
                            {
                              Object@Object b_s512 = null;
                              equals_Object@Object(tmp_key_0, key, b_s512);
                              _pac_sc_s510 = b_s512;
                            }
                            else
                            {
                              _pac_sc_s510 = null;
                            }
                            _pac_sc_s505 = _pac_sc_s510;
                          }
                          _pac_sc_s500 = _pac_sc_s505;
                        }
                        _pac_sc_s495 = _pac_sc_s500;
                      }
                      _pac_sc_s490 = _pac_sc_s495;
                    }
                    _pac_sc_s485 = _pac_sc_s490;
                  }
                  _pac_sc_s480 = _pac_sc_s485;
                }
                _pac_sc_s475 = _pac_sc_s480;
              }
              _pac_sc_s470 = _pac_sc_s475;
            }
            _pac_sc_s465 = _pac_sc_s470;
          }
          if(_pac_sc_s465._bit)/*Bucketing.sk:164*/
          {
            int _out_s514 = 0;
            ArrayList@meta(_out_s514);
            if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s514)._int))/*Bucketing.sk:166*/
            {
              Object@Object _out_s517 = null;
              remove_Object_int@ArrayList(self.overflow_Bucketing, i_0, _out_s517);
            }
            int _out_s519 = 0;
            ArrayList@meta(_out_s519);
            Object@Object _pac_sc_s520 = null;
            if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s519)._int))/*Bucketing.sk:166*/
            {
              Object@Object _out_s522 = null;
              removeb_Object_int@ArrayList(self.overflow_Bucketing, i_0, _out_s522);
              _pac_sc_s520 = _out_s522;
            }
            else
            {
              _pac_sc_s520 = null;
            }
            self.overflow_Bucketing = _pac_sc_s520;
            self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) - 1);
            return;
          }
          i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
          __sa7 = (i_0._int) < (g5._int);
        }
      }
    }
  }
  /*Bucketing.sk:85*/
  
void get_K (Object self, Object key, ref Object _out)/*Bucketing.sk:85*/
  {
    if(key == (null))/*Bucketing.sk:86*/
    {
      _out = null;
      return;
    }
    int _out_s88 = 0;
    Integer@meta(_out_s88);
    Object@Object _pac_sc_s89 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s88)._int))/*Bucketing.sk:87*/
    {
      Object@Object _out_s91 = null;
      hashCode@Integer(key, _out_s91);
      _pac_sc_s89 = _out_s91;
    }
    else
    {
      int _out_s93 = 0;
      Bucketing@meta(_out_s93);
      Object@Object _pac_sc_s94 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s93)._int))/*Bucketing.sk:87*/
      {
        Object@Object _out_s96 = null;
        hashCode@Object(key, _out_s96);
        _pac_sc_s94 = _out_s96;
      }
      else
      {
        int _out_s98 = 0;
        BucketingTest@meta(_out_s98);
        Object@Object _pac_sc_s99 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s98)._int))/*Bucketing.sk:87*/
        {
          Object@Object _out_s101 = null;
          hashCode@Object(key, _out_s101);
          _pac_sc_s99 = _out_s101;
        }
        else
        {
          int _out_s103 = 0;
          Pair@meta(_out_s103);
          Object@Object _pac_sc_s104 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s103)._int))/*Bucketing.sk:87*/
          {
            Object@Object _out_s106 = null;
            hashCode@Object(key, _out_s106);
            _pac_sc_s104 = _out_s106;
          }
          else
          {
            int _out_s108 = 0;
            String@meta(_out_s108);
            Object@Object _pac_sc_s109 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s108)._int))/*Bucketing.sk:87*/
            {
              Object@Object _out_s111 = null;
              hashCode@String(key, _out_s111);
              _pac_sc_s109 = _out_s111;
            }
            else
            {
              int _out_s113 = 0;
              Boolean@meta(_out_s113);
              Object@Object _pac_sc_s114 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s113)._int))/*Bucketing.sk:87*/
              {
                Object@Object _out_s116 = null;
                hashCode@Object(key, _out_s116);
                _pac_sc_s114 = _out_s116;
              }
              else
              {
                int _out_s118 = 0;
                ArrayList@meta(_out_s118);
                Object@Object _pac_sc_s119 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s118)._int))/*Bucketing.sk:87*/
                {
                  Object@Object _out_s121 = null;
                  hashCode@Object(key, _out_s121);
                  _pac_sc_s119 = _out_s121;
                }
                else
                {
                  int _out_s123 = 0;
                  Assert@meta(_out_s123);
                  Object@Object _pac_sc_s124 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s123)._int))/*Bucketing.sk:87*/
                  {
                    Object@Object _out_s126 = null;
                    hashCode@Object(key, _out_s126);
                    _pac_sc_s124 = _out_s126;
                  }
                  else
                  {
                    int _out_s128 = 0;
                    Character@meta(_out_s128);
                    Object@Object _pac_sc_s129 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s128)._int))/*Bucketing.sk:87*/
                    {
                      Object@Object _out_s131 = null;
                      hashCode@Object(key, _out_s131);
                      _pac_sc_s129 = _out_s131;
                    }
                    else
                    {
                      int _out_s133 = 0;
                      Object@meta(_out_s133);
                      Object@Object _pac_sc_s134 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s133)._int))/*Bucketing.sk:87*/
                      {
                        Object@Object _out_s136 = null;
                        hashCode@Object(key, _out_s136);
                        _pac_sc_s134 = _out_s136;
                      }
                      else
                      {
                        _pac_sc_s134 = null;
                      }
                      _pac_sc_s129 = _pac_sc_s134;
                    }
                    _pac_sc_s124 = _pac_sc_s129;
                  }
                  _pac_sc_s119 = _pac_sc_s124;
                }
                _pac_sc_s114 = _pac_sc_s119;
              }
              _pac_sc_s109 = _pac_sc_s114;
            }
            _pac_sc_s104 = _pac_sc_s109;
          }
          _pac_sc_s99 = _pac_sc_s104;
        }
        _pac_sc_s94 = _pac_sc_s99;
      }
      _pac_sc_s89 = _pac_sc_s94;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s89._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=1)._int))/*Bucketing.sk:88*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (new Object@Object(__cid=-2, _int=25)._int));
    }
    self.index_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int));
    Object@Object g3 = self.index_Bucketing;
    Object@Object g4 = self.size_Bucketing;
    Object@Object i = g3;
    bit __sa4 = (g3._int) < (g4._int);
    while(__sa4)
    {
      Object@Object tmp = self.bucketHash_Bucketing._array_object.A[i._int];
      Object@Object tmp_key = tmp.key_Pair;
      int b_s138 = 0;
      Integer@meta(b_s138);
      Object@Object _pac_sc_s139 = null;
      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s138)._int))/*Bucketing.sk:101*/
      {
        Object@Object b_s141 = null;
        equals_Object@Integer(tmp_key, key, b_s141);
        _pac_sc_s139 = b_s141;
      }
      else
      {
        int b_s143 = 0;
        Bucketing@meta(b_s143);
        Object@Object _pac_sc_s144 = null;
        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s143)._int))/*Bucketing.sk:101*/
        {
          Object@Object b_s146 = null;
          equals_Object@Object(tmp_key, key, b_s146);
          _pac_sc_s144 = b_s146;
        }
        else
        {
          int b_s148 = 0;
          BucketingTest@meta(b_s148);
          Object@Object _pac_sc_s149 = null;
          if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s148)._int))/*Bucketing.sk:101*/
          {
            Object@Object b_s151 = null;
            equals_Object@Object(tmp_key, key, b_s151);
            _pac_sc_s149 = b_s151;
          }
          else
          {
            int b_s153 = 0;
            Pair@meta(b_s153);
            Object@Object _pac_sc_s154 = null;
            if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s153)._int))/*Bucketing.sk:101*/
            {
              Object@Object b_s156 = null;
              equals_Object@Object(tmp_key, key, b_s156);
              _pac_sc_s154 = b_s156;
            }
            else
            {
              int b_s158 = 0;
              String@meta(b_s158);
              Object@Object _pac_sc_s159 = null;
              if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s158)._int))/*Bucketing.sk:101*/
              {
                Object@Object b_s161 = null;
                equals_Object@String(tmp_key, key, b_s161);
                _pac_sc_s159 = b_s161;
              }
              else
              {
                int b_s163 = 0;
                Boolean@meta(b_s163);
                Object@Object _pac_sc_s164 = null;
                if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s163)._int))/*Bucketing.sk:101*/
                {
                  Object@Object b_s166 = null;
                  equals_Object@Object(tmp_key, key, b_s166);
                  _pac_sc_s164 = b_s166;
                }
                else
                {
                  int b_s168 = 0;
                  ArrayList@meta(b_s168);
                  Object@Object _pac_sc_s169 = null;
                  if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s168)._int))/*Bucketing.sk:101*/
                  {
                    Object@Object b_s171 = null;
                    equals_Object@Object(tmp_key, key, b_s171);
                    _pac_sc_s169 = b_s171;
                  }
                  else
                  {
                    int b_s173 = 0;
                    Assert@meta(b_s173);
                    Object@Object _pac_sc_s174 = null;
                    if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s173)._int))/*Bucketing.sk:101*/
                    {
                      Object@Object b_s176 = null;
                      equals_Object@Object(tmp_key, key, b_s176);
                      _pac_sc_s174 = b_s176;
                    }
                    else
                    {
                      int b_s178 = 0;
                      Character@meta(b_s178);
                      Object@Object _pac_sc_s179 = null;
                      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s178)._int))/*Bucketing.sk:101*/
                      {
                        Object@Object b_s181 = null;
                        equals_Object@Character(tmp_key, key, b_s181);
                        _pac_sc_s179 = b_s181;
                      }
                      else
                      {
                        int b_s183 = 0;
                        Object@meta(b_s183);
                        Object@Object _pac_sc_s184 = null;
                        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s183)._int))/*Bucketing.sk:101*/
                        {
                          Object@Object b_s186 = null;
                          equals_Object@Object(tmp_key, key, b_s186);
                          _pac_sc_s184 = b_s186;
                        }
                        else
                        {
                          _pac_sc_s184 = null;
                        }
                        _pac_sc_s179 = _pac_sc_s184;
                      }
                      _pac_sc_s174 = _pac_sc_s179;
                    }
                    _pac_sc_s169 = _pac_sc_s174;
                  }
                  _pac_sc_s164 = _pac_sc_s169;
                }
                _pac_sc_s159 = _pac_sc_s164;
              }
              _pac_sc_s154 = _pac_sc_s159;
            }
            _pac_sc_s149 = _pac_sc_s154;
          }
          _pac_sc_s144 = _pac_sc_s149;
        }
        _pac_sc_s139 = _pac_sc_s144;
      }
      if(_pac_sc_s139._bit)/*Bucketing.sk:102*/
      {
        _out = tmp.value_Pair;
        return;
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa4 = (i._int) < (g4._int);
    }
    if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) == (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:107*/
    {
      Object@Object sz_s188 = null;
      xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s188);
      Object@Object i_0 = new Object@Object(__cid=-2, _int=22);
      bit __sa5 = (i_0._int) < (sz_s188._int);
      while(__sa5)
      {
        Object@Object tmp_s190 = null;
        xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s190);
        Object@Object tmp_key_0 = tmp_s190.key_Pair;
        int b_s192 = 0;
        Integer@meta(b_s192);
        Object@Object _pac_sc_s193 = null;
        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s192)._int))/*Bucketing.sk:116*/
        {
          Object@Object b_s195 = null;
          equals_Object@Integer(tmp_key_0, key, b_s195);
          _pac_sc_s193 = b_s195;
        }
        else
        {
          int b_s197 = 0;
          Bucketing@meta(b_s197);
          Object@Object _pac_sc_s198 = null;
          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s197)._int))/*Bucketing.sk:116*/
          {
            Object@Object b_s200 = null;
            equals_Object@Object(tmp_key_0, key, b_s200);
            _pac_sc_s198 = b_s200;
          }
          else
          {
            int b_s202 = 0;
            BucketingTest@meta(b_s202);
            Object@Object _pac_sc_s203 = null;
            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s202)._int))/*Bucketing.sk:116*/
            {
              Object@Object b_s205 = null;
              equals_Object@Object(tmp_key_0, key, b_s205);
              _pac_sc_s203 = b_s205;
            }
            else
            {
              int b_s207 = 0;
              Pair@meta(b_s207);
              Object@Object _pac_sc_s208 = null;
              if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s207)._int))/*Bucketing.sk:116*/
              {
                Object@Object b_s210 = null;
                equals_Object@Object(tmp_key_0, key, b_s210);
                _pac_sc_s208 = b_s210;
              }
              else
              {
                int b_s212 = 0;
                String@meta(b_s212);
                Object@Object _pac_sc_s213 = null;
                if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s212)._int))/*Bucketing.sk:116*/
                {
                  Object@Object b_s215 = null;
                  equals_Object@String(tmp_key_0, key, b_s215);
                  _pac_sc_s213 = b_s215;
                }
                else
                {
                  int b_s217 = 0;
                  Boolean@meta(b_s217);
                  Object@Object _pac_sc_s218 = null;
                  if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s217)._int))/*Bucketing.sk:116*/
                  {
                    Object@Object b_s220 = null;
                    equals_Object@Object(tmp_key_0, key, b_s220);
                    _pac_sc_s218 = b_s220;
                  }
                  else
                  {
                    int b_s222 = 0;
                    ArrayList@meta(b_s222);
                    Object@Object _pac_sc_s223 = null;
                    if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s222)._int))/*Bucketing.sk:116*/
                    {
                      Object@Object b_s225 = null;
                      equals_Object@Object(tmp_key_0, key, b_s225);
                      _pac_sc_s223 = b_s225;
                    }
                    else
                    {
                      int b_s227 = 0;
                      Assert@meta(b_s227);
                      Object@Object _pac_sc_s228 = null;
                      if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s227)._int))/*Bucketing.sk:116*/
                      {
                        Object@Object b_s230 = null;
                        equals_Object@Object(tmp_key_0, key, b_s230);
                        _pac_sc_s228 = b_s230;
                      }
                      else
                      {
                        int b_s232 = 0;
                        Character@meta(b_s232);
                        Object@Object _pac_sc_s233 = null;
                        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s232)._int))/*Bucketing.sk:116*/
                        {
                          Object@Object b_s235 = null;
                          equals_Object@Character(tmp_key_0, key, b_s235);
                          _pac_sc_s233 = b_s235;
                        }
                        else
                        {
                          int b_s237 = 0;
                          Object@meta(b_s237);
                          Object@Object _pac_sc_s238 = null;
                          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s237)._int))/*Bucketing.sk:116*/
                          {
                            Object@Object b_s240 = null;
                            equals_Object@Object(tmp_key_0, key, b_s240);
                            _pac_sc_s238 = b_s240;
                          }
                          else
                          {
                            _pac_sc_s238 = null;
                          }
                          _pac_sc_s233 = _pac_sc_s238;
                        }
                        _pac_sc_s228 = _pac_sc_s233;
                      }
                      _pac_sc_s223 = _pac_sc_s228;
                    }
                    _pac_sc_s218 = _pac_sc_s223;
                  }
                  _pac_sc_s213 = _pac_sc_s218;
                }
                _pac_sc_s208 = _pac_sc_s213;
              }
              _pac_sc_s203 = _pac_sc_s208;
            }
            _pac_sc_s198 = _pac_sc_s203;
          }
          _pac_sc_s193 = _pac_sc_s198;
        }
        if(_pac_sc_s193._bit)/*Bucketing.sk:117*/
        {
          _out = tmp_s190.value_Pair;
          return;
        }
        i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
        __sa5 = (i_0._int) < (sz_s188._int);
      }
    }
    _out = null;
    return;
  }
  /*Bucketing.sk:64*/
  
void put_K_V (Object self, Object key, Object value)/*Bucketing.sk:64*/
  {
    delete_K@Bucketing(self, key);
    int _out_s242 = 0;
    Integer@meta(_out_s242);
    Object@Object _pac_sc_s243 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s242)._int))/*Bucketing.sk:66*/
    {
      Object@Object _out_s245 = null;
      hashCode@Integer(key, _out_s245);
      _pac_sc_s243 = _out_s245;
    }
    else
    {
      int _out_s247 = 0;
      Bucketing@meta(_out_s247);
      Object@Object _pac_sc_s248 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s247)._int))/*Bucketing.sk:66*/
      {
        Object@Object _out_s250 = null;
        hashCode@Object(key, _out_s250);
        _pac_sc_s248 = _out_s250;
      }
      else
      {
        int _out_s252 = 0;
        BucketingTest@meta(_out_s252);
        Object@Object _pac_sc_s253 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s252)._int))/*Bucketing.sk:66*/
        {
          Object@Object _out_s255 = null;
          hashCode@Object(key, _out_s255);
          _pac_sc_s253 = _out_s255;
        }
        else
        {
          int _out_s257 = 0;
          Pair@meta(_out_s257);
          Object@Object _pac_sc_s258 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s257)._int))/*Bucketing.sk:66*/
          {
            Object@Object _out_s260 = null;
            hashCode@Object(key, _out_s260);
            _pac_sc_s258 = _out_s260;
          }
          else
          {
            int _out_s262 = 0;
            String@meta(_out_s262);
            Object@Object _pac_sc_s263 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s262)._int))/*Bucketing.sk:66*/
            {
              Object@Object _out_s265 = null;
              hashCode@String(key, _out_s265);
              _pac_sc_s263 = _out_s265;
            }
            else
            {
              int _out_s267 = 0;
              Boolean@meta(_out_s267);
              Object@Object _pac_sc_s268 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s267)._int))/*Bucketing.sk:66*/
              {
                Object@Object _out_s270 = null;
                hashCode@Object(key, _out_s270);
                _pac_sc_s268 = _out_s270;
              }
              else
              {
                int _out_s272 = 0;
                ArrayList@meta(_out_s272);
                Object@Object _pac_sc_s273 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s272)._int))/*Bucketing.sk:66*/
                {
                  Object@Object _out_s275 = null;
                  hashCode@Object(key, _out_s275);
                  _pac_sc_s273 = _out_s275;
                }
                else
                {
                  int _out_s277 = 0;
                  Assert@meta(_out_s277);
                  Object@Object _pac_sc_s278 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s277)._int))/*Bucketing.sk:66*/
                  {
                    Object@Object _out_s280 = null;
                    hashCode@Object(key, _out_s280);
                    _pac_sc_s278 = _out_s280;
                  }
                  else
                  {
                    int _out_s282 = 0;
                    Character@meta(_out_s282);
                    Object@Object _pac_sc_s283 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s282)._int))/*Bucketing.sk:66*/
                    {
                      Object@Object _out_s285 = null;
                      hashCode@Object(key, _out_s285);
                      _pac_sc_s283 = _out_s285;
                    }
                    else
                    {
                      int _out_s287 = 0;
                      Object@meta(_out_s287);
                      Object@Object _pac_sc_s288 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s287)._int))/*Bucketing.sk:66*/
                      {
                        Object@Object _out_s290 = null;
                        hashCode@Object(key, _out_s290);
                        _pac_sc_s288 = _out_s290;
                      }
                      else
                      {
                        _pac_sc_s288 = null;
                      }
                      _pac_sc_s283 = _pac_sc_s288;
                    }
                    _pac_sc_s278 = _pac_sc_s283;
                  }
                  _pac_sc_s273 = _pac_sc_s278;
                }
                _pac_sc_s268 = _pac_sc_s273;
              }
              _pac_sc_s263 = _pac_sc_s268;
            }
            _pac_sc_s258 = _pac_sc_s263;
          }
          _pac_sc_s253 = _pac_sc_s258;
        }
        _pac_sc_s248 = _pac_sc_s253;
      }
      _pac_sc_s243 = _pac_sc_s248;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s243._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=1)._int))/*Bucketing.sk:67*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (new Object@Object(__cid=-2, _int=125)._int));
    }
    if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) != (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:72*/
    {
      Object@Object index = new Object@Object(__cid=-2, _int=((self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int)) + (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]));
      int _out_s292 = 0;
      Pair@meta(_out_s292);
      Object@Object _out_s294 = null;
      Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s292), key, value, _out_s294)//{};
      self.bucketHash_Bucketing._array_object.A[index._int] = _out_s294;
      self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int] = (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) + 1;
    }
    else
    {
      int _out_s296 = 0;
      ArrayList@meta(_out_s296);
      if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s296)._int))/*Bucketing.sk:78*/
      {
        int _out_s299 = 0;
        Pair@meta(_out_s299);
        Object@Object _out_s301 = null;
        Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s299), key, value, _out_s301)//{};
        Object@Object _out_s303 = null;
        add_Object_Object@ArrayList(self.overflow_Bucketing, _out_s301, _out_s303)//{};
      }
      int _out_s305 = 0;
      ArrayList@meta(_out_s305);
      Object@Object _pac_sc_s306 = null;
      if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s305)._int))/*Bucketing.sk:78*/
      {
        int _out_s308 = 0;
        Pair@meta(_out_s308);
        Object@Object _out_s310 = null;
        Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s308), key, value, _out_s310)//{};
        Object@Object _out_s312 = null;
        addb_Object_Object@ArrayList(self.overflow_Bucketing, _out_s310, _out_s312)//{};
        _pac_sc_s306 = _out_s312;
      }
      else
      {
        _pac_sc_s306 = null;
      }
      self.overflow_Bucketing = _pac_sc_s306;
    }
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) + 1);
    self.rehash_Bucketing = new Object@Object(__cid=-6, _double=(((double)self.numberOfElements_Bucketing._int)) / (((double)self.size_Bucketing._int)));
    if((self.rehash_Bucketing._double) > (new Object@Object(__cid=-6, _double=0.75)._double))/*Bucketing.sk:82*/
    {
      rehashng@Bucketing(self);
    }
  }
  /*Bucketing.sk:18*/
  
void rehashng (Object self)/*Bucketing.sk:18*/
  {
    Object@Object temp1_s314 = null;
    ArrayList_ArrayList@ArrayList(temp1_s314);
    Object@Object temp1;
    temp1 = temp1_s314;
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa0 = (i._int) < (new Object@Object(__cid=-2, _int=2)._int);
    while(__sa0)
    {
      Object@Object szbkt = new Object@Object(__cid=-2, _int=self.sizeBucket_Bucketing._array_int.A[i._int]);
      Object@Object j;
      j = new Object@Object(__cid=-2, _int=0);
      bit __sa1 = (j._int) < (szbkt._int);
      while(__sa1)
      {
        Object@Object index = new Object@Object(__cid=-2, _int=((i._int) * (self.numberOfSlots_Bucketing._int)) + (j._int));
        int _out_s316 = 0;
        ArrayList@meta(_out_s316);
        if((temp1.__cid) == (new Object@Object(__cid=-2, _int=_out_s316)._int))/*Bucketing.sk:27*/
        {
          int _out_s319 = 0;
          Pair@meta(_out_s319);
          Object@Object _out_s321 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s319), self.bucketHash_Bucketing._array_object.A[index._int].key_Pair, self.bucketHash_Bucketing._array_object.A[index._int].value_Pair, _out_s321)//{};
          Object@Object _out_s323 = null;
          add_Object_Object@ArrayList(temp1, _out_s321, _out_s323)//{};
        }
        int temp1_s325 = 0;
        ArrayList@meta(temp1_s325);
        Object@Object _pac_sc_s326 = null;
        if((temp1.__cid) == (new Object@Object(__cid=-2, _int=temp1_s325)._int))/*Bucketing.sk:27*/
        {
          int temp1_s328 = 0;
          Pair@meta(temp1_s328);
          Object@Object temp1_s330 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=temp1_s328), self.bucketHash_Bucketing._array_object.A[index._int].key_Pair, self.bucketHash_Bucketing._array_object.A[index._int].value_Pair, temp1_s330)//{};
          Object@Object temp1_s332 = null;
          addb_Object_Object@ArrayList(temp1, temp1_s330, temp1_s332)//{};
          _pac_sc_s326 = temp1_s332;
        }
        else
        {
          _pac_sc_s326 = null;
        }
        temp1 = _pac_sc_s326;
        j = new Object@Object(__cid=-2, _int=(j._int) + 1);
        __sa1 = (j._int) < (szbkt._int);
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa0 = (i._int) < (new Object@Object(__cid=-2, _int=2)._int);
    }
    Object@Object sz_s334 = null;
    xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s334);
    Object@Object i_0 = new Object@Object(__cid=-2, _int=0);
    bit __sa2 = (i_0._int) < (sz_s334._int);
    while(__sa2)
    {
      Object@Object tmp_s336 = null;
      xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s336);
      int _out_s338 = 0;
      ArrayList@meta(_out_s338);
      if((temp1.__cid) == (new Object@Object(__cid=-2, _int=_out_s338)._int))/*Bucketing.sk:37*/
      {
        Object@Object _out_s341 = null;
        add_Object_Object@ArrayList(temp1, tmp_s336, _out_s341);
      }
      int temp1_s343 = 0;
      ArrayList@meta(temp1_s343);
      Object@Object _pac_sc_s344 = null;
      if((temp1.__cid) == (new Object@Object(__cid=-2, _int=temp1_s343)._int))/*Bucketing.sk:37*/
      {
        Object@Object temp1_s346 = null;
        addb_Object_Object@ArrayList(temp1, tmp_s336, temp1_s346);
        _pac_sc_s344 = temp1_s346;
      }
      else
      {
        _pac_sc_s344 = null;
      }
      temp1 = _pac_sc_s344;
      i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
      __sa2 = (i_0._int) < (sz_s334._int);
    }
    self.size_Bucketing = new Object@Object(__cid=-2, _int=(self.size_Bucketing._int) * (new Object@Object(__cid=-2, _int=4)._int));
    self.numberOfSlots_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (new Object@Object(__cid=-2, _int=2)._int));
    self.mod_Bucketing = new Object@Object(__cid=-2, _int=(self.mod_Bucketing._int) * (new Object@Object(__cid=-2, _int=2)._int));
    Object@Object _out_s348 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s348);
    self.bucketHash_Bucketing = _out_s348;
    Object@Object _out_s350 = null;
    Wrap_Array_int@array(new Array_int@array(length=self.mod_Bucketing), _out_s350);
    self.sizeBucket_Bucketing = _out_s350;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
    Object@Object sz2_s352 = null;
    xform_size_ArrayList@ArrayList(temp1._arraylist, sz2_s352);
    Object@Object i_1 = new Object@Object(__cid=-2, _int=0);
    bit __sa3 = (i_1._int) < (sz2_s352._int);
    while(__sa3)
    {
      Object@Object tmp_s354 = null;
      xform_get_ArrayList_int@ArrayList(temp1._arraylist, i_1, tmp_s354);
      Object@Object key;
      key = tmp_s354.key_Pair;
      Object@Object val;
      val = tmp_s354.value_Pair;
      put_K_V@Bucketing(self, key, val);
      i_1 = new Object@Object(__cid=-2, _int=(i_1._int) + 1);
      __sa3 = (i_1._int) < (sz2_s352._int);
    }
  }
  /*Bucketing.sk:186*/
  
void size (Object self, ref Object _out)/*Bucketing.sk:186*/
  {
    _out = self.numberOfElements_Bucketing;
    return;
  }
  /* END PACKAGE Bucketing*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Object ca, Object offset, Object count, ref Object _out)/*String.sk:7*/
  {
    if(((offset._int) > (new Object@Object(__cid=-2, _int=0)._int)) && ((offset._int) < (ca._array_char.length._int)))/*String.sk:8*/
    {
      Object@Object tmp_s555 = null;
      Wrap_Array_char@array(new Array_char@array(length=count), tmp_s555);
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa8 = (i._int) < (count._int);
      while(__sa8)
      {
        tmp_s555._array_char.A[i._int] = ca._array_char.A[(i._int) + (offset._int)];
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa8 = (i._int) < (count._int);
      }
      self._value_String = tmp_s555;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, Object index, ref Object _out)/*String.sk:43*/
  {
    if(((new Object@Object(__cid=-2, _int=0)._int) <= (index._int)) && ((index._int) < (self._count_String._int)))/*String.sk:44*/
    {
      _out = new Object@Object(__cid=-3, _char=self._value_String._array_char.A[index._int]);
      return;
    }
    _out = new Object@Object(__cid=-3, _char='\0');
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*String.sk:154*/
  {
    _out = new Object@Object(__cid=-4, _bit=0);
    int _out_s538 = 0;
    String@meta(_out_s538);
    if((obj.__cid) == _out_s538)/*String.sk:156*/
    {
      _out = new Object@Object(__cid=-4, _bit=1);
      int sLen_s540 = 0;
      String@meta(sLen_s540);
      Object@Object _pac_sc_s541 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=sLen_s540)._int))/*String.sk:159*/
      {
        Object@Object sLen_s543 = null;
        length@String(obj, sLen_s543);
        _pac_sc_s541 = sLen_s543;
      }
      else
      {
        _pac_sc_s541 = null;
      }
      int tLen_s545 = 0;
      String@meta(tLen_s545);
      Object@Object _pac_sc_s546 = null;
      if((self.__cid) == (new Object@Object(__cid=-2, _int=tLen_s545)._int))/*String.sk:160*/
      {
        Object@Object tLen_s548 = null;
        length@String(self, tLen_s548);
        _pac_sc_s546 = tLen_s548;
      }
      else
      {
        _pac_sc_s546 = null;
      }
      if((_pac_sc_s541._int) != (_pac_sc_s546._int))/*String.sk:161*/
      {
        _out = new Object@Object(__cid=-4, _bit=0);
      }
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa16 = ((i._int) < (_pac_sc_s541._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      while(__sa16)
      {
        if((obj._value_String._array_char.A[i._int]) != (self._value_String._array_char.A[i._int]))/*String.sk:163*/
        {
          _out = new Object@Object(__cid=-4, _bit=0);
        }
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa16 = ((i._int) < (_pac_sc_s541._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      }
    }
    return;
  }
  /*String.sk:171*/
  
void hashCode (Object self, ref Object _out)/*String.sk:171*/
  {
    Object@Object n;
    Object@Object hash;
    Object@Object temp;
    n = self._count_String;
    hash = new Object@Object(__cid=-2, _int=0);
    if((n._int) == (new Object@Object(__cid=-2, _int=0)._int))/*String.sk:173*/
    {
      _out = new Object@Object(__cid=-2, _int=0);
      return;
    }
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa17 = (i._int) < (n._int);
    while(__sa17)
    {
      int temp_s550 = 0;
      String@meta(temp_s550);
      Object@Object _pac_sc_s551 = null;
      if((self.__cid) == (new Object@Object(__cid=-2, _int=temp_s550)._int))/*String.sk:177*/
      {
        Object@Object temp_s553 = null;
        charAt_int@String(self, i, temp_s553);
        _pac_sc_s551 = temp_s553;
      }
      else
      {
        _pac_sc_s551 = null;
      }
      temp = _pac_sc_s551;
      Object@Object j;
      j = new Object@Object(__cid=-2, _int=0);
      bit __sa18 = (j._int) < (((n._int) - (new Object@Object(__cid=-2, _int=1)._int)) - (i._int));
      while(__sa18)
      {
        temp = new Object@Object(__cid=-2, _int=(temp._int) * (new Object@Object(__cid=-2, _int=31)._int));
        j = new Object@Object(__cid=-2, _int=(j._int) + 1);
        __sa18 = (j._int) < (((n._int) - (new Object@Object(__cid=-2, _int=1)._int)) - (i._int));
      }
      hash = new Object@Object(__cid=-2, _int=(hash._int) + (temp._int));
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa17 = (i._int) < (n._int);
    }
    _out = hash;
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref Object _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE BucketingTest*/
package BucketingTest{
  /*BucketingTest.sk:8*/
  
void mn_int_int_int ()/*BucketingTest.sk:8*/
  {
    Object@Object x = new Object@Object(__cid=-2, _int=1);
    Object@Object y = new Object@Object(__cid=-2, _int=2);
    Object@Object z = new Object@Object(__cid=-2, _int=3);
    int self_s752 = 0;
    Object@meta(self_s752);
    Object@Object self_s754 = null;
    Object_Object@Object(new Object@Object(__cid=self_s752), self_s754)//{};
    int xx_s756 = 0;
    Integer@meta(xx_s756);
    Object@Object xx_s758 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=xx_s756), x, xx_s758)//{};
    int yy_s760 = 0;
    Integer@meta(yy_s760);
    Object@Object yy_s762 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=yy_s760), y, yy_s762)//{};
    int zz_s764 = 0;
    Integer@meta(zz_s764);
    Object@Object zz_s766 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=zz_s764), z, zz_s766)//{};
    setUp@BucketingTest(self_s754);
    testClear_Integer_Integer@BucketingTest(self_s754, xx_s758, yy_s762);
    testGetEmpty@BucketingTest(self_s754);
    testPutAndGet_Integer_Integer_Integer@BucketingTest(self_s754, xx_s758, yy_s762, zz_s766);
  }
  /*BucketingTest.sk:8*/
  
void mn_int_int_int__Wrapper ()  implements mn_int_int_int__WrapperNospec/*BucketingTest.sk:8*/
  {
    mn_int_int_int();
  }
  /*BucketingTest.sk:8*/
  
void mn_int_int_int__WrapperNospec ()/*BucketingTest.sk:8*/
  { }
  /*BucketingTest.sk:32*/
  
void setUp (Object self)/*BucketingTest.sk:32*/
  {
    int _out_s830 = 0;
    Bucketing@meta(_out_s830);
    Object@Object _out_s832 = null;
    Bucketing_Bucketing@Bucketing(new Object@Object(__cid=_out_s830), _out_s832)//{};
    self.classUnderTest_BucketingTest = _out_s832;
  }
  /*BucketingTest.sk:36*/
  
void testClear_Integer_Integer (Object self, Object x, Object y)/*BucketingTest.sk:36*/
  {
    int _out_s814 = 0;
    Bucketing@meta(_out_s814);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s814)._int))/*BucketingTest.sk:37*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y);
    }
    int _out_s816 = 0;
    Bucketing@meta(_out_s816);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s816)._int))/*BucketingTest.sk:39*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x);
    }
    int _out_s818 = 0;
    Bucketing@meta(_out_s818);
    Object@Object _pac_sc_s819 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s818)._int))/*BucketingTest.sk:41*/
    {
      Object@Object _out_s821 = null;
      size@Bucketing(self.classUnderTest_BucketingTest, _out_s821);
      _pac_sc_s819 = _out_s821;
    }
    else
    {
      _pac_sc_s819 = null;
    }
    assertTrue_boolean@Assert(new Object@Object(__cid=-4, _bit=(_pac_sc_s819._int) > (new Object@Object(__cid=-2, _int=0)._int)))//{};
    int _out_s823 = 0;
    Bucketing@meta(_out_s823);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s823)._int))/*BucketingTest.sk:42*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s825 = 0;
    Bucketing@meta(_out_s825);
    Object@Object _pac_sc_s826 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s825)._int))/*BucketingTest.sk:44*/
    {
      Object@Object _out_s828 = null;
      size@Bucketing(self.classUnderTest_BucketingTest, _out_s828);
      _pac_sc_s826 = _out_s828;
    }
    else
    {
      _pac_sc_s826 = null;
    }
    assertFalse_boolean@Assert(new Object@Object(__cid=-4, _bit=(_pac_sc_s826._int) > (new Object@Object(__cid=-2, _int=0)._int)))//{};
  }
  /*BucketingTest.sk:47*/
  
void testGetEmpty (Object self)/*BucketingTest.sk:47*/
  {
    int _out_s807 = 0;
    Bucketing@meta(_out_s807);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s807)._int))/*BucketingTest.sk:48*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s809 = 0;
    Bucketing@meta(_out_s809);
    Object@Object _pac_sc_s810 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s809)._int))/*BucketingTest.sk:50*/
    {
      Object@Object _out_s812 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, null, _out_s812);
      _pac_sc_s810 = _out_s812;
    }
    else
    {
      _pac_sc_s810 = null;
    }
    assertNull_Object@Assert(_pac_sc_s810)//{};
  }
  /*BucketingTest.sk:53*/
  
void testPutAndGet_Integer_Integer_Integer (Object self, Object x, Object y, Object z)/*BucketingTest.sk:53*/
  {
    int _out_s768 = 0;
    Bucketing@meta(_out_s768);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s768)._int))/*BucketingTest.sk:54*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s770 = 0;
    Bucketing@meta(_out_s770);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s770)._int))/*BucketingTest.sk:56*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y);
    }
    int _out_s772 = 0;
    Bucketing@meta(_out_s772);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s772)._int))/*BucketingTest.sk:58*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x);
    }
    int _out_s774 = 0;
    Bucketing@meta(_out_s774);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s774)._int))/*BucketingTest.sk:60*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, z, x);
    }
    int _out_s776 = 0;
    Bucketing@meta(_out_s776);
    Object@Object _pac_sc_s777 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s776)._int))/*BucketingTest.sk:62*/
    {
      Object@Object _out_s779 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, x, _out_s779);
      _pac_sc_s777 = _out_s779;
    }
    else
    {
      _pac_sc_s777 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s777, y)//{};
    int _out_s781 = 0;
    Bucketing@meta(_out_s781);
    Object@Object _pac_sc_s782 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s781)._int))/*BucketingTest.sk:63*/
    {
      Object@Object _out_s784 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, y, _out_s784);
      _pac_sc_s782 = _out_s784;
    }
    else
    {
      _pac_sc_s782 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s782, x)//{};
    int _out_s786 = 0;
    Bucketing@meta(_out_s786);
    Object@Object _pac_sc_s787 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s786)._int))/*BucketingTest.sk:64*/
    {
      Object@Object _out_s789 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, z, _out_s789);
      _pac_sc_s787 = _out_s789;
    }
    else
    {
      _pac_sc_s787 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s787, x)//{};
    int add_s791 = 0;
    Integer@meta(add_s791);
    Object@Object _pac_sc_s792 = null;
    if((x.__cid) == (new Object@Object(__cid=-2, _int=add_s791)._int))/*BucketingTest.sk:65*/
    {
      Object@Object add_s794 = null;
      intValue@Integer(x, add_s794);
      _pac_sc_s792 = add_s794;
    }
    else
    {
      _pac_sc_s792 = null;
    }
    Object@Object add = new Object@Object(__cid=-2, _int=(_pac_sc_s792._int) + (new Object@Object(__cid=-2, _int=1)._int));
    int i_s796 = 0;
    Integer@meta(i_s796);
    Object@Object i_s798 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=i_s796), add, i_s798)//{};
    int _out_s800 = 0;
    Bucketing@meta(_out_s800);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s800)._int))/*BucketingTest.sk:67*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, i_s798, y);
    }
    int _out_s802 = 0;
    Bucketing@meta(_out_s802);
    Object@Object _pac_sc_s803 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s802)._int))/*BucketingTest.sk:69*/
    {
      Object@Object _out_s805 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, i_s798, _out_s805);
      _pac_sc_s803 = _out_s805;
    }
    else
    {
      _pac_sc_s803 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s803, y)//{};
  }
  /* END PACKAGE BucketingTest*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:7*/
  
void Integer_Integer_int (Object self, Object value, ref Object _out)/*Integer.sk:7*/
  {
    self.value_Integer = value;
    _out = self;
    return;
  }
  /*Integer.sk:24*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Integer.sk:24*/
  {
    int _out_s834 = 0;
    Integer@meta(_out_s834);
    if((obj.__cid) == _out_s834)/*Integer.sk:25*/
    {
      int _out_s836 = 0;
      Integer@meta(_out_s836);
      Object@Object _pac_sc_s837 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s836)._int))/*Integer.sk:26*/
      {
        Object@Object _out_s839 = null;
        intValue@Integer(obj, _out_s839);
        _pac_sc_s837 = _out_s839;
      }
      else
      {
        _pac_sc_s837 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Integer._int) == (_pac_sc_s837._int));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /*Integer.sk:31*/
  
void hashCode (Object self, ref Object _out)/*Integer.sk:31*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:12*/
  
void intValue (Object self, ref Object _out)/*Integer.sk:12*/
  {
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /*Assert.sk:45*/
  
void assertEquals_Object_Object (Object expected, Object actual)/*Assert.sk:45*/
  {
    assertEquals_String_Object_Object(null, expected, actual);
  }
  /*Assert.sk:30*/
  
void assertEquals_String_Object_Object (Object message, Object expected, Object actual)/*Assert.sk:30*/
  {
    int _out_s848 = 0;
    Integer@meta(_out_s848);
    Object@Object _pac_sc_s849 = null;
    if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s848)._int))/*Assert.sk:31*/
    {
      Object@Object _out_s851 = null;
      equals_Object@Integer(expected, actual, _out_s851);
      _pac_sc_s849 = _out_s851;
    }
    else
    {
      int _out_s853 = 0;
      Bucketing@meta(_out_s853);
      Object@Object _pac_sc_s854 = null;
      if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s853)._int))/*Assert.sk:31*/
      {
        Object@Object _out_s856 = null;
        equals_Object@Object(expected, actual, _out_s856);
        _pac_sc_s854 = _out_s856;
      }
      else
      {
        int _out_s858 = 0;
        BucketingTest@meta(_out_s858);
        Object@Object _pac_sc_s859 = null;
        if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s858)._int))/*Assert.sk:31*/
        {
          Object@Object _out_s861 = null;
          equals_Object@Object(expected, actual, _out_s861);
          _pac_sc_s859 = _out_s861;
        }
        else
        {
          int _out_s863 = 0;
          Pair@meta(_out_s863);
          Object@Object _pac_sc_s864 = null;
          if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s863)._int))/*Assert.sk:31*/
          {
            Object@Object _out_s866 = null;
            equals_Object@Object(expected, actual, _out_s866);
            _pac_sc_s864 = _out_s866;
          }
          else
          {
            int _out_s868 = 0;
            String@meta(_out_s868);
            Object@Object _pac_sc_s869 = null;
            if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s868)._int))/*Assert.sk:31*/
            {
              Object@Object _out_s871 = null;
              equals_Object@String(expected, actual, _out_s871);
              _pac_sc_s869 = _out_s871;
            }
            else
            {
              int _out_s873 = 0;
              Boolean@meta(_out_s873);
              Object@Object _pac_sc_s874 = null;
              if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s873)._int))/*Assert.sk:31*/
              {
                Object@Object _out_s876 = null;
                equals_Object@Object(expected, actual, _out_s876);
                _pac_sc_s874 = _out_s876;
              }
              else
              {
                int _out_s878 = 0;
                ArrayList@meta(_out_s878);
                Object@Object _pac_sc_s879 = null;
                if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s878)._int))/*Assert.sk:31*/
                {
                  Object@Object _out_s881 = null;
                  equals_Object@Object(expected, actual, _out_s881);
                  _pac_sc_s879 = _out_s881;
                }
                else
                {
                  int _out_s883 = 0;
                  Assert@meta(_out_s883);
                  Object@Object _pac_sc_s884 = null;
                  if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s883)._int))/*Assert.sk:31*/
                  {
                    Object@Object _out_s886 = null;
                    equals_Object@Object(expected, actual, _out_s886);
                    _pac_sc_s884 = _out_s886;
                  }
                  else
                  {
                    int _out_s888 = 0;
                    Character@meta(_out_s888);
                    Object@Object _pac_sc_s889 = null;
                    if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s888)._int))/*Assert.sk:31*/
                    {
                      Object@Object _out_s891 = null;
                      equals_Object@Character(expected, actual, _out_s891);
                      _pac_sc_s889 = _out_s891;
                    }
                    else
                    {
                      int _out_s893 = 0;
                      Object@meta(_out_s893);
                      Object@Object _pac_sc_s894 = null;
                      if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s893)._int))/*Assert.sk:31*/
                      {
                        Object@Object _out_s896 = null;
                        equals_Object@Object(expected, actual, _out_s896);
                        _pac_sc_s894 = _out_s896;
                      }
                      else
                      {
                        _pac_sc_s894 = null;
                      }
                      _pac_sc_s889 = _pac_sc_s894;
                    }
                    _pac_sc_s884 = _pac_sc_s889;
                  }
                  _pac_sc_s879 = _pac_sc_s884;
                }
                _pac_sc_s874 = _pac_sc_s879;
              }
              _pac_sc_s869 = _pac_sc_s874;
            }
            _pac_sc_s864 = _pac_sc_s869;
          }
          _pac_sc_s859 = _pac_sc_s864;
        }
        _pac_sc_s854 = _pac_sc_s859;
      }
      _pac_sc_s849 = _pac_sc_s854;
    }
    assert (_pac_sc_s849._bit); //Assert at Assert.sk:31 (0)
  }
  /*Assert.sk:15*/
  
void assertFalse_String_boolean (Object message, Object condition)/*Assert.sk:15*/
  {
    assertTrue_String_boolean(message, new Object@Object(__cid=-4, _bit=!(condition._bit)));
  }
  /*Assert.sk:19*/
  
void assertFalse_boolean (Object condition)/*Assert.sk:19*/
  {
    int _out_s898 = 0;
    String@meta(_out_s898);
    Object@Object _out_s900 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=1), A={'\0'}), _out_s900);
    Object@Object _out_s902 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s898), _out_s900, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=0), _out_s902)//{};
    assertFalse_String_boolean(_out_s902, condition)//{};
  }
  /*Assert.sk:60*/
  
void assertNull_Object (Object object)/*Assert.sk:60*/
  {
    assertNull_String_Object(null, object);
  }
  /*Assert.sk:53*/
  
void assertNull_String_Object (Object message, Object object)/*Assert.sk:53*/
  {
    if(object == (null))/*Assert.sk:54*/
    {
      return;
    }
    failNotNull_String_Object(message, object);
  }
  /*Assert.sk:7*/
  
void assertTrue_String_boolean (Object message, Object condition)/*Assert.sk:7*/
  {
    assert (condition._bit); //Assert at Assert.sk:8 (2)
  }
  /*Assert.sk:11*/
  
void assertTrue_boolean (Object condition)/*Assert.sk:11*/
  {
    int _out_s904 = 0;
    String@meta(_out_s904);
    Object@Object _out_s906 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=1), A={'\0'}), _out_s906);
    Object@Object _out_s908 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s904), _out_s906, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=0), _out_s908)//{};
    assertTrue_String_boolean(_out_s908, condition)//{};
  }
  /*Assert.sk:64*/
  
void failNotNull_String_Object (Object message, Object actual)/*Assert.sk:64*/
  {
    assert (new Object@Object(__cid=-4, _bit=0)._bit); //Assert at Assert.sk:65 (0)
  }
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      Object length;
      bit[length._int] A;
  }
  struct Array_char {
      Object length;
      char[length._int] A;
  }
  struct Array_int {
      Object length;
      int[length._int] A;
  }
  struct Array_float {
      Object length;
      float[length._int] A;
  }
  struct Array_double {
      Object length;
      double[length._int] A;
  }
  struct Array_Object {
      Object length;
      Object[length._int] A;
  }
  /*array.sk:53*/
  
void Wrap_Array_Object (Array_Object arr, ref Object _out)/*array.sk:53*/
  {
    int _out_s972 = 0;
    Array@meta(_out_s972);
    _out = new Object@Object(__cid=_out_s972, _array_object=arr);
    return;
  }
  /*array.sk:37*/
  
void Wrap_Array_char (Array_char arr, ref Object _out)/*array.sk:37*/
  {
    int _out_s974 = 0;
    Array@meta(_out_s974);
    _out = new Object@Object(__cid=_out_s974, _array_char=arr);
    return;
  }
  /*array.sk:41*/
  
void Wrap_Array_int (Array_int arr, ref Object _out)/*array.sk:41*/
  {
    int _out_s970 = 0;
    Array@meta(_out_s970);
    _out = new Object@Object(__cid=_out_s970, _array_int=arr);
    return;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:16*/
  
void Array (ref int _out)/*meta.sk:16*/
  {
    _out = -1;
    return;
  }
  /*meta.sk:4*/
  
void ArrayList (ref int _out)/*meta.sk:4*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:5*/
  
void Assert (ref int _out)/*meta.sk:5*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:6*/
  
void Boolean (ref int _out)/*meta.sk:6*/
  {
    _out = 12;
    return;
  }
  /*meta.sk:7*/
  
void Bucketing (ref int _out)/*meta.sk:7*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:8*/
  
void BucketingTest (ref int _out)/*meta.sk:8*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:10*/
  
void Character (ref int _out)/*meta.sk:10*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:12*/
  
void Integer (ref int _out)/*meta.sk:12*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:13*/
  
void Object (ref int _out)/*meta.sk:13*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:14*/
  
void Pair (ref int _out)/*meta.sk:14*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:15*/
  
void String (ref int _out)/*meta.sk:15*/
  {
    _out = 6;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object value_Character;
      Object bool_Boolean;
      Object _value_String;
      Object _count_String;
      Object key_Pair;
      Object value_Pair;
      Object classUnderTest_BucketingTest;
      Object integerKey_Bucketing;
      Object numberOfSlots_Bucketing;
      Object bucketHash_Bucketing;
      Object overflow_Bucketing;
      Object sizeBucket_Bucketing;
      Object numberOfElements_Bucketing;
      Object index_Bucketing;
      Object size_Bucketing;
      Object mod_Bucketing;
      Object ilterator_Bucketing;
      Object rehash_Bucketing;
      Object value_Integer;
      ArrayList _arraylist;
      Array_bit _array_bit;
      Array_char _array_char;
      Array_int _array_int;
      Array_float _array_float;
      Array_double _array_double;
      Array_Object _array_object;
      bit _bit;
      char _char;
      int _int;
      float _float;
      double _double;
  }
  /*Object.sk:3*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:3*/
  {
    _out = self;
    return;
  }
  /*Object.sk:17*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Object.sk:17*/
  {
    _out = new Object(__cid=-4, _bit=self == obj);
    return;
  }
  /*Object.sk:21*/
  
void hashCode (Object self, ref Object _out)/*Object.sk:21*/
  {
    _out = new Object(__cid=-2, _int=0);
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE Pair*/
package Pair{
  /*Pair.sk:7*/
  
void Pair_Pair_K_V (Object self, Object key, Object value, ref Object _out)/*Pair.sk:7*/
  {
    self.key_Pair = key;
    self.value_Pair = value;
    _out = self;
    return;
  }
  /* END PACKAGE Pair*/
}
[SKETCH] DONE
Total time = 15657
