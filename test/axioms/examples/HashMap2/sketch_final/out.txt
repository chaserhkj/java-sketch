SKETCH version 1.7.5
Benchmark = /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/sk_BucketingTest/main.sk
array.sk:5: Making final Array_bit@array.length
array.sk:5: Making final Object._int
array.sk:10: Making final Array_char@array.length
array.sk:15: Making final Array_int@array.length
array.sk:20: Making final Array_float@array.length
array.sk:25: Making final Array_double@array.length
array.sk:30: Making final Array_Object@array.length
[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 2
[SATBackend] MAX FUNC INLINING  = 1
estimated size of mn_int_int_int__Wrapper_BucketingTest
stmt cnt: 4
callee mn_int_int_int_BucketingTest : 93

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = sk_BucketingTest
searching for file null
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file cegis/src/SketchSolver/cegis
searching for file ../sketch-backend/src/SketchSolver/cegis
searching for file ../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/cegis-1.7.5
searching for file /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/cegis
searching for file /usr/bin/cegis
searching for file /usr/bin/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/bin/../sketch-backend/bindings/cegis
searching for file /bin/cegis
searching for file /bin/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/src/SketchSolver/cegis
searching for file /bin/../sketch-backend/bindings/cegis
searching for file /usr/sbin/cegis
searching for file /usr/sbin/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/sbin/../sketch-backend/bindings/cegis
searching for file /sbin/cegis
searching for file /sbin/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/src/SketchSolver/cegis
searching for file /sbin/../sketch-backend/bindings/cegis
searching for file /usr/local/bin/cegis
searching for file /usr/local/bin/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /usr/local/bin/../sketch-backend/bindings/cegis
searching for file /Applications/Racket v6.10/bin/cegis
searching for file /Applications/Racket v6.10/bin/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/src/SketchSolver/cegis
searching for file /Applications/Racket v6.10/bin/../sketch-backend/bindings/cegis
searching for file /Library/TeX/texbin/cegis
searching for file /Library/TeX/texbin/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/src/SketchSolver/cegis
searching for file /Library/TeX/texbin/../sketch-backend/bindings/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/src/SketchSolver/cegis
searching for file /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-frontend/../sketch-backend/src/SketchSolver/cegis
resolved cegis to path /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis
[SATBackend] Launching: /Users/kathymariano/Research/sketch-from-zip/sketch-1.7.5/sketch-backend/src/SketchSolver/cegis --bnd-inbits 5 --boundmode CALLNAME --verbosity 13 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 1 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/solution0-0 /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/input0.tmp 
Overriding inputs with 5
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1523665105
 optimization level = 6
Reading SKETCH Program in File /Users/kathymariano/Research/java-sketch2/test/axioms/examples/HashMap2/sketch_final/tmp/sk_BucketingTest/input0.tmp
CREATING mn_int_int_int__Wrapper_BucketingTest
size = 4
after ba size = 4
CREATING mn_int_int_int__WrapperNospec_BucketingTest
size = 0
after ba size = 0
CREATING mn_int_int_int_BucketingTest
size = 341
after ba size = 341
CREATING Object_meta
size = 3
after ba size = 3
CREATING Object_Object_Object
size = 35
after ba size = 35
CREATING Integer_meta
size = 3
after ba size = 3
CREATING Integer_Integer_int_Integer
size = 43
after ba size = 43
CREATING setUp_BucketingTest
size = 95
after ba size = 95
CREATING testClear_Integer_Integer_BucketingTest
size = 509
after ba size = 509
CREATING testGetEmpty_BucketingTest
size = 276
after ba size = 276
CREATING testPutAndGet_Integer_Integer_Integer_BucketingTest
size = 1121
after ba size = 1121
CREATING Bucketing_meta
size = 3
after ba size = 3
CREATING Bucketing_Bucketing_Bucketing
size = 185
after ba size = 185
CREATING put_K_V_Bucketing
Found Cycle of size 13; Breaking.
Found Cycle of size 22; Breaking.
size = 1596
after ba size = 1596
CREATING size_Bucketing
size = 42
after ba size = 42
CREATING assertTrue_boolean_Assert
size = 149
after ba size = 149
CREATING clear_Bucketing
size = 172
after ba size = 172
CREATING assertFalse_boolean_Assert
size = 182
after ba size = 182
CREATING get_K_Bucketing
Found Cycle of size 47; Breaking.
Found Cycle of size 55; Breaking.
Found Cycle of size 40; Breaking.
Found Cycle of size 26; Breaking.
Found Cycle of size 64; Breaking.
Found Cycle of size 63; Breaking.
Found Cycle of size 42; Breaking.
Found Cycle of size 40; Breaking.
Found Cycle of size 52; Breaking.
Found Cycle of size 18; Breaking.
size = 5444
after ba size = 5444
CREATING assertNull_Object_Assert
size = 72
after ba size = 72
CREATING assertEquals_Object_Object_Assert
size = 75
after ba size = 75
CREATING intValue_Integer
size = 42
after ba size = 42
CREATING Wrap_Array_Object_array
size = 45
after ba size = 45
CREATING ArrayList_ArrayList_ArrayList
size = 45
after ba size = 45
CREATING Wrap_Array_int_array
size = 45
after ba size = 45
CREATING delete_K_Bucketing
Found Cycle of size 18; Breaking.
Found Cycle of size 21; Breaking.
Found Cycle of size 23; Breaking.
Found Cycle of size 37; Breaking.
Found Cycle of size 41; Breaking.
Found Cycle of size 39; Breaking.
Found Cycle of size 43; Breaking.
Found Cycle of size 44; Breaking.
Found Cycle of size 65; Breaking.
Found Cycle of size 50; Breaking.
Found Cycle of size 18; Breaking.
Found Cycle of size 49; Breaking.
size = 6023
after ba size = 6023
CREATING hashCode_Integer
size = 42
after ba size = 42
CREATING hashCode_Object
size = 42
after ba size = 42
CREATING BucketingTest_meta
size = 3
after ba size = 3
CREATING Pair_meta
size = 3
after ba size = 3
CREATING String_meta
size = 3
after ba size = 3
CREATING hashCode_String
Found Cycle of size 26; Breaking.
size = 668
after ba size = 668
CREATING Boolean_meta
size = 3
after ba size = 3
CREATING ArrayList_meta
size = 3
after ba size = 3
CREATING Assert_meta
size = 3
after ba size = 3
CREATING Character_meta
size = 3
after ba size = 3
CREATING Pair_Pair_K_V_Pair
size = 45
after ba size = 45
CREATING add_Object_Object_ArrayList
size = 51
after ba size = 51
CREATING addb_Object_Object_ArrayList
size = 52
after ba size = 52
CREATING rehashng_Bucketing
Found Cycle of size 42; Breaking.
Found Cycle of size 31; Breaking.
size = 2863
after ba size = 2863
CREATING Wrap_Array_char_array
size = 45
after ba size = 45
CREATING String_String_char_int_int_String
size = 321
after ba size = 321
CREATING assertTrue_String_boolean_Assert
size = 44
after ba size = 44
CREATING assertFalse_String_boolean_Assert
size = 51
after ba size = 51
CREATING equals_Object_Integer
Found Cycle of size 5; Breaking.
size = 98
after ba size = 98
CREATING equals_Object_Object
size = 43
after ba size = 43
CREATING equals_Object_String
Found Cycle of size 5; Breaking.
size = 354
after ba size = 354
CREATING equals_Object_Character
Found Cycle of size 5; Breaking.
size = 98
after ba size = 98
CREATING xform_size_ArrayList_ArrayList
size = 515
after ba size = 515
CREATING xform_get_ArrayList_int_ArrayList
size = 673
after ba size = 673
CREATING assertNull_String_Object_Assert
size = 111
after ba size = 111
CREATING assertEquals_String_Object_Object_Assert
size = 948
after ba size = 948
CREATING Array_meta
size = 3
after ba size = 3
CREATING remove_Object_int_ArrayList
size = 52
after ba size = 52
CREATING removeb_Object_int_ArrayList
size = 52
after ba size = 52
CREATING charAt_int_String
size = 113
after ba size = 113
CREATING length_String
size = 42
after ba size = 42
CREATING charValue_Character
size = 42
after ba size = 42
CREATING failNotNull_String_Object_Assert
size = 51
after ba size = 51
* before  EVERYTHING: mn_int_int_int__WrapperNospec_BucketingTest::SPEC nodes = 0	 mn_int_int_int__Wrapper_BucketingTest::SKETCH nodes = 4
 INBITS = 5
 CBITS  = 5
 input_ints = 0 	 input_bits = 0
 Inlining amount = 1
 Inlining functions in the sketch.
inlined 1 new size =249
inlined 18 new size =1635
Found Cycle of size 118; Breaking.
Found Cycle of size 124; Breaking.
Found Cycle of size 311; Breaking.
Found Cycle of size 252; Breaking.
Found Cycle of size 265; Breaking.
Found Cycle of size 65; Breaking.
Found Cycle of size 254; Breaking.
Found Cycle of size 151; Breaking.
Found Cycle of size 238; Breaking.
inlined 47 new size =34788
Found Cycle of size 179; Breaking.
Found Cycle of size 181; Breaking.
Found Cycle of size 35; Breaking.
inlined 395 new size =81809
Found Cycle of size 97; Breaking.
Found Cycle of size 204; Breaking.
inlined 629 new size =74751
Found Cycle of size 206; Breaking.
inlined 136 new size =77711
inlined 2 new size =77224
inlined 0 new size =77224
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =0
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 53403
* Final Problem size: Problem nodes = 53202
  # OF CONTROLS:    17
 control_ints = 13 	 control_bits = 4
inputSize = 0	ctrlSize = 71
Random seeds = 1
!+ 00000010100001000001000111000010100010001010010000010010010000000000000
!+ H__13:0
H__14:0
H__16:5
H__6:16
H__17:0
H__0:68
H__1:67
H__15:0
H__5:17
H__2:74
H__3:32
H__9:2
H__8:2
H__10:0
H__4:0
H__11:0
H__12:0

BEG CHECK
 * After optims it became = 2 was 53202
function was not inlined enough xform_size_ArrayList_ArrayList
Simulation found a cex by random testing:  0 ms 
END CHECK
********  0	ftime= 0	ctime= 999.096
!% 
!% 
BEG FIND
Level 1  intsize = 2
 * After optims it became = 53202 was 53202
 * After all optims it became = 53202
 finder  hits = 210477	 bstoreObjs=453042	 sstorePages=673
hitcount 	0	374403	9
hitcount 	1	46091	8
hitcount 	2	3618	8
hitcount 	3	3893	5
hitcount 	4	9726	9
hitcount 	5	10455	9
hitcount 	6	109	9
hitcount 	7	2508	8
hitcount 	8	961	9
hitcount 	9	168	2
hitcount 	10	31	8
hitcount 	11	163	2
hitcount 	12	138	2
hitcount 	13	122	8
hitcount 	14	152	9
hitcount 	15	9	3
hitcount 	16	115	8
hitcount 	17	12	5
hitcount 	18	4	1
hitcount 	19	133	1
hitcount 	20	18	10
hitcount 	21	1	0
hitcount 	22	6	4
hitcount 	23	133	1
hitcount 	24	19	7
hitcount 	28	2	5
hitcount 	29	7	8
hitcount 	31	4	3
hitcount 	33	2	5
hitcount 	34	2	16
hitcount 	35	1	3
hitcount 	41	2	5
hitcount 	43	1	2
hitcount 	44	2	4
hitcount 	45	1	0
hitcount 	50	2	3
hitcount 	63	2	1
hitcount 	67	2	0
hitcount 	83	2	5
hitcount 	109	2	1
hitcount 	125	2	2
hitcount 	167	2	0
hitcount 	204	1	15
hitcount 	279	2	0
hitcount 	367	1	5
hitcount 	497	2	10
hitcount 	590	1	5
hitcount 	598	1	10
hitcount 	609	1	10
hitcount 	617	1	7
hitcount 	630	1	7
hitcount 	638	1	6
hitcount 	659	2	7
hitcount 	666	1	6
hitcount 	676	1	14
bucketsPerDepth 	14	6
bucketsPerDepth 	15	46
bucketsPerDepth 	16	127
bucketsPerDepth 	17	233
bucketsPerDepth 	18	209
bucketsPerDepth 	19	164
bucketsPerDepth 	20	124
bucketsPerDepth 	21	55
bucketsPerDepth 	22	31
bucketsPerDepth 	23	19
bucketsPerDepth 	24	6
bucketsPerDepth 	25	3
bucketsPerDepth 	26	1
* TIME TO ADD INPUT :  8000.71 ms 
DECISIONS START = 0
f# %assign: 55 clauses: 1593073 learn: 30 restart: 1 decision: 2850 propagated: 2419913
END FIND
!+ 10101110101000001100000001111110000000010000000000000011101000100000100
!+ H__13:5
H__14:6
H__16:5
H__6:2
H__17:1
H__0:1
H__1:126
H__15:0
H__5:0
H__2:1
H__3:0
H__9:6
H__8:5
H__10:0
H__4:4
H__11:2
H__12:0

BEG CHECK
 * After optims it became = 0 was 53202
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 3
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 4
Simulation no cex:  0 ms 
CONTROL: growing l=2 inputs to size 5
Simulation no cex:  0 ms 
END CHECK
********  1	ftime= 13000.5	ctime= 0.095
 *GOT THE CORRECT ANSWER IN 2 iterations.
 *FIND TIME 13000.5 CHECK TIME 999.191 TOTAL TIME 13999.7
VALUES H__0: 1, H__1: 126, H__10: 0, H__11: 2, H__12: 0, H__13: 5, H__14: 6, H__15: 0, H__16: 5, H__17: 1, H__2: 1, H__3: 0, H__4: 4, H__5: 0, H__6: 2, H__8: 5, H__9: 6, 
RESULT = 2  
**ROUND 0 : 0 Round time:  14999.9 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  15999.9
Model building time (ms): 0.494
Solution time (ms):       14999.9
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 16.111
      model building time (s) ---------> 0.0
      solution time (s) ---------------> 14.999
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
[SATBackend] Not Deleting
/* BEGIN PACKAGE ANONYMOUS*/
/* END PACKAGE ANONYMOUS*/
/* BEGIN PACKAGE HashTable*/
package HashTable{
  /* END PACKAGE HashTable*/
}
/* BEGIN PACKAGE Character*/
package Character{
  /*Character.sk:12*/
  
void charValue (Object self, ref Object _out)/*Character.sk:12*/
  {
    _out = self.value_Character;
    return;
  }
  /*Character.sk:16*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Character.sk:16*/
  {
    int _out_s38 = 0;
    Character@meta(_out_s38);
    if((obj.__cid) == _out_s38)/*Character.sk:17*/
    {
      int _out_s40 = 0;
      Character@meta(_out_s40);
      Object@Object _pac_sc_s41 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s40)._int))/*Character.sk:18*/
      {
        Object@Object _out_s43 = null;
        charValue@Character(obj, _out_s43);
        _pac_sc_s41 = _out_s43;
      }
      else
      {
        _pac_sc_s41 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Character._char) == (_pac_sc_s41._char));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /* END PACKAGE Character*/
}
/* BEGIN PACKAGE ArrayList*/
package ArrayList{
  struct ArrayList {
      @Immutable()
  }
  struct Arraylist extends ArrayList@ArrayList {
      @Immutable()
  }
  struct Add_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Addb_object extends ArrayList@ArrayList {
      ArrayList self;
      Object e;
      @Immutable()
  }
  struct Getb_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Setb_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Get_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Set_int_object extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      Object e;
      @Immutable()
  }
  struct Removeb_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  struct Ensurecapacity_int extends ArrayList@ArrayList {
      ArrayList self;
      Object n;
      @Immutable()
  }
  struct Size extends ArrayList@ArrayList {
      ArrayList self;
      @Immutable()
  }
  struct Remove_int extends ArrayList@ArrayList {
      ArrayList self;
      Object i;
      @Immutable()
  }
  /*ArrayList.sk:17*/
  
void ArrayList_ArrayList (ref Object _out)/*ArrayList.sk:17*/
  {
    int _out_s94 = 0;
    ArrayList@meta(_out_s94);
    _out = new Object@Object(__cid=_out_s94, _arraylist=new Arraylist());
    return;
  }
  /*ArrayList.sk:21*/
  
void add_Object_Object (Object self, Object e, ref Object _out)/*ArrayList.sk:21*/
  {
    int _out_s92 = 0;
    ArrayList@meta(_out_s92);
    _out = new Object@Object(__cid=_out_s92, _arraylist=new Add_object(self=self._arraylist, e=e));
    return;
  }
  /*ArrayList.sk:25*/
  
void addb_Object_Object (Object self, Object e, ref Object _out)/*ArrayList.sk:25*/
  {
    int _out_s90 = 0;
    ArrayList@meta(_out_s90);
    _out = new Object@Object(__cid=_out_s90, _arraylist=new Addb_object(self=self._arraylist, e=e));
    return;
  }
  /*ArrayList.sk:57*/
  
void remove_Object_int (Object self, Object i, ref Object _out)/*ArrayList.sk:57*/
  {
    int _out_s98 = 0;
    ArrayList@meta(_out_s98);
    _out = new Object@Object(__cid=_out_s98, _arraylist=new Remove_int(self=self._arraylist, i=i));
    return;
  }
  /*ArrayList.sk:45*/
  
void removeb_Object_int (Object self, Object i, ref Object _out)/*ArrayList.sk:45*/
  {
    int _out_s96 = 0;
    ArrayList@meta(_out_s96);
    _out = new Object@Object(__cid=_out_s96, _arraylist=new Removeb_int(self=self._arraylist, i=i));
    return;
  }
  /*ArrayList.sk:82*/
  
void xform_get_ArrayList_int (ArrayList self, Object i, ref Object _out)/*ArrayList.sk:82*/
  {
    switch(self){/*ArrayList.sk:83*/
      case Arraylist:
      {
        _out = null;
        return;
      }
      case Add_object:
      {
        int _out_s45 = 0;
        ArrayList@meta(_out_s45);
        new Object@Object(__cid=_out_s45, _arraylist=self);
      }
      case Addb_object:
      {
        Object@Object _out_s47 = null;
        xform_size_ArrayList(self.self, _out_s47);
        Object@Object _pac_sc_s48 = null;
        if((_out_s47._int) == ((i._int) - (new Object@Object(__cid=-2, _int=1)._int)))/*ArrayList.sk:89*/
        {
          _pac_sc_s48 = self.e;
        }
        else
        {
          Object@Object _out_s50 = null;
          xform_get_ArrayList_int(self.self, i, _out_s50);
          _pac_sc_s48 = _out_s50;
        }
        _out = _pac_sc_s48;
        return;
      }
      case Getb_int:
      {
        int _out_s52 = 0;
        ArrayList@meta(_out_s52);
        new Object@Object(__cid=_out_s52, _arraylist=self);
      }
      case Setb_int_object:
      {
        Object@Object _pac_sc_s53 = null;
        if((i._int) == (self.i._int))/*ArrayList.sk:93*/
        {
          _pac_sc_s53 = self.e;
        }
        else
        {
          Object@Object _out_s55 = null;
          xform_get_ArrayList_int(self.self, i, _out_s55);
          _pac_sc_s53 = _out_s55;
        }
        _out = _pac_sc_s53;
        return;
      }
      case Get_int:
      {
        int _out_s57 = 0;
        ArrayList@meta(_out_s57);
        new Object@Object(__cid=_out_s57, _arraylist=self);
      }
      case Set_int_object:
      {
        int _out_s59 = 0;
        ArrayList@meta(_out_s59);
        new Object@Object(__cid=_out_s59, _arraylist=self);
      }
      case Removeb_int:
      {
        Object@Object _pac_sc_s60 = null;
        if((i._int) == (self.i._int))/*ArrayList.sk:98*/
        {
          _pac_sc_s60 = null;
        }
        else
        {
          Object@Object _out_s62 = null;
          xform_get_ArrayList_int(self.self, i, _out_s62);
          _pac_sc_s60 = _out_s62;
        }
        _out = _pac_sc_s60;
        return;
      }
      case Ensurecapacity_int:
      {
        int _out_s64 = 0;
        ArrayList@meta(_out_s64);
        new Object@Object(__cid=_out_s64, _arraylist=self);
      }
      case Size:
      {
        int _out_s66 = 0;
        ArrayList@meta(_out_s66);
        new Object@Object(__cid=_out_s66, _arraylist=self);
      }
      case Remove_int:
      {
        int _out_s68 = 0;
        ArrayList@meta(_out_s68);
        new Object@Object(__cid=_out_s68, _arraylist=self);
      }
    }
    _out = null;
    return;
  }
  /*ArrayList.sk:158*/
  
void xform_size_ArrayList (ArrayList self, ref Object _out)/*ArrayList.sk:158*/
  {
    switch(self){/*ArrayList.sk:159*/
      case Arraylist:
      {
        _out = new Object@Object(__cid=-2, _int=0);
        return;
      }
      case Add_object:
      {
        int _out_s70 = 0;
        ArrayList@meta(_out_s70);
        new Object@Object(__cid=_out_s70, _arraylist=self);
      }
      case Addb_object:
      {
        Object@Object _out_s72 = null;
        xform_size_ArrayList(self.self, _out_s72);
        _out = new Object@Object(__cid=-2, _int=(_out_s72._int) + (new Object@Object(__cid=-2, _int=1)._int));
        return;
      }
      case Getb_int:
      {
        int _out_s74 = 0;
        ArrayList@meta(_out_s74);
        new Object@Object(__cid=_out_s74, _arraylist=self);
      }
      case Setb_int_object:
      {
        Object@Object _out_s76 = null;
        xform_size_ArrayList(self.self, _out_s76);
        _out = _out_s76;
        return;
      }
      case Get_int:
      {
        int _out_s78 = 0;
        ArrayList@meta(_out_s78);
        new Object@Object(__cid=_out_s78, _arraylist=self);
      }
      case Set_int_object:
      {
        int _out_s80 = 0;
        ArrayList@meta(_out_s80);
        new Object@Object(__cid=_out_s80, _arraylist=self);
      }
      case Removeb_int:
      {
        Object@Object _out_s82 = null;
        xform_size_ArrayList(self.self, _out_s82);
        _out = new Object@Object(__cid=-2, _int=(_out_s82._int) - (new Object@Object(__cid=-2, _int=1)._int));
        return;
      }
      case Ensurecapacity_int:
      {
        int _out_s84 = 0;
        ArrayList@meta(_out_s84);
        new Object@Object(__cid=_out_s84, _arraylist=self);
      }
      case Size:
      {
        int _out_s86 = 0;
        ArrayList@meta(_out_s86);
        new Object@Object(__cid=_out_s86, _arraylist=self);
      }
      case Remove_int:
      {
        int _out_s88 = 0;
        ArrayList@meta(_out_s88);
        new Object@Object(__cid=_out_s88, _arraylist=self);
      }
    }
    _out = null;
    return;
  }
  /* END PACKAGE ArrayList*/
}
/* BEGIN PACKAGE CharSequence*/
package CharSequence{
  /* END PACKAGE CharSequence*/
}
/* BEGIN PACKAGE Bucketing*/
package Bucketing{
  /*Bucketing.sk:3*/
  
void Bucketing_Bucketing (Object self, ref Object _out)/*Bucketing.sk:3*/
  {
    self.size_Bucketing = new Object@Object(__cid=-2, _int=4);
    self.mod_Bucketing = new Object@Object(__cid=-2, _int=2);
    self.numberOfSlots_Bucketing = new Object@Object(__cid=-2, _int=2);
    Object@Object _out_s774 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s774);
    self.bucketHash_Bucketing = _out_s774;
    Object@Object _out_s776 = null;
    ArrayList_ArrayList@ArrayList(_out_s776);
    self.overflow_Bucketing = _out_s776;
    Object@Object _out_s778 = null;
    Wrap_Array_int@array(new Array_int@array(length=new Object@Object(__cid=-2, _int=2)), _out_s778);
    self.sizeBucket_Bucketing = _out_s778;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
    _out = self;
    return;
  }
  /*Bucketing.sk:190*/
  
void clear (Object self)/*Bucketing.sk:190*/
  {
    Object@Object _out_s768 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s768);
    self.bucketHash_Bucketing = _out_s768;
    Object@Object _out_s770 = null;
    ArrayList_ArrayList@ArrayList(_out_s770);
    self.overflow_Bucketing = _out_s770;
    Object@Object _out_s772 = null;
    Wrap_Array_int@array(new Array_int@array(length=new Object@Object(__cid=-2, _int=2)), _out_s772);
    self.sizeBucket_Bucketing = _out_s772;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
  }
  /*Bucketing.sk:126*/
  
void delete_K (Object self, Object key)/*Bucketing.sk:126*/
  {
    int _out_s600 = 0;
    Integer@meta(_out_s600);
    Object@Object _pac_sc_s601 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s600)._int))/*Bucketing.sk:127*/
    {
      Object@Object _out_s603 = null;
      hashCode@Integer(key, _out_s603);
      _pac_sc_s601 = _out_s603;
    }
    else
    {
      int _out_s605 = 0;
      Bucketing@meta(_out_s605);
      Object@Object _pac_sc_s606 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s605)._int))/*Bucketing.sk:127*/
      {
        Object@Object _out_s608 = null;
        hashCode@Object(key, _out_s608);
        _pac_sc_s606 = _out_s608;
      }
      else
      {
        int _out_s610 = 0;
        BucketingTest@meta(_out_s610);
        Object@Object _pac_sc_s611 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s610)._int))/*Bucketing.sk:127*/
        {
          Object@Object _out_s613 = null;
          hashCode@Object(key, _out_s613);
          _pac_sc_s611 = _out_s613;
        }
        else
        {
          int _out_s615 = 0;
          Pair@meta(_out_s615);
          Object@Object _pac_sc_s616 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s615)._int))/*Bucketing.sk:127*/
          {
            Object@Object _out_s618 = null;
            hashCode@Object(key, _out_s618);
            _pac_sc_s616 = _out_s618;
          }
          else
          {
            int _out_s620 = 0;
            String@meta(_out_s620);
            Object@Object _pac_sc_s621 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s620)._int))/*Bucketing.sk:127*/
            {
              Object@Object _out_s623 = null;
              hashCode@String(key, _out_s623);
              _pac_sc_s621 = _out_s623;
            }
            else
            {
              int _out_s625 = 0;
              Boolean@meta(_out_s625);
              Object@Object _pac_sc_s626 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s625)._int))/*Bucketing.sk:127*/
              {
                Object@Object _out_s628 = null;
                hashCode@Object(key, _out_s628);
                _pac_sc_s626 = _out_s628;
              }
              else
              {
                int _out_s630 = 0;
                ArrayList@meta(_out_s630);
                Object@Object _pac_sc_s631 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s630)._int))/*Bucketing.sk:127*/
                {
                  Object@Object _out_s633 = null;
                  hashCode@Object(key, _out_s633);
                  _pac_sc_s631 = _out_s633;
                }
                else
                {
                  int _out_s635 = 0;
                  Assert@meta(_out_s635);
                  Object@Object _pac_sc_s636 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s635)._int))/*Bucketing.sk:127*/
                  {
                    Object@Object _out_s638 = null;
                    hashCode@Object(key, _out_s638);
                    _pac_sc_s636 = _out_s638;
                  }
                  else
                  {
                    int _out_s640 = 0;
                    Character@meta(_out_s640);
                    Object@Object _pac_sc_s641 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s640)._int))/*Bucketing.sk:127*/
                    {
                      Object@Object _out_s643 = null;
                      hashCode@Object(key, _out_s643);
                      _pac_sc_s641 = _out_s643;
                    }
                    else
                    {
                      int _out_s645 = 0;
                      Object@meta(_out_s645);
                      Object@Object _pac_sc_s646 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s645)._int))/*Bucketing.sk:127*/
                      {
                        Object@Object _out_s648 = null;
                        hashCode@Object(key, _out_s648);
                        _pac_sc_s646 = _out_s648;
                      }
                      else
                      {
                        _pac_sc_s646 = null;
                      }
                      _pac_sc_s641 = _pac_sc_s646;
                    }
                    _pac_sc_s636 = _pac_sc_s641;
                  }
                  _pac_sc_s631 = _pac_sc_s636;
                }
                _pac_sc_s626 = _pac_sc_s631;
              }
              _pac_sc_s621 = _pac_sc_s626;
            }
            _pac_sc_s616 = _pac_sc_s621;
          }
          _pac_sc_s611 = _pac_sc_s616;
        }
        _pac_sc_s606 = _pac_sc_s611;
      }
      _pac_sc_s601 = _pac_sc_s606;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s601._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=0)._int))/*Bucketing.sk:128*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (-(new Object@Object(__cid=-2, _int=1)._int)));
    }
    self.index_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int));
    Object@Object flag = new Object@Object(__cid=-4, _bit=0);
    Object@Object g3 = self.index_Bucketing;
    Object@Object add = new Object@Object(__cid=-2, _int=(self.index_Bucketing._int) + (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]));
    Object@Object i = g3;
    bit __sa6 = (g3._int) < (add._int);
    while(__sa6)
    {
      Object@Object tmp = self.bucketHash_Bucketing._array_object.A[i._int];
      Object@Object tmp_key = tmp.key_Pair;
      int b_s650 = 0;
      Integer@meta(b_s650);
      Object@Object _pac_sc_s651 = null;
      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s650)._int))/*Bucketing.sk:140*/
      {
        Object@Object b_s653 = null;
        equals_Object@Integer(tmp_key, key, b_s653);
        _pac_sc_s651 = b_s653;
      }
      else
      {
        int b_s655 = 0;
        Bucketing@meta(b_s655);
        Object@Object _pac_sc_s656 = null;
        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s655)._int))/*Bucketing.sk:140*/
        {
          Object@Object b_s658 = null;
          equals_Object@Object(tmp_key, key, b_s658);
          _pac_sc_s656 = b_s658;
        }
        else
        {
          int b_s660 = 0;
          BucketingTest@meta(b_s660);
          Object@Object _pac_sc_s661 = null;
          if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s660)._int))/*Bucketing.sk:140*/
          {
            Object@Object b_s663 = null;
            equals_Object@Object(tmp_key, key, b_s663);
            _pac_sc_s661 = b_s663;
          }
          else
          {
            int b_s665 = 0;
            Pair@meta(b_s665);
            Object@Object _pac_sc_s666 = null;
            if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s665)._int))/*Bucketing.sk:140*/
            {
              Object@Object b_s668 = null;
              equals_Object@Object(tmp_key, key, b_s668);
              _pac_sc_s666 = b_s668;
            }
            else
            {
              int b_s670 = 0;
              String@meta(b_s670);
              Object@Object _pac_sc_s671 = null;
              if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s670)._int))/*Bucketing.sk:140*/
              {
                Object@Object b_s673 = null;
                equals_Object@String(tmp_key, key, b_s673);
                _pac_sc_s671 = b_s673;
              }
              else
              {
                int b_s675 = 0;
                Boolean@meta(b_s675);
                Object@Object _pac_sc_s676 = null;
                if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s675)._int))/*Bucketing.sk:140*/
                {
                  Object@Object b_s678 = null;
                  equals_Object@Object(tmp_key, key, b_s678);
                  _pac_sc_s676 = b_s678;
                }
                else
                {
                  int b_s680 = 0;
                  ArrayList@meta(b_s680);
                  Object@Object _pac_sc_s681 = null;
                  if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s680)._int))/*Bucketing.sk:140*/
                  {
                    Object@Object b_s683 = null;
                    equals_Object@Object(tmp_key, key, b_s683);
                    _pac_sc_s681 = b_s683;
                  }
                  else
                  {
                    int b_s685 = 0;
                    Assert@meta(b_s685);
                    Object@Object _pac_sc_s686 = null;
                    if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s685)._int))/*Bucketing.sk:140*/
                    {
                      Object@Object b_s688 = null;
                      equals_Object@Object(tmp_key, key, b_s688);
                      _pac_sc_s686 = b_s688;
                    }
                    else
                    {
                      int b_s690 = 0;
                      Character@meta(b_s690);
                      Object@Object _pac_sc_s691 = null;
                      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s690)._int))/*Bucketing.sk:140*/
                      {
                        Object@Object b_s693 = null;
                        equals_Object@Character(tmp_key, key, b_s693);
                        _pac_sc_s691 = b_s693;
                      }
                      else
                      {
                        int b_s695 = 0;
                        Object@meta(b_s695);
                        Object@Object _pac_sc_s696 = null;
                        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s695)._int))/*Bucketing.sk:140*/
                        {
                          Object@Object b_s698 = null;
                          equals_Object@Object(tmp_key, key, b_s698);
                          _pac_sc_s696 = b_s698;
                        }
                        else
                        {
                          _pac_sc_s696 = null;
                        }
                        _pac_sc_s691 = _pac_sc_s696;
                      }
                      _pac_sc_s686 = _pac_sc_s691;
                    }
                    _pac_sc_s681 = _pac_sc_s686;
                  }
                  _pac_sc_s676 = _pac_sc_s681;
                }
                _pac_sc_s671 = _pac_sc_s676;
              }
              _pac_sc_s666 = _pac_sc_s671;
            }
            _pac_sc_s661 = _pac_sc_s666;
          }
          _pac_sc_s656 = _pac_sc_s661;
        }
        _pac_sc_s651 = _pac_sc_s656;
      }
      if(_pac_sc_s651._bit)/*Bucketing.sk:141*/
      {
        flag = new Object@Object(__cid=-4, _bit=1);
      }
      else
      {
        if(flag._bit)/*Bucketing.sk:145*/
        {
          int _out_s700 = 0;
          Pair@meta(_out_s700);
          Object@Object _out_s702 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s700), self.bucketHash_Bucketing._array_object.A[i._int].key_Pair, self.bucketHash_Bucketing._array_object.A[i._int].value_Pair, _out_s702)//{};
          self.bucketHash_Bucketing._array_object.A[(i._int) - (new Object@Object(__cid=-2, _int=0)._int)] = _out_s702;
        }
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa6 = (i._int) < (add._int);
    }
    if(flag._bit)/*Bucketing.sk:150*/
    {
      self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) - 1);
      self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int] = (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) - 1;
    }
    else
    {
      if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) == (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:154*/
      {
        Object@Object sz_s704 = null;
        xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s704);
        Object@Object g5 = self.index_Bucketing;
        Object@Object i_0 = new Object@Object(__cid=-2, _int=2);
        bit __sa7 = (i_0._int) < (g5._int);
        while(__sa7)
        {
          Object@Object tmp_s706 = null;
          xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s706);
          Object@Object tmp_key_0 = tmp_s706.key_Pair;
          int b_s708 = 0;
          Integer@meta(b_s708);
          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s708)._int))/*Bucketing.sk:163*/
          {
            Object@Object b_s711 = null;
            equals_Object@Integer(tmp_key_0, key, b_s711);
          }
          else
          {
            int b_s713 = 0;
            Bucketing@meta(b_s713);
            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s713)._int))/*Bucketing.sk:163*/
            {
              Object@Object b_s716 = null;
              equals_Object@Object(tmp_key_0, key, b_s716);
            }
            else
            {
              int b_s718 = 0;
              BucketingTest@meta(b_s718);
              if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s718)._int))/*Bucketing.sk:163*/
              {
                Object@Object b_s721 = null;
                equals_Object@Object(tmp_key_0, key, b_s721);
              }
              else
              {
                int b_s723 = 0;
                Pair@meta(b_s723);
                if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s723)._int))/*Bucketing.sk:163*/
                {
                  Object@Object b_s726 = null;
                  equals_Object@Object(tmp_key_0, key, b_s726);
                }
                else
                {
                  int b_s728 = 0;
                  String@meta(b_s728);
                  if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s728)._int))/*Bucketing.sk:163*/
                  {
                    Object@Object b_s731 = null;
                    equals_Object@String(tmp_key_0, key, b_s731);
                  }
                  else
                  {
                    int b_s733 = 0;
                    Boolean@meta(b_s733);
                    if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s733)._int))/*Bucketing.sk:163*/
                    {
                      Object@Object b_s736 = null;
                      equals_Object@Object(tmp_key_0, key, b_s736);
                    }
                    else
                    {
                      int b_s738 = 0;
                      ArrayList@meta(b_s738);
                      if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s738)._int))/*Bucketing.sk:163*/
                      {
                        Object@Object b_s741 = null;
                        equals_Object@Object(tmp_key_0, key, b_s741);
                      }
                      else
                      {
                        int b_s743 = 0;
                        Assert@meta(b_s743);
                        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s743)._int))/*Bucketing.sk:163*/
                        {
                          Object@Object b_s746 = null;
                          equals_Object@Object(tmp_key_0, key, b_s746);
                        }
                        else
                        {
                          int b_s748 = 0;
                          Character@meta(b_s748);
                          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s748)._int))/*Bucketing.sk:163*/
                          {
                            Object@Object b_s751 = null;
                            equals_Object@Character(tmp_key_0, key, b_s751);
                          }
                          else
                          {
                            int b_s753 = 0;
                            Object@meta(b_s753);
                            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s753)._int))/*Bucketing.sk:163*/
                            {
                              Object@Object b_s756 = null;
                              equals_Object@Object(tmp_key_0, key, b_s756);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if(new Object@Object(__cid=-(4), _bit=tmp_key_0 == key)._bit)/*Bucketing.sk:164*/
          {
            int _out_s758 = 0;
            ArrayList@meta(_out_s758);
            if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s758)._int))/*Bucketing.sk:166*/
            {
              Object@Object _out_s761 = null;
              remove_Object_int@ArrayList(self.overflow_Bucketing, i_0, _out_s761);
            }
            int _out_s763 = 0;
            ArrayList@meta(_out_s763);
            Object@Object _pac_sc_s764 = null;
            if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s763)._int))/*Bucketing.sk:166*/
            {
              Object@Object _out_s766 = null;
              removeb_Object_int@ArrayList(self.overflow_Bucketing, i_0, _out_s766);
              _pac_sc_s764 = _out_s766;
            }
            else
            {
              _pac_sc_s764 = null;
            }
            self.overflow_Bucketing = _pac_sc_s764;
            self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) - 1);
            return;
          }
          i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
          __sa7 = (i_0._int) < (g5._int);
        }
      }
    }
  }
  /*Bucketing.sk:85*/
  
void get_K (Object self, Object key, ref Object _out)/*Bucketing.sk:85*/
  {
    if(key == (null))/*Bucketing.sk:86*/
    {
      _out = null;
      return;
    }
    int _out_s332 = 0;
    Integer@meta(_out_s332);
    Object@Object _pac_sc_s333 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s332)._int))/*Bucketing.sk:87*/
    {
      Object@Object _out_s335 = null;
      hashCode@Integer(key, _out_s335);
      _pac_sc_s333 = _out_s335;
    }
    else
    {
      int _out_s337 = 0;
      Bucketing@meta(_out_s337);
      Object@Object _pac_sc_s338 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s337)._int))/*Bucketing.sk:87*/
      {
        Object@Object _out_s340 = null;
        hashCode@Object(key, _out_s340);
        _pac_sc_s338 = _out_s340;
      }
      else
      {
        int _out_s342 = 0;
        BucketingTest@meta(_out_s342);
        Object@Object _pac_sc_s343 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s342)._int))/*Bucketing.sk:87*/
        {
          Object@Object _out_s345 = null;
          hashCode@Object(key, _out_s345);
          _pac_sc_s343 = _out_s345;
        }
        else
        {
          int _out_s347 = 0;
          Pair@meta(_out_s347);
          Object@Object _pac_sc_s348 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s347)._int))/*Bucketing.sk:87*/
          {
            Object@Object _out_s350 = null;
            hashCode@Object(key, _out_s350);
            _pac_sc_s348 = _out_s350;
          }
          else
          {
            int _out_s352 = 0;
            String@meta(_out_s352);
            Object@Object _pac_sc_s353 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s352)._int))/*Bucketing.sk:87*/
            {
              Object@Object _out_s355 = null;
              hashCode@String(key, _out_s355);
              _pac_sc_s353 = _out_s355;
            }
            else
            {
              int _out_s357 = 0;
              Boolean@meta(_out_s357);
              Object@Object _pac_sc_s358 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s357)._int))/*Bucketing.sk:87*/
              {
                Object@Object _out_s360 = null;
                hashCode@Object(key, _out_s360);
                _pac_sc_s358 = _out_s360;
              }
              else
              {
                int _out_s362 = 0;
                ArrayList@meta(_out_s362);
                Object@Object _pac_sc_s363 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s362)._int))/*Bucketing.sk:87*/
                {
                  Object@Object _out_s365 = null;
                  hashCode@Object(key, _out_s365);
                  _pac_sc_s363 = _out_s365;
                }
                else
                {
                  int _out_s367 = 0;
                  Assert@meta(_out_s367);
                  Object@Object _pac_sc_s368 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s367)._int))/*Bucketing.sk:87*/
                  {
                    Object@Object _out_s370 = null;
                    hashCode@Object(key, _out_s370);
                    _pac_sc_s368 = _out_s370;
                  }
                  else
                  {
                    int _out_s372 = 0;
                    Character@meta(_out_s372);
                    Object@Object _pac_sc_s373 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s372)._int))/*Bucketing.sk:87*/
                    {
                      Object@Object _out_s375 = null;
                      hashCode@Object(key, _out_s375);
                      _pac_sc_s373 = _out_s375;
                    }
                    else
                    {
                      int _out_s377 = 0;
                      Object@meta(_out_s377);
                      Object@Object _pac_sc_s378 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s377)._int))/*Bucketing.sk:87*/
                      {
                        Object@Object _out_s380 = null;
                        hashCode@Object(key, _out_s380);
                        _pac_sc_s378 = _out_s380;
                      }
                      else
                      {
                        _pac_sc_s378 = null;
                      }
                      _pac_sc_s373 = _pac_sc_s378;
                    }
                    _pac_sc_s368 = _pac_sc_s373;
                  }
                  _pac_sc_s363 = _pac_sc_s368;
                }
                _pac_sc_s358 = _pac_sc_s363;
              }
              _pac_sc_s353 = _pac_sc_s358;
            }
            _pac_sc_s348 = _pac_sc_s353;
          }
          _pac_sc_s343 = _pac_sc_s348;
        }
        _pac_sc_s338 = _pac_sc_s343;
      }
      _pac_sc_s333 = _pac_sc_s338;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s333._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=1)._int))/*Bucketing.sk:88*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (new Object@Object(__cid=-2, _int=0)._int));
    }
    self.index_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int));
    Object@Object g3 = self.index_Bucketing;
    Object@Object add = new Object@Object(__cid=-2, _int=(self.index_Bucketing._int) + (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]));
    Object@Object i = g3;
    bit __sa4 = (g3._int) < (add._int);
    while(__sa4)
    {
      Object@Object tmp = self.bucketHash_Bucketing._array_object.A[i._int];
      Object@Object tmp_key = tmp.key_Pair;
      int b_s382 = 0;
      Integer@meta(b_s382);
      Object@Object _pac_sc_s383 = null;
      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s382)._int))/*Bucketing.sk:101*/
      {
        Object@Object b_s385 = null;
        equals_Object@Integer(tmp_key, key, b_s385);
        _pac_sc_s383 = b_s385;
      }
      else
      {
        int b_s387 = 0;
        Bucketing@meta(b_s387);
        Object@Object _pac_sc_s388 = null;
        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s387)._int))/*Bucketing.sk:101*/
        {
          Object@Object b_s390 = null;
          equals_Object@Object(tmp_key, key, b_s390);
          _pac_sc_s388 = b_s390;
        }
        else
        {
          int b_s392 = 0;
          BucketingTest@meta(b_s392);
          Object@Object _pac_sc_s393 = null;
          if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s392)._int))/*Bucketing.sk:101*/
          {
            Object@Object b_s395 = null;
            equals_Object@Object(tmp_key, key, b_s395);
            _pac_sc_s393 = b_s395;
          }
          else
          {
            int b_s397 = 0;
            Pair@meta(b_s397);
            Object@Object _pac_sc_s398 = null;
            if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s397)._int))/*Bucketing.sk:101*/
            {
              Object@Object b_s400 = null;
              equals_Object@Object(tmp_key, key, b_s400);
              _pac_sc_s398 = b_s400;
            }
            else
            {
              int b_s402 = 0;
              String@meta(b_s402);
              Object@Object _pac_sc_s403 = null;
              if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s402)._int))/*Bucketing.sk:101*/
              {
                Object@Object b_s405 = null;
                equals_Object@String(tmp_key, key, b_s405);
                _pac_sc_s403 = b_s405;
              }
              else
              {
                int b_s407 = 0;
                Boolean@meta(b_s407);
                Object@Object _pac_sc_s408 = null;
                if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s407)._int))/*Bucketing.sk:101*/
                {
                  Object@Object b_s410 = null;
                  equals_Object@Object(tmp_key, key, b_s410);
                  _pac_sc_s408 = b_s410;
                }
                else
                {
                  int b_s412 = 0;
                  ArrayList@meta(b_s412);
                  Object@Object _pac_sc_s413 = null;
                  if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s412)._int))/*Bucketing.sk:101*/
                  {
                    Object@Object b_s415 = null;
                    equals_Object@Object(tmp_key, key, b_s415);
                    _pac_sc_s413 = b_s415;
                  }
                  else
                  {
                    int b_s417 = 0;
                    Assert@meta(b_s417);
                    Object@Object _pac_sc_s418 = null;
                    if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s417)._int))/*Bucketing.sk:101*/
                    {
                      Object@Object b_s420 = null;
                      equals_Object@Object(tmp_key, key, b_s420);
                      _pac_sc_s418 = b_s420;
                    }
                    else
                    {
                      int b_s422 = 0;
                      Character@meta(b_s422);
                      Object@Object _pac_sc_s423 = null;
                      if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s422)._int))/*Bucketing.sk:101*/
                      {
                        Object@Object b_s425 = null;
                        equals_Object@Character(tmp_key, key, b_s425);
                        _pac_sc_s423 = b_s425;
                      }
                      else
                      {
                        int b_s427 = 0;
                        Object@meta(b_s427);
                        Object@Object _pac_sc_s428 = null;
                        if((tmp_key.__cid) == (new Object@Object(__cid=-2, _int=b_s427)._int))/*Bucketing.sk:101*/
                        {
                          Object@Object b_s430 = null;
                          equals_Object@Object(tmp_key, key, b_s430);
                          _pac_sc_s428 = b_s430;
                        }
                        else
                        {
                          _pac_sc_s428 = null;
                        }
                        _pac_sc_s423 = _pac_sc_s428;
                      }
                      _pac_sc_s418 = _pac_sc_s423;
                    }
                    _pac_sc_s413 = _pac_sc_s418;
                  }
                  _pac_sc_s408 = _pac_sc_s413;
                }
                _pac_sc_s403 = _pac_sc_s408;
              }
              _pac_sc_s398 = _pac_sc_s403;
            }
            _pac_sc_s393 = _pac_sc_s398;
          }
          _pac_sc_s388 = _pac_sc_s393;
        }
        _pac_sc_s383 = _pac_sc_s388;
      }
      if(_pac_sc_s383._bit)/*Bucketing.sk:102*/
      {
        _out = tmp.value_Pair;
        return;
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa4 = (i._int) < (add._int);
    }
    if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) == (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:107*/
    {
      Object@Object sz_s432 = null;
      xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s432);
      Object@Object g5 = self.numberOfSlots_Bucketing;
      Object@Object i_0 = new Object@Object(__cid=-2, _int=4);
      bit __sa5 = (i_0._int) < (g5._int);
      while(__sa5)
      {
        Object@Object tmp_s434 = null;
        xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s434);
        Object@Object tmp_key_0 = tmp_s434.key_Pair;
        int b_s436 = 0;
        Integer@meta(b_s436);
        Object@Object _pac_sc_s437 = null;
        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s436)._int))/*Bucketing.sk:116*/
        {
          Object@Object b_s439 = null;
          equals_Object@Integer(tmp_key_0, key, b_s439);
          _pac_sc_s437 = b_s439;
        }
        else
        {
          int b_s441 = 0;
          Bucketing@meta(b_s441);
          Object@Object _pac_sc_s442 = null;
          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s441)._int))/*Bucketing.sk:116*/
          {
            Object@Object b_s444 = null;
            equals_Object@Object(tmp_key_0, key, b_s444);
            _pac_sc_s442 = b_s444;
          }
          else
          {
            int b_s446 = 0;
            BucketingTest@meta(b_s446);
            Object@Object _pac_sc_s447 = null;
            if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s446)._int))/*Bucketing.sk:116*/
            {
              Object@Object b_s449 = null;
              equals_Object@Object(tmp_key_0, key, b_s449);
              _pac_sc_s447 = b_s449;
            }
            else
            {
              int b_s451 = 0;
              Pair@meta(b_s451);
              Object@Object _pac_sc_s452 = null;
              if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s451)._int))/*Bucketing.sk:116*/
              {
                Object@Object b_s454 = null;
                equals_Object@Object(tmp_key_0, key, b_s454);
                _pac_sc_s452 = b_s454;
              }
              else
              {
                int b_s456 = 0;
                String@meta(b_s456);
                Object@Object _pac_sc_s457 = null;
                if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s456)._int))/*Bucketing.sk:116*/
                {
                  Object@Object b_s459 = null;
                  equals_Object@String(tmp_key_0, key, b_s459);
                  _pac_sc_s457 = b_s459;
                }
                else
                {
                  int b_s461 = 0;
                  Boolean@meta(b_s461);
                  Object@Object _pac_sc_s462 = null;
                  if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s461)._int))/*Bucketing.sk:116*/
                  {
                    Object@Object b_s464 = null;
                    equals_Object@Object(tmp_key_0, key, b_s464);
                    _pac_sc_s462 = b_s464;
                  }
                  else
                  {
                    int b_s466 = 0;
                    ArrayList@meta(b_s466);
                    Object@Object _pac_sc_s467 = null;
                    if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s466)._int))/*Bucketing.sk:116*/
                    {
                      Object@Object b_s469 = null;
                      equals_Object@Object(tmp_key_0, key, b_s469);
                      _pac_sc_s467 = b_s469;
                    }
                    else
                    {
                      int b_s471 = 0;
                      Assert@meta(b_s471);
                      Object@Object _pac_sc_s472 = null;
                      if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s471)._int))/*Bucketing.sk:116*/
                      {
                        Object@Object b_s474 = null;
                        equals_Object@Object(tmp_key_0, key, b_s474);
                        _pac_sc_s472 = b_s474;
                      }
                      else
                      {
                        int b_s476 = 0;
                        Character@meta(b_s476);
                        Object@Object _pac_sc_s477 = null;
                        if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s476)._int))/*Bucketing.sk:116*/
                        {
                          Object@Object b_s479 = null;
                          equals_Object@Character(tmp_key_0, key, b_s479);
                          _pac_sc_s477 = b_s479;
                        }
                        else
                        {
                          int b_s481 = 0;
                          Object@meta(b_s481);
                          Object@Object _pac_sc_s482 = null;
                          if((tmp_key_0.__cid) == (new Object@Object(__cid=-2, _int=b_s481)._int))/*Bucketing.sk:116*/
                          {
                            Object@Object b_s484 = null;
                            equals_Object@Object(tmp_key_0, key, b_s484);
                            _pac_sc_s482 = b_s484;
                          }
                          else
                          {
                            _pac_sc_s482 = null;
                          }
                          _pac_sc_s477 = _pac_sc_s482;
                        }
                        _pac_sc_s472 = _pac_sc_s477;
                      }
                      _pac_sc_s467 = _pac_sc_s472;
                    }
                    _pac_sc_s462 = _pac_sc_s467;
                  }
                  _pac_sc_s457 = _pac_sc_s462;
                }
                _pac_sc_s452 = _pac_sc_s457;
              }
              _pac_sc_s447 = _pac_sc_s452;
            }
            _pac_sc_s442 = _pac_sc_s447;
          }
          _pac_sc_s437 = _pac_sc_s442;
        }
        if(_pac_sc_s437._bit)/*Bucketing.sk:117*/
        {
          _out = tmp_s434.value_Pair;
          return;
        }
        i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
        __sa5 = (i_0._int) < (g5._int);
      }
    }
    _out = null;
    return;
  }
  /*Bucketing.sk:64*/
  
void put_K_V (Object self, Object key, Object value)/*Bucketing.sk:64*/
  {
    delete_K@Bucketing(self, key);
    int _out_s486 = 0;
    Integer@meta(_out_s486);
    Object@Object _pac_sc_s487 = null;
    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s486)._int))/*Bucketing.sk:66*/
    {
      Object@Object _out_s489 = null;
      hashCode@Integer(key, _out_s489);
      _pac_sc_s487 = _out_s489;
    }
    else
    {
      int _out_s491 = 0;
      Bucketing@meta(_out_s491);
      Object@Object _pac_sc_s492 = null;
      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s491)._int))/*Bucketing.sk:66*/
      {
        Object@Object _out_s494 = null;
        hashCode@Object(key, _out_s494);
        _pac_sc_s492 = _out_s494;
      }
      else
      {
        int _out_s496 = 0;
        BucketingTest@meta(_out_s496);
        Object@Object _pac_sc_s497 = null;
        if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s496)._int))/*Bucketing.sk:66*/
        {
          Object@Object _out_s499 = null;
          hashCode@Object(key, _out_s499);
          _pac_sc_s497 = _out_s499;
        }
        else
        {
          int _out_s501 = 0;
          Pair@meta(_out_s501);
          Object@Object _pac_sc_s502 = null;
          if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s501)._int))/*Bucketing.sk:66*/
          {
            Object@Object _out_s504 = null;
            hashCode@Object(key, _out_s504);
            _pac_sc_s502 = _out_s504;
          }
          else
          {
            int _out_s506 = 0;
            String@meta(_out_s506);
            Object@Object _pac_sc_s507 = null;
            if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s506)._int))/*Bucketing.sk:66*/
            {
              Object@Object _out_s509 = null;
              hashCode@String(key, _out_s509);
              _pac_sc_s507 = _out_s509;
            }
            else
            {
              int _out_s511 = 0;
              Boolean@meta(_out_s511);
              Object@Object _pac_sc_s512 = null;
              if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s511)._int))/*Bucketing.sk:66*/
              {
                Object@Object _out_s514 = null;
                hashCode@Object(key, _out_s514);
                _pac_sc_s512 = _out_s514;
              }
              else
              {
                int _out_s516 = 0;
                ArrayList@meta(_out_s516);
                Object@Object _pac_sc_s517 = null;
                if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s516)._int))/*Bucketing.sk:66*/
                {
                  Object@Object _out_s519 = null;
                  hashCode@Object(key, _out_s519);
                  _pac_sc_s517 = _out_s519;
                }
                else
                {
                  int _out_s521 = 0;
                  Assert@meta(_out_s521);
                  Object@Object _pac_sc_s522 = null;
                  if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s521)._int))/*Bucketing.sk:66*/
                  {
                    Object@Object _out_s524 = null;
                    hashCode@Object(key, _out_s524);
                    _pac_sc_s522 = _out_s524;
                  }
                  else
                  {
                    int _out_s526 = 0;
                    Character@meta(_out_s526);
                    Object@Object _pac_sc_s527 = null;
                    if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s526)._int))/*Bucketing.sk:66*/
                    {
                      Object@Object _out_s529 = null;
                      hashCode@Object(key, _out_s529);
                      _pac_sc_s527 = _out_s529;
                    }
                    else
                    {
                      int _out_s531 = 0;
                      Object@meta(_out_s531);
                      Object@Object _pac_sc_s532 = null;
                      if((key.__cid) == (new Object@Object(__cid=-2, _int=_out_s531)._int))/*Bucketing.sk:66*/
                      {
                        Object@Object _out_s534 = null;
                        hashCode@Object(key, _out_s534);
                        _pac_sc_s532 = _out_s534;
                      }
                      else
                      {
                        _pac_sc_s532 = null;
                      }
                      _pac_sc_s527 = _pac_sc_s532;
                    }
                    _pac_sc_s522 = _pac_sc_s527;
                  }
                  _pac_sc_s517 = _pac_sc_s522;
                }
                _pac_sc_s512 = _pac_sc_s517;
              }
              _pac_sc_s507 = _pac_sc_s512;
            }
            _pac_sc_s502 = _pac_sc_s507;
          }
          _pac_sc_s497 = _pac_sc_s502;
        }
        _pac_sc_s492 = _pac_sc_s497;
      }
      _pac_sc_s487 = _pac_sc_s492;
    }
    self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(_pac_sc_s487._int) % (self.mod_Bucketing._int));
    if((self.integerKey_Bucketing._int) < (new Object@Object(__cid=-2, _int=1)._int))/*Bucketing.sk:67*/
    {
      self.integerKey_Bucketing = new Object@Object(__cid=-2, _int=(self.integerKey_Bucketing._int) * (new Object@Object(__cid=-2, _int=126)._int));
    }
    if((self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) != (self.numberOfSlots_Bucketing._int))/*Bucketing.sk:72*/
    {
      Object@Object index = new Object@Object(__cid=-2, _int=((self.numberOfSlots_Bucketing._int) * (self.integerKey_Bucketing._int)) + (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]));
      int _out_s536 = 0;
      Pair@meta(_out_s536);
      Object@Object _out_s538 = null;
      Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s536), key, value, _out_s538)//{};
      self.bucketHash_Bucketing._array_object.A[index._int] = _out_s538;
      self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int] = (self.sizeBucket_Bucketing._array_int.A[self.integerKey_Bucketing._int]) + 1;
    }
    else
    {
      int _out_s540 = 0;
      ArrayList@meta(_out_s540);
      if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s540)._int))/*Bucketing.sk:78*/
      {
        int _out_s543 = 0;
        Pair@meta(_out_s543);
        Object@Object _out_s545 = null;
        Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s543), key, value, _out_s545)//{};
        Object@Object _out_s547 = null;
        add_Object_Object@ArrayList(self.overflow_Bucketing, _out_s545, _out_s547)//{};
      }
      int _out_s549 = 0;
      ArrayList@meta(_out_s549);
      Object@Object _pac_sc_s550 = null;
      if((self.overflow_Bucketing.__cid) == (new Object@Object(__cid=-2, _int=_out_s549)._int))/*Bucketing.sk:78*/
      {
        int _out_s552 = 0;
        Pair@meta(_out_s552);
        Object@Object _out_s554 = null;
        Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s552), key, value, _out_s554)//{};
        Object@Object _out_s556 = null;
        addb_Object_Object@ArrayList(self.overflow_Bucketing, _out_s554, _out_s556)//{};
        _pac_sc_s550 = _out_s556;
      }
      else
      {
        _pac_sc_s550 = null;
      }
      self.overflow_Bucketing = _pac_sc_s550;
    }
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfElements_Bucketing._int) + 1);
    self.rehash_Bucketing = new Object@Object(__cid=-6, _double=(((double)self.numberOfElements_Bucketing._int)) / (((double)self.size_Bucketing._int)));
    if((self.rehash_Bucketing._double) > (new Object@Object(__cid=-6, _double=0.75)._double))/*Bucketing.sk:82*/
    {
      rehashng@Bucketing(self);
    }
  }
  /*Bucketing.sk:18*/
  
void rehashng (Object self)/*Bucketing.sk:18*/
  {
    Object@Object temp1_s558 = null;
    ArrayList_ArrayList@ArrayList(temp1_s558);
    Object@Object temp1;
    temp1 = temp1_s558;
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa0 = (i._int) < (new Object@Object(__cid=-2, _int=2)._int);
    while(__sa0)
    {
      Object@Object szbkt = new Object@Object(__cid=-2, _int=self.sizeBucket_Bucketing._array_int.A[i._int]);
      Object@Object j;
      j = new Object@Object(__cid=-2, _int=0);
      bit __sa1 = (j._int) < (szbkt._int);
      while(__sa1)
      {
        Object@Object index = new Object@Object(__cid=-2, _int=((i._int) * (self.numberOfSlots_Bucketing._int)) + (j._int));
        int _out_s560 = 0;
        ArrayList@meta(_out_s560);
        if((temp1.__cid) == (new Object@Object(__cid=-2, _int=_out_s560)._int))/*Bucketing.sk:27*/
        {
          int _out_s563 = 0;
          Pair@meta(_out_s563);
          Object@Object _out_s565 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=_out_s563), self.bucketHash_Bucketing._array_object.A[index._int].key_Pair, self.bucketHash_Bucketing._array_object.A[index._int].value_Pair, _out_s565)//{};
          Object@Object _out_s567 = null;
          add_Object_Object@ArrayList(temp1, _out_s565, _out_s567)//{};
        }
        int temp1_s569 = 0;
        ArrayList@meta(temp1_s569);
        Object@Object _pac_sc_s570 = null;
        if((temp1.__cid) == (new Object@Object(__cid=-2, _int=temp1_s569)._int))/*Bucketing.sk:27*/
        {
          int temp1_s572 = 0;
          Pair@meta(temp1_s572);
          Object@Object temp1_s574 = null;
          Pair_Pair_K_V@Pair(new Object@Object(__cid=temp1_s572), self.bucketHash_Bucketing._array_object.A[index._int].key_Pair, self.bucketHash_Bucketing._array_object.A[index._int].value_Pair, temp1_s574)//{};
          Object@Object temp1_s576 = null;
          addb_Object_Object@ArrayList(temp1, temp1_s574, temp1_s576)//{};
          _pac_sc_s570 = temp1_s576;
        }
        else
        {
          _pac_sc_s570 = null;
        }
        temp1 = _pac_sc_s570;
        j = new Object@Object(__cid=-2, _int=(j._int) + 1);
        __sa1 = (j._int) < (szbkt._int);
      }
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa0 = (i._int) < (new Object@Object(__cid=-2, _int=2)._int);
    }
    Object@Object sz_s578 = null;
    xform_size_ArrayList@ArrayList(self.overflow_Bucketing._arraylist, sz_s578);
    Object@Object i_0 = new Object@Object(__cid=-2, _int=0);
    bit __sa2 = (i_0._int) < (sz_s578._int);
    while(__sa2)
    {
      Object@Object tmp_s580 = null;
      xform_get_ArrayList_int@ArrayList(self.overflow_Bucketing._arraylist, i_0, tmp_s580);
      int _out_s582 = 0;
      ArrayList@meta(_out_s582);
      if((temp1.__cid) == (new Object@Object(__cid=-2, _int=_out_s582)._int))/*Bucketing.sk:37*/
      {
        Object@Object _out_s585 = null;
        add_Object_Object@ArrayList(temp1, tmp_s580, _out_s585);
      }
      int temp1_s587 = 0;
      ArrayList@meta(temp1_s587);
      Object@Object _pac_sc_s588 = null;
      if((temp1.__cid) == (new Object@Object(__cid=-2, _int=temp1_s587)._int))/*Bucketing.sk:37*/
      {
        Object@Object temp1_s590 = null;
        addb_Object_Object@ArrayList(temp1, tmp_s580, temp1_s590);
        _pac_sc_s588 = temp1_s590;
      }
      else
      {
        _pac_sc_s588 = null;
      }
      temp1 = _pac_sc_s588;
      i_0 = new Object@Object(__cid=-2, _int=(i_0._int) + 1);
      __sa2 = (i_0._int) < (sz_s578._int);
    }
    self.size_Bucketing = new Object@Object(__cid=-2, _int=(self.size_Bucketing._int) * (new Object@Object(__cid=-2, _int=4)._int));
    self.numberOfSlots_Bucketing = new Object@Object(__cid=-2, _int=(self.numberOfSlots_Bucketing._int) * (new Object@Object(__cid=-2, _int=2)._int));
    self.mod_Bucketing = new Object@Object(__cid=-2, _int=(self.mod_Bucketing._int) * (new Object@Object(__cid=-2, _int=2)._int));
    Object@Object _out_s592 = null;
    Wrap_Array_Object@array(new Array_Object@array(length=self.size_Bucketing), _out_s592);
    self.bucketHash_Bucketing = _out_s592;
    Object@Object _out_s594 = null;
    Wrap_Array_int@array(new Array_int@array(length=self.mod_Bucketing), _out_s594);
    self.sizeBucket_Bucketing = _out_s594;
    self.numberOfElements_Bucketing = new Object@Object(__cid=-2, _int=0);
    Object@Object sz2_s596 = null;
    xform_size_ArrayList@ArrayList(temp1._arraylist, sz2_s596);
    Object@Object i_1 = new Object@Object(__cid=-2, _int=0);
    bit __sa3 = (i_1._int) < (sz2_s596._int);
    while(__sa3)
    {
      Object@Object tmp_s598 = null;
      xform_get_ArrayList_int@ArrayList(temp1._arraylist, i_1, tmp_s598);
      Object@Object key;
      key = tmp_s598.key_Pair;
      Object@Object val;
      val = tmp_s598.value_Pair;
      put_K_V@Bucketing(self, key, val);
      i_1 = new Object@Object(__cid=-2, _int=(i_1._int) + 1);
      __sa3 = (i_1._int) < (sz2_s596._int);
    }
  }
  /*Bucketing.sk:186*/
  
void size (Object self, ref Object _out)/*Bucketing.sk:186*/
  {
    _out = self.numberOfElements_Bucketing;
    return;
  }
  /* END PACKAGE Bucketing*/
}
/* BEGIN PACKAGE String*/
package String{
  /*String.sk:7*/
  
void String_String_char_int_int (Object self, Object ca, Object offset, Object count, ref Object _out)/*String.sk:7*/
  {
    if(((offset._int) > (new Object@Object(__cid=-2, _int=0)._int)) && ((offset._int) < (ca._array_char.length._int)))/*String.sk:8*/
    {
      Object@Object tmp_s799 = null;
      Wrap_Array_char@array(new Array_char@array(length=count), tmp_s799);
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa8 = (i._int) < (count._int);
      while(__sa8)
      {
        tmp_s799._array_char.A[i._int] = ca._array_char.A[(i._int) + (offset._int)];
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa8 = (i._int) < (count._int);
      }
      self._value_String = tmp_s799;
    }
    else
    {
      self._value_String = ca;
    }
    self._count_String = count;
    _out = self;
    return;
  }
  /*String.sk:43*/
  
void charAt_int (Object self, Object index, ref Object _out)/*String.sk:43*/
  {
    if(((new Object@Object(__cid=-2, _int=0)._int) <= (index._int)) && ((index._int) < (self._count_String._int)))/*String.sk:44*/
    {
      _out = new Object@Object(__cid=-3, _char=self._value_String._array_char.A[index._int]);
      return;
    }
    _out = new Object@Object(__cid=-3, _char='\0');
    return;
  }
  /*String.sk:154*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*String.sk:154*/
  {
    _out = new Object@Object(__cid=-4, _bit=0);
    int _out_s782 = 0;
    String@meta(_out_s782);
    if((obj.__cid) == _out_s782)/*String.sk:156*/
    {
      _out = new Object@Object(__cid=-4, _bit=1);
      int sLen_s784 = 0;
      String@meta(sLen_s784);
      Object@Object _pac_sc_s785 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=sLen_s784)._int))/*String.sk:159*/
      {
        Object@Object sLen_s787 = null;
        length@String(obj, sLen_s787);
        _pac_sc_s785 = sLen_s787;
      }
      else
      {
        _pac_sc_s785 = null;
      }
      int tLen_s789 = 0;
      String@meta(tLen_s789);
      Object@Object _pac_sc_s790 = null;
      if((self.__cid) == (new Object@Object(__cid=-2, _int=tLen_s789)._int))/*String.sk:160*/
      {
        Object@Object tLen_s792 = null;
        length@String(self, tLen_s792);
        _pac_sc_s790 = tLen_s792;
      }
      else
      {
        _pac_sc_s790 = null;
      }
      if((_pac_sc_s785._int) != (_pac_sc_s790._int))/*String.sk:161*/
      {
        _out = new Object@Object(__cid=-4, _bit=0);
      }
      Object@Object i;
      i = new Object@Object(__cid=-2, _int=0);
      bit __sa16 = ((i._int) < (_pac_sc_s785._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      while(__sa16)
      {
        if((obj._value_String._array_char.A[i._int]) != (self._value_String._array_char.A[i._int]))/*String.sk:163*/
        {
          _out = new Object@Object(__cid=-4, _bit=0);
        }
        i = new Object@Object(__cid=-2, _int=(i._int) + 1);
        __sa16 = ((i._int) < (_pac_sc_s785._int)) && ((_out._bit) == (new Object@Object(__cid=-4, _bit=1)._bit));
      }
    }
    return;
  }
  /*String.sk:171*/
  
void hashCode (Object self, ref Object _out)/*String.sk:171*/
  {
    Object@Object n;
    Object@Object hash;
    Object@Object temp;
    n = self._count_String;
    hash = new Object@Object(__cid=-2, _int=0);
    if((n._int) == (new Object@Object(__cid=-2, _int=0)._int))/*String.sk:173*/
    {
      _out = new Object@Object(__cid=-2, _int=0);
      return;
    }
    Object@Object i;
    i = new Object@Object(__cid=-2, _int=0);
    bit __sa17 = (i._int) < (n._int);
    while(__sa17)
    {
      int temp_s794 = 0;
      String@meta(temp_s794);
      Object@Object _pac_sc_s795 = null;
      if((self.__cid) == (new Object@Object(__cid=-2, _int=temp_s794)._int))/*String.sk:177*/
      {
        Object@Object temp_s797 = null;
        charAt_int@String(self, i, temp_s797);
        _pac_sc_s795 = temp_s797;
      }
      else
      {
        _pac_sc_s795 = null;
      }
      temp = _pac_sc_s795;
      Object@Object j;
      j = new Object@Object(__cid=-2, _int=0);
      bit __sa18 = (j._int) < (((n._int) - (new Object@Object(__cid=-2, _int=1)._int)) - (i._int));
      while(__sa18)
      {
        temp = new Object@Object(__cid=-2, _int=(temp._int) * (new Object@Object(__cid=-2, _int=31)._int));
        j = new Object@Object(__cid=-2, _int=(j._int) + 1);
        __sa18 = (j._int) < (((n._int) - (new Object@Object(__cid=-2, _int=1)._int)) - (i._int));
      }
      hash = new Object@Object(__cid=-2, _int=(hash._int) + (temp._int));
      i = new Object@Object(__cid=-2, _int=(i._int) + 1);
      __sa17 = (i._int) < (n._int);
    }
    _out = hash;
    return;
  }
  /*String.sk:48*/
  
void length (Object self, ref Object _out)/*String.sk:48*/
  {
    _out = self._count_String;
    return;
  }
  /* END PACKAGE String*/
}
/* BEGIN PACKAGE BucketingTest*/
package BucketingTest{
  /*BucketingTest.sk:8*/
  
void mn_int_int_int ()/*BucketingTest.sk:8*/
  {
    Object@Object x = new Object@Object(__cid=-2, _int=1);
    Object@Object y = new Object@Object(__cid=-2, _int=2);
    Object@Object z = new Object@Object(__cid=-2, _int=3);
    int self_s996 = 0;
    Object@meta(self_s996);
    Object@Object self_s998 = null;
    Object_Object@Object(new Object@Object(__cid=self_s996), self_s998)//{};
    int xx_s1000 = 0;
    Integer@meta(xx_s1000);
    Object@Object xx_s1002 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=xx_s1000), x, xx_s1002)//{};
    int yy_s1004 = 0;
    Integer@meta(yy_s1004);
    Object@Object yy_s1006 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=yy_s1004), y, yy_s1006)//{};
    int zz_s1008 = 0;
    Integer@meta(zz_s1008);
    Object@Object zz_s1010 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=zz_s1008), z, zz_s1010)//{};
    setUp@BucketingTest(self_s998);
    testClear_Integer_Integer@BucketingTest(self_s998, xx_s1002, yy_s1006);
    testGetEmpty@BucketingTest(self_s998);
    testPutAndGet_Integer_Integer_Integer@BucketingTest(self_s998, xx_s1002, yy_s1006, zz_s1010);
  }
  /*BucketingTest.sk:8*/
  
void mn_int_int_int__Wrapper ()  implements mn_int_int_int__WrapperNospec/*BucketingTest.sk:8*/
  {
    mn_int_int_int();
  }
  /*BucketingTest.sk:8*/
  
void mn_int_int_int__WrapperNospec ()/*BucketingTest.sk:8*/
  { }
  /*BucketingTest.sk:32*/
  
void setUp (Object self)/*BucketingTest.sk:32*/
  {
    int _out_s1074 = 0;
    Bucketing@meta(_out_s1074);
    Object@Object _out_s1076 = null;
    Bucketing_Bucketing@Bucketing(new Object@Object(__cid=_out_s1074), _out_s1076)//{};
    self.classUnderTest_BucketingTest = _out_s1076;
  }
  /*BucketingTest.sk:36*/
  
void testClear_Integer_Integer (Object self, Object x, Object y)/*BucketingTest.sk:36*/
  {
    int _out_s1058 = 0;
    Bucketing@meta(_out_s1058);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1058)._int))/*BucketingTest.sk:37*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y);
    }
    int _out_s1060 = 0;
    Bucketing@meta(_out_s1060);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1060)._int))/*BucketingTest.sk:39*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x);
    }
    int _out_s1062 = 0;
    Bucketing@meta(_out_s1062);
    Object@Object _pac_sc_s1063 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1062)._int))/*BucketingTest.sk:41*/
    {
      Object@Object _out_s1065 = null;
      size@Bucketing(self.classUnderTest_BucketingTest, _out_s1065);
      _pac_sc_s1063 = _out_s1065;
    }
    else
    {
      _pac_sc_s1063 = null;
    }
    assertTrue_boolean@Assert(new Object@Object(__cid=-4, _bit=(_pac_sc_s1063._int) > (new Object@Object(__cid=-2, _int=0)._int)))//{};
    int _out_s1067 = 0;
    Bucketing@meta(_out_s1067);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1067)._int))/*BucketingTest.sk:42*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s1069 = 0;
    Bucketing@meta(_out_s1069);
    Object@Object _pac_sc_s1070 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1069)._int))/*BucketingTest.sk:44*/
    {
      Object@Object _out_s1072 = null;
      size@Bucketing(self.classUnderTest_BucketingTest, _out_s1072);
      _pac_sc_s1070 = _out_s1072;
    }
    else
    {
      _pac_sc_s1070 = null;
    }
    assertFalse_boolean@Assert(new Object@Object(__cid=-4, _bit=(_pac_sc_s1070._int) > (new Object@Object(__cid=-2, _int=0)._int)))//{};
  }
  /*BucketingTest.sk:47*/
  
void testGetEmpty (Object self)/*BucketingTest.sk:47*/
  {
    int _out_s1051 = 0;
    Bucketing@meta(_out_s1051);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1051)._int))/*BucketingTest.sk:48*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s1053 = 0;
    Bucketing@meta(_out_s1053);
    Object@Object _pac_sc_s1054 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1053)._int))/*BucketingTest.sk:50*/
    {
      Object@Object _out_s1056 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, null, _out_s1056);
      _pac_sc_s1054 = _out_s1056;
    }
    else
    {
      _pac_sc_s1054 = null;
    }
    assertNull_Object@Assert(_pac_sc_s1054)//{};
  }
  /*BucketingTest.sk:53*/
  
void testPutAndGet_Integer_Integer_Integer (Object self, Object x, Object y, Object z)/*BucketingTest.sk:53*/
  {
    int _out_s1012 = 0;
    Bucketing@meta(_out_s1012);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1012)._int))/*BucketingTest.sk:54*/
    {
      clear@Bucketing(self.classUnderTest_BucketingTest);
    }
    int _out_s1014 = 0;
    Bucketing@meta(_out_s1014);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1014)._int))/*BucketingTest.sk:56*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y);
    }
    int _out_s1016 = 0;
    Bucketing@meta(_out_s1016);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1016)._int))/*BucketingTest.sk:58*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x);
    }
    int _out_s1018 = 0;
    Bucketing@meta(_out_s1018);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1018)._int))/*BucketingTest.sk:60*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, z, x);
    }
    int _out_s1020 = 0;
    Bucketing@meta(_out_s1020);
    Object@Object _pac_sc_s1021 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1020)._int))/*BucketingTest.sk:62*/
    {
      Object@Object _out_s1023 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, x, _out_s1023);
      _pac_sc_s1021 = _out_s1023;
    }
    else
    {
      _pac_sc_s1021 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s1021, y)//{};
    int _out_s1025 = 0;
    Bucketing@meta(_out_s1025);
    Object@Object _pac_sc_s1026 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1025)._int))/*BucketingTest.sk:63*/
    {
      Object@Object _out_s1028 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, y, _out_s1028);
      _pac_sc_s1026 = _out_s1028;
    }
    else
    {
      _pac_sc_s1026 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s1026, x)//{};
    int _out_s1030 = 0;
    Bucketing@meta(_out_s1030);
    Object@Object _pac_sc_s1031 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1030)._int))/*BucketingTest.sk:64*/
    {
      Object@Object _out_s1033 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, z, _out_s1033);
      _pac_sc_s1031 = _out_s1033;
    }
    else
    {
      _pac_sc_s1031 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s1031, x)//{};
    int add_s1035 = 0;
    Integer@meta(add_s1035);
    Object@Object _pac_sc_s1036 = null;
    if((x.__cid) == (new Object@Object(__cid=-2, _int=add_s1035)._int))/*BucketingTest.sk:65*/
    {
      Object@Object add_s1038 = null;
      intValue@Integer(x, add_s1038);
      _pac_sc_s1036 = add_s1038;
    }
    else
    {
      _pac_sc_s1036 = null;
    }
    Object@Object add = new Object@Object(__cid=-2, _int=(_pac_sc_s1036._int) + (new Object@Object(__cid=-2, _int=1)._int));
    int i_s1040 = 0;
    Integer@meta(i_s1040);
    Object@Object i_s1042 = null;
    Integer_Integer_int@Integer(new Object@Object(__cid=i_s1040), add, i_s1042)//{};
    int _out_s1044 = 0;
    Bucketing@meta(_out_s1044);
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1044)._int))/*BucketingTest.sk:67*/
    {
      put_K_V@Bucketing(self.classUnderTest_BucketingTest, i_s1042, y);
    }
    int _out_s1046 = 0;
    Bucketing@meta(_out_s1046);
    Object@Object _pac_sc_s1047 = null;
    if((self.classUnderTest_BucketingTest.__cid) == (new Object@Object(__cid=-2, _int=_out_s1046)._int))/*BucketingTest.sk:69*/
    {
      Object@Object _out_s1049 = null;
      get_K@Bucketing(self.classUnderTest_BucketingTest, i_s1042, _out_s1049);
      _pac_sc_s1047 = _out_s1049;
    }
    else
    {
      _pac_sc_s1047 = null;
    }
    assertEquals_Object_Object@Assert(_pac_sc_s1047, y)//{};
  }
  /* END PACKAGE BucketingTest*/
}
/* BEGIN PACKAGE Integer*/
package Integer{
  /*Integer.sk:7*/
  
void Integer_Integer_int (Object self, Object value, ref Object _out)/*Integer.sk:7*/
  {
    self.value_Integer = value;
    _out = self;
    return;
  }
  /*Integer.sk:24*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Integer.sk:24*/
  {
    int _out_s1078 = 0;
    Integer@meta(_out_s1078);
    if((obj.__cid) == _out_s1078)/*Integer.sk:25*/
    {
      int _out_s1080 = 0;
      Integer@meta(_out_s1080);
      Object@Object _pac_sc_s1081 = null;
      if((obj.__cid) == (new Object@Object(__cid=-2, _int=_out_s1080)._int))/*Integer.sk:26*/
      {
        Object@Object _out_s1083 = null;
        intValue@Integer(obj, _out_s1083);
        _pac_sc_s1081 = _out_s1083;
      }
      else
      {
        _pac_sc_s1081 = null;
      }
      _out = new Object@Object(__cid=-4, _bit=(self.value_Integer._int) == (_pac_sc_s1081._int));
      return;
    }
    _out = new Object@Object(__cid=-4, _bit=0);
    return;
  }
  /*Integer.sk:31*/
  
void hashCode (Object self, ref Object _out)/*Integer.sk:31*/
  {
    _out = self.value_Integer;
    return;
  }
  /*Integer.sk:12*/
  
void intValue (Object self, ref Object _out)/*Integer.sk:12*/
  {
    _out = self.value_Integer;
    return;
  }
  /* END PACKAGE Integer*/
}
/* BEGIN PACKAGE Assert*/
package Assert{
  /*Assert.sk:45*/
  
void assertEquals_Object_Object (Object expected, Object actual)/*Assert.sk:45*/
  {
    assertEquals_String_Object_Object(null, expected, actual);
  }
  /*Assert.sk:30*/
  
void assertEquals_String_Object_Object (Object message, Object expected, Object actual)/*Assert.sk:30*/
  {
    int _out_s1092 = 0;
    Integer@meta(_out_s1092);
    Object@Object _pac_sc_s1093 = null;
    if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1092)._int))/*Assert.sk:31*/
    {
      Object@Object _out_s1095 = null;
      equals_Object@Integer(expected, actual, _out_s1095);
      _pac_sc_s1093 = _out_s1095;
    }
    else
    {
      int _out_s1097 = 0;
      Bucketing@meta(_out_s1097);
      Object@Object _pac_sc_s1098 = null;
      if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1097)._int))/*Assert.sk:31*/
      {
        Object@Object _out_s1100 = null;
        equals_Object@Object(expected, actual, _out_s1100);
        _pac_sc_s1098 = _out_s1100;
      }
      else
      {
        int _out_s1102 = 0;
        BucketingTest@meta(_out_s1102);
        Object@Object _pac_sc_s1103 = null;
        if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1102)._int))/*Assert.sk:31*/
        {
          Object@Object _out_s1105 = null;
          equals_Object@Object(expected, actual, _out_s1105);
          _pac_sc_s1103 = _out_s1105;
        }
        else
        {
          int _out_s1107 = 0;
          Pair@meta(_out_s1107);
          Object@Object _pac_sc_s1108 = null;
          if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1107)._int))/*Assert.sk:31*/
          {
            Object@Object _out_s1110 = null;
            equals_Object@Object(expected, actual, _out_s1110);
            _pac_sc_s1108 = _out_s1110;
          }
          else
          {
            int _out_s1112 = 0;
            String@meta(_out_s1112);
            Object@Object _pac_sc_s1113 = null;
            if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1112)._int))/*Assert.sk:31*/
            {
              Object@Object _out_s1115 = null;
              equals_Object@String(expected, actual, _out_s1115);
              _pac_sc_s1113 = _out_s1115;
            }
            else
            {
              int _out_s1117 = 0;
              Boolean@meta(_out_s1117);
              Object@Object _pac_sc_s1118 = null;
              if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1117)._int))/*Assert.sk:31*/
              {
                Object@Object _out_s1120 = null;
                equals_Object@Object(expected, actual, _out_s1120);
                _pac_sc_s1118 = _out_s1120;
              }
              else
              {
                int _out_s1122 = 0;
                ArrayList@meta(_out_s1122);
                Object@Object _pac_sc_s1123 = null;
                if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1122)._int))/*Assert.sk:31*/
                {
                  Object@Object _out_s1125 = null;
                  equals_Object@Object(expected, actual, _out_s1125);
                  _pac_sc_s1123 = _out_s1125;
                }
                else
                {
                  int _out_s1127 = 0;
                  Assert@meta(_out_s1127);
                  Object@Object _pac_sc_s1128 = null;
                  if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1127)._int))/*Assert.sk:31*/
                  {
                    Object@Object _out_s1130 = null;
                    equals_Object@Object(expected, actual, _out_s1130);
                    _pac_sc_s1128 = _out_s1130;
                  }
                  else
                  {
                    int _out_s1132 = 0;
                    Character@meta(_out_s1132);
                    Object@Object _pac_sc_s1133 = null;
                    if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1132)._int))/*Assert.sk:31*/
                    {
                      Object@Object _out_s1135 = null;
                      equals_Object@Character(expected, actual, _out_s1135);
                      _pac_sc_s1133 = _out_s1135;
                    }
                    else
                    {
                      int _out_s1137 = 0;
                      Object@meta(_out_s1137);
                      Object@Object _pac_sc_s1138 = null;
                      if((expected.__cid) == (new Object@Object(__cid=-2, _int=_out_s1137)._int))/*Assert.sk:31*/
                      {
                        Object@Object _out_s1140 = null;
                        equals_Object@Object(expected, actual, _out_s1140);
                        _pac_sc_s1138 = _out_s1140;
                      }
                      else
                      {
                        _pac_sc_s1138 = null;
                      }
                      _pac_sc_s1133 = _pac_sc_s1138;
                    }
                    _pac_sc_s1128 = _pac_sc_s1133;
                  }
                  _pac_sc_s1123 = _pac_sc_s1128;
                }
                _pac_sc_s1118 = _pac_sc_s1123;
              }
              _pac_sc_s1113 = _pac_sc_s1118;
            }
            _pac_sc_s1108 = _pac_sc_s1113;
          }
          _pac_sc_s1103 = _pac_sc_s1108;
        }
        _pac_sc_s1098 = _pac_sc_s1103;
      }
      _pac_sc_s1093 = _pac_sc_s1098;
    }
    assert (_pac_sc_s1093._bit); //Assert at Assert.sk:31 (0)
  }
  /*Assert.sk:15*/
  
void assertFalse_String_boolean (Object message, Object condition)/*Assert.sk:15*/
  {
    assertTrue_String_boolean(message, new Object@Object(__cid=-4, _bit=!(condition._bit)));
  }
  /*Assert.sk:19*/
  
void assertFalse_boolean (Object condition)/*Assert.sk:19*/
  {
    int _out_s1142 = 0;
    String@meta(_out_s1142);
    Object@Object _out_s1144 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=1), A={'\0'}), _out_s1144);
    Object@Object _out_s1146 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s1142), _out_s1144, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=0), _out_s1146)//{};
    assertFalse_String_boolean(_out_s1146, condition)//{};
  }
  /*Assert.sk:60*/
  
void assertNull_Object (Object object)/*Assert.sk:60*/
  {
    assertNull_String_Object(null, object);
  }
  /*Assert.sk:53*/
  
void assertNull_String_Object (Object message, Object object)/*Assert.sk:53*/
  {
    if(object == (null))/*Assert.sk:54*/
    {
      return;
    }
    failNotNull_String_Object(message, object);
  }
  /*Assert.sk:7*/
  
void assertTrue_String_boolean (Object message, Object condition)/*Assert.sk:7*/
  {
    assert (condition._bit); //Assert at Assert.sk:8 (2)
  }
  /*Assert.sk:11*/
  
void assertTrue_boolean (Object condition)/*Assert.sk:11*/
  {
    int _out_s1148 = 0;
    String@meta(_out_s1148);
    Object@Object _out_s1150 = null;
    Wrap_Array_char@array(new Array_char@array(length=new Object@Object(__cid=-2, _int=1), A={'\0'}), _out_s1150);
    Object@Object _out_s1152 = null;
    String_String_char_int_int@String(new Object@Object(__cid=_out_s1148), _out_s1150, new Object@Object(__cid=-2, _int=0), new Object@Object(__cid=-2, _int=0), _out_s1152)//{};
    assertTrue_String_boolean(_out_s1152, condition)//{};
  }
  /*Assert.sk:64*/
  
void failNotNull_String_Object (Object message, Object actual)/*Assert.sk:64*/
  {
    assert (new Object@Object(__cid=-4, _bit=0)._bit); //Assert at Assert.sk:65 (0)
  }
  /* END PACKAGE Assert*/
}
/* BEGIN PACKAGE array*/
package array{
  struct Array_bit {
      Object length;
      bit[length._int] A;
  }
  struct Array_char {
      Object length;
      char[length._int] A;
  }
  struct Array_int {
      Object length;
      int[length._int] A;
  }
  struct Array_float {
      Object length;
      float[length._int] A;
  }
  struct Array_double {
      Object length;
      double[length._int] A;
  }
  struct Array_Object {
      Object length;
      Object[length._int] A;
  }
  /*array.sk:53*/
  
void Wrap_Array_Object (Array_Object arr, ref Object _out)/*array.sk:53*/
  {
    int _out_s1216 = 0;
    Array@meta(_out_s1216);
    _out = new Object@Object(__cid=_out_s1216, _array_object=arr);
    return;
  }
  /*array.sk:37*/
  
void Wrap_Array_char (Array_char arr, ref Object _out)/*array.sk:37*/
  {
    int _out_s1218 = 0;
    Array@meta(_out_s1218);
    _out = new Object@Object(__cid=_out_s1218, _array_char=arr);
    return;
  }
  /*array.sk:41*/
  
void Wrap_Array_int (Array_int arr, ref Object _out)/*array.sk:41*/
  {
    int _out_s1214 = 0;
    Array@meta(_out_s1214);
    _out = new Object@Object(__cid=_out_s1214, _array_int=arr);
    return;
  }
  /* END PACKAGE array*/
}
/* BEGIN PACKAGE meta*/
package meta{
  /*meta.sk:16*/
  
void Array (ref int _out)/*meta.sk:16*/
  {
    _out = -1;
    return;
  }
  /*meta.sk:4*/
  
void ArrayList (ref int _out)/*meta.sk:4*/
  {
    _out = 8;
    return;
  }
  /*meta.sk:5*/
  
void Assert (ref int _out)/*meta.sk:5*/
  {
    _out = 7;
    return;
  }
  /*meta.sk:6*/
  
void Boolean (ref int _out)/*meta.sk:6*/
  {
    _out = 12;
    return;
  }
  /*meta.sk:7*/
  
void Bucketing (ref int _out)/*meta.sk:7*/
  {
    _out = 2;
    return;
  }
  /*meta.sk:8*/
  
void BucketingTest (ref int _out)/*meta.sk:8*/
  {
    _out = 3;
    return;
  }
  /*meta.sk:10*/
  
void Character (ref int _out)/*meta.sk:10*/
  {
    _out = 9;
    return;
  }
  /*meta.sk:12*/
  
void Integer (ref int _out)/*meta.sk:12*/
  {
    _out = 11;
    return;
  }
  /*meta.sk:13*/
  
void Object (ref int _out)/*meta.sk:13*/
  {
    _out = 1;
    return;
  }
  /*meta.sk:14*/
  
void Pair (ref int _out)/*meta.sk:14*/
  {
    _out = 4;
    return;
  }
  /*meta.sk:15*/
  
void String (ref int _out)/*meta.sk:15*/
  {
    _out = 6;
    return;
  }
  /* END PACKAGE meta*/
}
/* BEGIN PACKAGE Object*/
package Object{
  struct Object {
      int __cid;
      Object value_Character;
      Object bool_Boolean;
      Object _value_String;
      Object _count_String;
      Object key_Pair;
      Object value_Pair;
      Object classUnderTest_BucketingTest;
      Object integerKey_Bucketing;
      Object numberOfSlots_Bucketing;
      Object bucketHash_Bucketing;
      Object overflow_Bucketing;
      Object sizeBucket_Bucketing;
      Object numberOfElements_Bucketing;
      Object index_Bucketing;
      Object size_Bucketing;
      Object mod_Bucketing;
      Object ilterator_Bucketing;
      Object rehash_Bucketing;
      Object value_Integer;
      ArrayList _arraylist;
      Array_bit _array_bit;
      Array_char _array_char;
      Array_int _array_int;
      Array_float _array_float;
      Array_double _array_double;
      Array_Object _array_object;
      bit _bit;
      char _char;
      int _int;
      float _float;
      double _double;
  }
  /*Object.sk:3*/
  
void Object_Object (Object self, ref Object _out)/*Object.sk:3*/
  {
    _out = self;
    return;
  }
  /*Object.sk:17*/
  
void equals_Object (Object self, Object obj, ref Object _out)/*Object.sk:17*/
  {
    _out = new Object(__cid=-4, _bit=self == obj);
    return;
  }
  /*Object.sk:21*/
  
void hashCode (Object self, ref Object _out)/*Object.sk:21*/
  {
    _out = new Object(__cid=-2, _int=0);
    return;
  }
  /* END PACKAGE Object*/
}
/* BEGIN PACKAGE Boolean*/
package Boolean{
  /* END PACKAGE Boolean*/
}
/* BEGIN PACKAGE Pair*/
package Pair{
  /*Pair.sk:7*/
  
void Pair_Pair_K_V (Object self, Object key, Object value, ref Object _out)/*Pair.sk:7*/
  {
    self.key_Pair = key;
    self.value_Pair = value;
    _out = self;
    return;
  }
  /* END PACKAGE Pair*/
}
[SKETCH] DONE
Total time = 19349
