package BucketingTest;

Object BucketingTest_BucketingTest(Object self) {
    return self;
}

/* harness void mn_int_int_int(int __x, int __y, int __z) { */
harness void mn_int_int_int() {
  Object x = new Object(__cid=-2, _int=1); 
  Object y = new Object(__cid=-2, _int=2); 
  Object z = new Object(__cid=-2, _int=3); 
  Object self = Object_Object(new Object(__cid=Object()));
  assume x._int != y._int && x._int != z._int && y._int != z._int;
  Object xx = Integer_Integer_int(new Object(__cid=Integer()), x);
  Object yy = Integer_Integer_int(new Object(__cid=Integer()), y);
  Object zz = Integer_Integer_int(new Object(__cid=Integer()), z);
  setUp@BucketingTest(self);
  testClear_Integer_Integer@BucketingTest(self, xx, yy);
}

void setUp(Object self) {
  self.classUnderTest_BucketingTest = Bucketing_Bucketing(new Object(__cid=Bucketing()));
}

void testClear_Integer_Integer(Object self, Object x, Object y) {
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, x, y); }
  else { 0; };
  if (self.classUnderTest_BucketingTest.__cid == (new Object(__cid=-2, _int=Bucketing()))._int) { put_K_V@Bucketing(self.classUnderTest_BucketingTest, y, x); }
  else { 0; };
}

