package Axiom_String;

String string(int __cid, int n, char[n] s)           { return new String(__cid=__cid, n=n, s=s); }
Len length(T t)           { return new Len(t=t); }
Concat concat(T t1, T t2) { return new Concat(t1=t1, t2=t2); }
Plus plus(T t1, T t2)     { return new Plus(left=t1, right=t2); }
Error error()             { return new Error(); }

T xform(T t) {
  switch(t) {
  case String: return t;
  case Len:    return xform_Len(t.t);
  case Plus:   return plus(xform(t.left), xform(t.right));
  case Concat: return concat(xform(t.t1), xform(t.t2));
  case Error:  return t;
  }
}
T xform_Len(T t) {
  switch(t) {
  case String: return length(t);
  case Len:    return new Error(); // length(length(...)))
  case Plus:   return new Error(); // length(plus(...))
  case Concat: return plus(xform_Len(t.t1), xform_Len(t.t2));
  case Error:  return t;
  }
}

harness void mn() {
  Object self = Object_Object(new Object(__cid=Object()));
  test_7_6(self);
  // test_100_200(self);
}

void test_7_6(Object self) {
  /* ORIGINAL JSketch CODE:
  /* Object s1 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=7+1, A="hello, "), 0, 7); */
  /* Object s2 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=6+1, A="world!"), 0, 6); */
  /* Object s3 = (s1.__cid == String() ? concat_String@String(s1, s2) : null); */
  /* int len12 = (s1.__cid == String() ? length@String(s1) : 0) + (s2.__cid == String() ? length@String(s2) : 0); */
  /* int len3 = (s3.__cid == String() ? length@String(s3) : 0); */

  /* JSketch CODE TRANSLATED TO ADT WITH DYNAMIC DISPATCH */
  /* Dynamic dispatch with adt. Not straightforward b/c of __cid. */
  /* T s3 = (s1.__cid == String() ? concat(s1, s2) : null); */
  /* T len12 = plus((s1.__cid == String() ? length(s1) : null), (s2.__cid == String() ? length(s2) : null)); */
  /* T len3 = (((String)s3).__cid == String() ? length(s3) : null); */

  /* W/OUT DYNAMIC DISPATCH */
  String s1 = string(String(), 8, "hello, ");
  String s2 = string(String(), 7, "world!");
  String s3 = string(String(), 4, "BEN");
  String s4 = string(String(), 5, "JOSH");
  T s5 = concat(s1, s2);
  T s6 = concat(s3, s4);
  T s7 = concat(s5, s6);
  T len12 = plus(length(s1), length(s2));
  T len34 = plus(length(s3), length(s4));
  T len1234 = plus(len12, len34);
  T len5 = length(s5);
  T len6 = length(s6);
  T len7 = length(s7);
  assert xform(len5) == len12;
  assert xform(len6) == len34;
  assert xform(len7) == len1234;

  String s8 = string(String(), 6, "SEED1");
  String s9 = string(String(), 6, "SEED2");
  T s10 = string(String(), 1, "");

  T looplen = length(s10);

  int i = 0;

  for (i = 0; i < 10; i++) {
     T s11 = concat(s8, s8);
     T s12 = concat(s9, s9);
     T s13 = concat(s11, s12);
     s10 = concat(s10, s13);
     looplen = plus(looplen, plus(plus(length(s8), length(s8)),plus(length(s9), length(s9))));
  }

  T len10 = length(s10);
  assert xform(len10) == looplen;
}

 // void test_100_200(Object self) { 
 //   Object s1 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=100+1, A="0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"), 0, 100); 
 //   Object s2 = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=200+1, A="01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"), 0, 200); 

 //   Object s3 = (s1.__cid == String() ? concat_String@String(s1, s2) : null); 
 //   int len12 = (s1.__cid == String() ? length@String(s1) : 0) + (s2.__cid == String() ? length@String(s2) : 0); 
 //   int len3 = (s3.__cid == String() ? length@String(s3) : 0); 
 //   assert len3 == len12; 
 // } 
