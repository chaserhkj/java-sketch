package Axiom_String;

Object string(int __cid, int n, char[n] s) { 
   return String_String_char_int_int(new Object(__cid=String()), new Array_char(length=n, A=s), 0, n-1);
}
Object length(Object str) { 
   return Len_Len_Object(new Object(__cid=Len()), str); 
}
Object concat(Object s1, Object s2) { 
   return Concat_Concat_Object_Object(new Object(__cid=Concat()), s1, s2); 
}
Object plus(Object i1, Object i2) { 
   return Plus_Plus_Object_Object(new Object(__cid=Plus()), i1, i2); 
}
Object error() { 
   return Error_Error(new Object(__cid=Error())); 
}

Object xform (Object t) {
   if (t.__cid == Len()) {
      return xform_Len(t.str_Len);
   } else if (t.__cid == Plus()) {
      return plus(xform(t.i1_Plus), xform(t.i2_Plus));	
   } else if (t.__cid == Concat()) {
      return concat(xform(t.s1_Concat), xform(t.s2_Concat));	
   } else {
      return t;
   }  
}

Object xform_Len (Object t) {
   if (t.__cid == String()) {
      return length(t);
   } else if (t.__cid == Concat()) {
      return plus(xform_Len(t.s1_Concat), xform_Len(t.s2_Concat));	
   } else {
      return error();
   }         
}

// T xform(T t) {
//   switch(t) {
//   case String: return t;
//   case Len:    return xform_Len(t.t);
//   case Plus:   return plus(xform(t.left), xform(t.right));
//   case Concat: return concat(xform(t.t1), xform(t.t2));
//   case Error:  return t;
//   }
// }
// T xform_Len(T t) {
//   switch(t) {
//   case String: return length(t);
//   case Len:    return new Error(); // length(length(...)))
//   case Plus:   return new Error(); // length(plus(...))
//   case Concat: return plus(xform_Len(t.t1), xform_Len(t.t2));
//   case Error:  return t;
//   }
// }

harness void mn() {
  Object self = Object_Object(new Object(__cid=Object()));
  test_7_6(self);
  // test_100_200(self);
}

void test_7_6(Object self) {

  /* W/OUT DYNAMIC DISPATCH */
  Object s1 = string(String(), 8, "hello, ");
  Object s2 = string(String(), 7, "world!");
  Object s3 = string(String(), 4, "BEN");
  Object s4 = string(String(), 5, "JOSH");
  Object s5 = concat(s1, s2);
  Object s6 = concat(s3, s4);
  Object s7 = concat(s5, s6);
  Object len12 = plus(length(s1), length(s2));
  //Object len12_2 = plus(length(s1), length(s2));
  Object len34 = plus(length(s3), length(s4));
  Object len1234 = plus(len12, len34);
  Object len5 = length(s5);
  Object len6 = length(s6);
  Object len7 = length(s7);
  //assert equals_Axiom(len12, len12_2);
  assert equals_Axiom(xform(len5), len12);
  assert equals_Axiom(xform(len6), len34);
  assert equals_Axiom(xform(len7), len1234);

  Object s8 = string(String(), 6, "SEED1");
  Object s9 = string(String(), 6, "SEED2");
  Object s10 = string(String(), 1, "");

  Object looplen = length(s10);

  int i = 0;

  for (i = 0; i < 30; i++) {
     Object s11 = concat(s8, s8);
     Object s12 = concat(s9, s9);
     Object s13 = concat(s11, s12);
     s10 = concat(s10, s13);
     looplen = plus(looplen, plus(plus(length(s8), length(s8)),plus(length(s9), length(s9))));
  }

  Object len10 = length(s10);
  assert equals_Axiom(xform(len10), looplen);
}
