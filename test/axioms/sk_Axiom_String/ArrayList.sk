package ArrayList;

Object ArrayList_ArrayList(Object self) {
  self.elementData_ArrayList = new Array_Object(length=10);
  self.capacity_ArrayList = 10;
  self.numElements_ArrayList = 0;
  return self;
}

Object ArrayList_ArrayList_int(Object self, int initialCapacity) {
  self.elementData_ArrayList = new Array_Object(length=initialCapacity);
  self.capacity_ArrayList = initialCapacity;
  self.numElements_ArrayList = 0;
  return self;
}

void copyNewElementData_int(Object self, int size) {
  Array_Object newElementData = new Array_Object(length=size);
  int i = 0;
  for (i = 0; i < self.numElements_ArrayList; i++) {
    newElementData.A[i] = self.elementData_ArrayList.A[i];
  }
  self.elementData_ArrayList = newElementData;
  self.capacity_ArrayList = size;
}

void checkAdjustSize(Object self) {
  if (self.numElements_ArrayList + 1 >= self.capacity_ArrayList) {
    copyNewElementData_int(self, self.capacity_ArrayList + 10);
  }
}

void createSpace_int(Object self, int index) {
  int j = 0;
  for (j = self.numElements_ArrayList; j > index; j--) {
    self.elementData_ArrayList.A[j] = self.elementData_ArrayList.A[j - 1];
  }
}

void add_int_E(Object self, int index, Object e) {
  checkAdjustSize(self);
  createSpace_int(self, index);
  self.elementData_ArrayList.A[index] = e;
  self.numElements_ArrayList++;
}

bit add_E(Object self, Object e) {
  checkAdjustSize(self);
  self.elementData_ArrayList.A[self.numElements_ArrayList++] = e;
  return true;
}

void clear(Object self) {
  for (int i = 0; i < self.numElements_ArrayList; i++) {
    self.elementData_ArrayList.A[i] = null;
  }
  self.capacity_ArrayList = 10;
  self.numElements_ArrayList = 0;
}

bit contains_Object(Object self, Object o) {
  return indexOf_Object(self, o) >= 0;
}

Object get_int(Object self, int index) {
  if (index < 0 || index >= self.numElements_ArrayList) {
    return null;
  }
  return self.elementData_ArrayList.A[index];
}

int indexOf_Object(Object self, Object o) {
  int i = 0;
  if (o == null) {
    for (i = 0; i < self.capacity_ArrayList; i++) {
      if (self.elementData_ArrayList.A[i] == null) {
        return i;
      }
    }
  }
  else {
    for (i = 0; i < self.numElements_ArrayList; i++) {
      if ((o.__cid == Float() ? equals_Object@Float(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == String() ? equals_Object@String(o, self.elementData_ArrayList.A[i]) : o.__cid == Number() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Simple() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Simple_Node() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_TreeNode() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == ArrayList() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == Integer() ? equals_Object@Integer(o, self.elementData_ArrayList.A[i]) : o.__cid == Objects() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Node() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == Object() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : 0)) {
        return i;
      }
    }
  }
  return -1;
}

void removeElement_int(Object self, int index) {
  int j = 0;
  for (j = index; j < self.numElements_ArrayList - 1; j++) {
    self.elementData_ArrayList.A[j] = self.elementData_ArrayList.A[j + 1];
  }
  self.elementData_ArrayList.A[self.numElements_ArrayList - 1] = null;
  self.numElements_ArrayList--;
}

Object remove_int(Object self, int index) {
  Object e;
  if (index < 0 || index >= self.numElements_ArrayList) {
    return null;
  }
  e = self.elementData_ArrayList.A[index];
  removeElement_int(self, index);
  return e;
}

bit remove_Object(Object self, Object o) {
  int i = 0;
  if (o == null) {
    for (i = 0; i < self.capacity_ArrayList; i++) {
      if (self.elementData_ArrayList.A[i] == null) {
        removeElement_int(self, i);
        return true;
      }
    }
  }
  else {
    for (i = 0; i < self.numElements_ArrayList; i++) {
      if ((o.__cid == Float() ? equals_Object@Float(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == String() ? equals_Object@String(o, self.elementData_ArrayList.A[i]) : o.__cid == Number() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Simple() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Simple_Node() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_TreeNode() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == ArrayList() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == Integer() ? equals_Object@Integer(o, self.elementData_ArrayList.A[i]) : o.__cid == Objects() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == HashMap_Node() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : o.__cid == Object() ? equals_Object@Object(o, self.elementData_ArrayList.A[i]) : 0)) {
        removeElement_int(self, i);
        return true;
      }
    }
  }
  return false;
}

Object set_int_E(Object self, int index, Object element) {
  Object oldElement;
  if (index < 0 || index >= self.numElements_ArrayList) {
    return null;
  }
  oldElement = self.elementData_ArrayList.A[index];
  self.elementData_ArrayList.A[index] = element;
  return oldElement;
}

int size(Object self) {
  return self.numElements_ArrayList;
}

Array_Object toArray(Object self) {
  Array_Object arr = new Array_Object(length=self.numElements_ArrayList);
  int i = 0;
  for (i = 0; i < self.numElements_ArrayList; i++) {
    arr.A[i] = self.elementData_ArrayList.A[i];
  }
  return arr;
}

