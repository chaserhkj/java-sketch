package meta;

adt T {
  Str    { int n; char[n] s; }
  Len    { T t; }
  Concat { T t1; T t2; }
  Plus   { T left; T right; }
  Error  { }
}

// Construct string with concrete values
/* Object string([int n], char[n] s) { return new Object(__cid=String(),str=new Str(n=n,s=s)); } */
Object string()                  { return new Object(__cid=String(),t=new Str()); }
Object length(T t)               { return new Object(__cid=String(),t=new Len(t=t)); }
Object concat(T t1, T t2)        { return new Object(__cid=String(),t=new Concat(t1=t1,t2=t2)); }
Object plus(T left, T right)     { return new Object(__cid=String(),t=new Plus(left=left,right=right)); }

T xform(T t) {
  switch(t) {
  case Str:    return t;
  case Len:    return xform_Len(t.t);
  case Plus:   return new Plus(left=xform(t.left), right=xform(t.right));
  case Concat: return new Concat(t1=xform(t.t1), t2=xform(t.t2));
  case Error:  return t;
  }
}
T xform_Len(T t) {
  switch(t) {
  case Str:    return new Len(t=t);
  case Len:    return new Error(); // length(length(...)))
  case Plus:   return new Error(); // length(plus(...))
  case Concat: return new Plus(left=xform_Len(t.t1), right=xform_Len(t.t2));
  case Error:  return t;
  }
}

// distinct class IDs
int CharSequence()         { return 3; }
int Object()               { return 1; }
int String()               { return 7; }

// Uninterpreted functions
