package Axiom_Stack;

Object object() { 
   return Object_Object(new Object(__cid=Object()));
}
Object push(Object s, Object o) { 
   return (s.__cid == Object() || s.__cid == Push() || s.__cid == Pop() ? Push_Push_Object_Object(new Object(__cid=Push()), s, o) : null);
}
Object pop(Object s) { 
   return (s.__cid == Object() || s.__cid == Push() || s.__cid == Pop() ? Pop_Pop_Object(new Object(__cid=Pop()), s): null);
}
Object error() { 
   return Error_Error(new Object(__cid=Error())); 
}

Object tuple(Object s, Object o) {
   return (s.__cid == Push() || s.__cid == Pop() || s.__cid == Object() ? Tuple_Tuple_Object_Object(new Object(__cid=Tuple()), s, o) : null);
}

Object stack(Object s) {
   return (s.__cid == Tuple() ? get_Stack(s) : null);
}

Object elem(Object s) {
   return (s.__cid == Tuple() ? get_Obj(s) : null);
}

Object xform (Object t, int depth, int dice) {
   Object t1;

   if (t.__cid == Pop()) {
      t1 = t.s_Pop;
      if (dice%2 == 0) {
         dice /= 2;
	 return xform(t1, depth+1, dice);
      } else {
         return t;
      }
   } else if (t.__cid == Push()) {
      t1 = t.s_Push;
      if (depth == 1) {
         if (dice%2 == 0) {
	    return t.o_Push;
	 } else {
	    return t;
	 }
      } else {
         if (dice%2 == 0) {
            dice /= 2;
	    return xform(t1, depth-1, dice);	      
	 } else {
	    return t;
	 }         
      }
   } else {
      return t;
   }
}

bit equals_Axiom(Object self, Object obj) {
  if (self == null && obj == null) {
     return true;
  }
  if (self == null || obj == null) {
     return false;
  } 
  if (self.__cid != obj.__cid) {
     return false;
  } else {
     if (self.__cid == Object() && obj.__cid == Object()) {
        return self == obj;
     } else if (self.__cid == Push() && obj.__cid == Push()) {
	if (self.o_Push == obj.o_Push) {
	   return equals_Axiom(self.s_Push, obj.s_Push);
	} 
     } else if (self.__cid == Pop() && obj.__cid == Pop()) {
	return equals_Axiom(self.s_Pop, obj.s_Pop);
     } 

     return false;
  }
}