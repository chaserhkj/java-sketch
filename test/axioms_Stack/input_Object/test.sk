package test;

int TID = -1;

harness void mn() {
  if (TID==0) t0();
  else if (TID==1) t1();
  else if (TID==2) t2();
  else if (TID==3) t3();
  else if (TID==4) t4();
  else if (TID==5) t5();
  else if (TID==6) t6();
  else if (TID==7) t7();
  else if (TID==-1) {
    t0();
    t1();
    t2();
    t3();
    t4();
    t5();
    t6();
    t7();
  }
}

// pop(push(s,o1)) == (s, o1)
// pop(push(s,o1)) == (pop(push(s,o1)), o1)
harness void t0() {
  Object s = object();
  Object o1 = object();

  Object psh1 = push(s, o1);

  Object poppsh1 = pop(psh1);

  assert equals_Axiom(elem(xform3(tuple(poppsh1, null), 0, ??)), o1);
}

// pop(push(push(s,o1), o2)) == (push(s,o1), o2)
// pop(push(push(s,o1), o2)) == (pop(push(push(s,o1), o2)), o2)
harness void t1() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();

  Object psh1 = push(s, o1);
  Object psh12 = push(psh1, o2);

  Object poppsh12 = pop(psh12);

  assert equals_Axiom(elem(xform3(tuple(poppsh12, null), 0, ??)), o2);
}

// pop(push(push(push(push(push(push(s, o1), o2), o3), o4), o5), o6)) == 
//     (push(push(push(push(push(s, o1), o2), o3), o4), o5), o6)
// pop(push(push(push(push(push(push(s, o1), o2), o3), o4), o5), o6)) == 
//     (pop(push(push(push(push(push(push(s, o1), o2), o3), o4), o5), o6)), o6)
harness void t2() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();
  Object o3 = object();
  Object o4 = object();
  Object o5 = object();
  Object o6 = object();

  Object psh1 = push(s, o1);
  Object psh12 = push(psh1, o2);
  Object psh123 = push(psh12, o3);
  Object psh1234 = push(psh123, o4);
  Object psh12345 = push(psh1234, o5);
  Object psh123456 = push(psh12345, o6);

  Object poppsh123456 = pop(psh123456);

  assert equals_Axiom(elem(xform3(tuple(poppsh123456, null), 0, ??)), o6);
}

// pop(push(pop(push(s, o1)), o2)) == o2
harness void t3() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();

  Object psh1 = push(s, o1);  
  Object poppsh1 = pop(psh1);

  Object pshpoppsh12 = push(poppsh1, o2);
  Object poppshpoppsh12 = pop(pshpoppsh12);

  assert equals_Axiom(elem(xform3(tuple(poppshpoppsh12, null), 0, ??)), o2);
}

// pop(pop(push(push(s, o1), o2))) == o1
harness void t4() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();

  Object psh1 = push(s, o1);
  Object psh12 = push(psh1, o2);

  Object poppsh12 = pop(psh12);
  Object poppoppsh12 = pop(poppsh12);

  assert equals_Axiom(elem(xform3(tuple(poppoppsh12, null), 0, ??)), o1);
}

// pop(push(pop(push(pop(push(pop(push(pop(push(s, o1)), o2)), o3)), o4)), o5))
// == o5
harness void t5() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();
  Object o3 = object();
  Object o4 = object();
  Object o5 = object();

  Object psh1 = push(s, o1);
  Object poppsh1 = pop(psh1);
  Object psh2 = push(poppsh1, o2);
  Object poppsh2 = pop(psh2);
  Object psh3 = push(poppsh2, o3);
  Object poppsh3 = pop(psh3);
  Object psh4 = push(poppsh3, o4);
  Object poppsh4 = pop(psh4);
  Object psh5 = push(poppsh4, o5);
  Object poppsh5 = pop(psh5);

  assert equals_Axiom(elem(xform3(tuple(poppsh5, null), 0, ??)), o5);
}

// pop(pop(pop(pop(pop(push(push(push(push(push(s, o1), o2), o3), o4), o5))))))
// == o1
harness void t6() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();
  Object o3 = object();
  Object o4 = object();
  Object o5 = object();

  Object psh1 = push(s, o1);
  Object psh12 = push(psh1, o2);
  Object psh123 = push(psh12, o3);
  Object psh1234 = push(psh123, o4);
  Object psh12345 = push(psh1234, o5);

  Object pop5 = pop(psh12345);
  Object pop4 = pop(pop5);
  Object pop3 = pop(pop4);
  Object pop2 = pop(pop3);
  Object pop1 = pop(pop2);

  assert equals_Axiom(elem(xform3(tuple(pop1, null), 0, ??)), o1);
}

// pop(pop(pop(pop(push(push(pop(push(pop(push(push(push(s, o1), o2), o3)), o4)),// o5), o6))))) == o1
harness void t7() {
  Object s = object();
  Object o1 = object();
  Object o2 = object();
  Object o3 = object();
  Object o4 = object();
  Object o5 = object();
  Object o6 = object();

  Object psh1 = push(s, o1);
  Object psh12 = push(psh1, o2);
  Object psh123 = push(psh12, o3);
  
  Object pop3 = pop(psh123);
  Object psh124 = push(pop3, o4);

  Object pop4 = pop(psh124);
  Object psh125 = push(pop4, o5);
  Object psh1256 = push(psh125, o6);

  Object pop6 = pop(psh1256);
  Object pop5 = pop(pop6);
  Object pop2 = pop(pop5);
  Object pop1 = pop(pop2);
  
  assert equals_Axiom(elem(xform3(tuple(pop1, null), 0, ??)), o1);
}
